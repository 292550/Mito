{"version":3,"sources":["sketch.ts","sketches/mito/audio.ts","sketchComponent.tsx","fullPageSketch.tsx","math/index.ts","sketches/mito/inventory.ts","sketches/mito/directions.ts","common/perlin.ts","sketches/mito/params.ts","sketches/mito/game/tile.ts","sketches/mito/keymap.ts","sketches/mito/game/player.ts","sketches/mito/game/world.ts","sketches/mito/index.tsx","common/lazy.ts","sketches/mito/game/environment.ts","sketches/mito/pathfinding.ts","sketches/mito/spritesheet.ts","sketches/mito/renderers/Renderer.tsx","sketches/mito/renderers/resourceParticles.ts","sketches/mito/renderers/InventoryRenderer.tsx","sketches/mito/movementKeyMeshes.ts","sketches/mito/renderers/PlayerRenderer.tsx","sketches/mito/renderers/TileRenderer.tsx","sketches/mito/renderers/TransportRenderer.tsx","sketches/mito/tutorial/sceneObject.tsx","sketches/mito/tutorial/tileHighlight.tsx","sketches/mito/tutorial/tutorial.tsx","sketches/mito/tutorial/tutorialBuildTissue.tsx","sketches/mito/ui/Instructions.tsx","sketches/mito/ui/GameStack.tsx","sketches/mito/ui/HoveredTileInfo.tsx","sketches/mito/ui/HUD.tsx","sketches/mito/ui/ParamsGUI.tsx","sketches/mito/ui/Hover.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UI_EVENTS","click","contextmenu","dblclick","mousedown","mouseup","mousemove","touchstart","touchmove","touchend","keyup","keydown","keypress","wheel","ISketch","renderer","audioContext","Object","classCallCheck","this","elements","events","timeElapsed","frameCount","createClass","key","get","domElement","height","width","THREE","id","mito","strings","drums","footsteps","build","blopBuffer","suckWaterBuffer","SketchSuccessComponent","props","_this","possibleConstructorReturn","getPrototypeOf","call","frameId","lastTimestamp","loop","timestamp","millisElapsed","sketch","animate","e","console","error","setState","requestAnimationFrame","handleWindowResize","updateRendererCanvasToMatchParent","resize","state","_this2","window","addEventListener","canvas","tabIndex","keys","forEach","eventName","callback","eventsOnBody","document","body","init","sketchElementsWithKey","render","push","apply","toConsumableArray","react","className","map","el","idx","React","_this3","destroy","cancelAnimationFrame","dispose","removeEventListener","parent","parentElement","setSize","clientWidth","clientHeight","SketchComponent","_React$Component2","_getPrototypeOf2","_this4","_len","arguments","length","args","Array","_key","concat","status","type","volumeEnabled","JSON","parse","localStorage","getItem","userVolume","handleContainerRef","ref","AudioContextConstructor","AudioContext","webkitAudioContext","setContext","createGain","gain","setValueAtTime","connect","destination","handleVisibilityChange","alpha","preserveDrawingBuffer","antialias","appendChild","sketchClass","close","handleVolumeButtonClick","setItem","stringify","hidden","suspend","resume","inherits","value","_this$props","containerProps","objectWithoutProperties","classnames","assign","renderSketchOrStatus","renderVolumeButton","sketchComponent_SketchSuccessComponent","errorElement","renderDefaultErrorElement","message","onClick","index_esm","FullPageSketch","_React$Component","handleDivRef","div","exitFullscreen","isKiosk","isPresentationMode","location","search","presentationMode","classes","presentation-mode","kiosk-mode","sketchComponent_SketchComponent","webkitExitFullscreen","mozCancelFullScreen","x","xStart","xStop","yStart","yStop","a","b","lerp","sourceElement","assetName","source","createElement","src","makeNodeOfAudioAsset","ctx","audio","autoplay","createMediaElementSource","fpref","Math","round","Inventory","capacity","carrier","water","undefined","sugar","validate","other","amountWater","amountSugar","Error","min","spaceNeeded","spaceAvailable","space","floor","change","emit","name","fn","EventEmitter","on","newWater","newSugar","warn","hasInventory","obj","inventory","DIRECTIONS","nw","Vector2","w","sw","n","s","ne","se","DIRECTION_VALUES","o","Grad","y","z","grad3","p","F2","sqrt","G2","G3","Noise","seed","random","perm","gradP","octaveNum","octaveFalloff","octaveMatrix2","cos","sin","i","v","xin","yin","i1","j1","j","t","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","dot2","sum","scalar","simplex2","newX","newY","zin","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","gi3","t3","dot3","simplex3","X","Y","n00","n01","n10","n11","u","fade","Z","n000","n001","n010","n011","n100","n101","n110","n111","PARAMS_DEFAULT","isRealtime","environment","cellEnergyMax","tissueInventoryCapacity","rootTurnsPerTransfer","leafReactionRate","leafSugarPerReaction","cellGestationTurns","cellDiffusionWater","cellDiffusionSugar","soilDarknessBase","soilDiffusionType","soilDiffusionWater","veinDiffusion","soilMaxWater","droop","fountainTurnsPerWater","fountainAppearanceRate","transportTurnsPerMove","sunlightReintroduction","sunlightDiffusion","maxResources","params","objectSpread","hash","urlHashParams","decodeURI","substr","updateParamsHash","nonDefaultParams","_i","_keys","encodeURI","hasEnergy","energy","Tile","pos","world","isObstacle","darkness","Infinity","clone","constructor","diffusionWater","diffusionSugar","fallAmount","max","neighbors","tileNeighbors","stepDarkness","stepDiffusion","stepGravity","Cell","minDarkness","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_ref3","slicedToArray","contrib","darknessFromNeighbor","Rock","err","return","cellHere","cellAt","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref5","dir","tile","canDiffuse","diffuseWater","diffuseSugar","_dir","canPullResources","giver","diffusionAmount","give","waterDiff","chanceToHappenScalar","lowerNeighbor","tileAt","time","receiver","recieverType","giverType","allowPull","Soil","Air","displayName","noiseCo2","_Tile","sunlightCached","_co2","assertThisInitialized","computeCo2","base","floorCo2","scaleX","offset","perlin3","sunlight","esm_get","prototype","_Tile2","add","waterGravityPerTurn","stepEvaporation","_this$world$environme","evaporationRate","evaporationBottom","evaporationHeightScalar","evaporationAmountScalar","_Tile3","DeadCell","_Tile4","Fountain","_Soil","turnsPerWater","cooldown","_Tile5","_getPrototypeOf3","_this5","_len3","_key3","droopY","from","values","neighborsAndSelf","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Fruit","wantedEnergy","wantedSugar","gotEnergy","energeticNeighbors","filter","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","neighbor","energyTransfer","stepDroop","player","equals","maybeRemoveCellAt","setTileAt","below","belowLeft","belowRight","left","right","above","aboveLeft","aboveRight","hasSupportBelow","_arr","cell","springNeighborCells","reduce","turnsToBuild","GrowingCell","_Cell","completedCell","_this6","timeRemaining","timeToBuild","Tissue","_Cell2","_getPrototypeOf4","_this7","_len5","_key5","Leaf","_Cell3","_getPrototypeOf5","_this8","_len7","_key7","averageEfficiency","averageSpeed","didConvert","sugarConverted","tilePairs","numAir","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_ref9","_ref8","oppositeTile","air","tissue","speed","efficiency","co2","bestEfficiencyWater","waterToConvert","chance","Root","_Cell4","_getPrototypeOf6","_this9","_len9","_key9","waterTransferAmount","activeNeighbors","stepWaterTransfer","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_ref12","_ref11","_Cell5","_getPrototypeOf7","_this10","_len11","_key11","sugarToWin","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_ref15","Transport","_Tissue","_getPrototypeOf8","_this11","_len13","_key13","targetTile","getTarget","fromTile","getFrom","Vein","_Tissue2","_getPrototypeOf9","_this12","_len15","_key15","ACTION_KEYMAP",".","MOVEMENT_KEYS","d","q","c","MOVEMENTS","BUILD_HOTKEYS","l","Player","action","actionQueue","mapActions","actions","event","cb","shift","mappedAction","isArray","_this$actionQueue","_mappedAction","toArray","currentAction","futureActions","slice","unshift","attemptAction","attemptStill","attemptMove","attemptBuild","attemptBuildTransport","attemptDeconstruct","attemptDrop","attemptMultiple","target","isWalkable","isValidPosition","sub","find","move","verifyMove","currentTime","cancelScheduledValues","linearRampToValueAtTime","context","autopickup","currentTile","inv","position","cellType","fruit","newTile","exponentialRampToValueAtTime","existingCell","force","matureCell","tryConstructingNewCell","newCell","maybeCell","refund","multiple","allSuccess","StepStats","deleted","added","World","gridEnvironment","gridCells","neighborCache","cachedEntities","stepStats","fill","_","__","fillFunction","playerX","firstSoil","distanceTo","computeTileNeighbors","fillCachedEntities","xOrVec2","oldTile","oldCell","oldEnvironmentTile","handleTileUpdated","px","py","mapping","Map","DIRECTION_VALUES_RAND","set","newEntities","reverse","entities","entity","step","computeSunlight","stepWeather","climate","turnsBetweenRainfall","rainDuration","randInt","waterPerDroplet","sunAngle","PI","directionalBias","sunAmount","atan","environmentTileAt","tileUp","tileRight","tileLeft","upSunlight","rightSunlight","leftSunlight","shuffle","array","temporaryValue","randomIndex","currentIndex","lazy","cache","Temperate","noiseWater","noiseRock","noiseHeight","soilLevel","perlin2","rockThreshold","isRock","heightScalar","pow","simplexValue","emitWaterScalar","Desert","Rocky","ALL_ENVIRONMENTS","findPositionsThroughTissue","includeTargetIfNonTissue","grid","newGrid","g","setWalkableAt","path","findPositions","pop","findPositionsThroughNonObstacles","pathFrom","positions","_positions$i","fromX","fromY","_positions","direction","actionMoveFor","start","AStarFinder","diagonalMovement","DiagonalMovement","Always","findPath","Grid","toX","toY","dx","dy","_ref","spriteSize","spritesheetLoaded","SPRITESHEET","load","dispatchEvent","fruitTexture","textureFromSpritesheet","backgroundColor","drawSpriteToCanvas","image","getContext","fillStyle","fillRect","drawImage","texture","needsUpdate","magFilter","flipY","wrapS","wrapT","Renderer","scene","ResourceParticles","_Points","geometry","material","index","newGeometry","ResourceParticleMaterial","frustumCulled","BufferGeometry","Float32Array","BUFFER_SIZE","sizes","addAttribute","BufferAttribute","setDynamic","size","attributes","setXYZ","setX","setDrawRange","Points","uniforms","opacity","sizeGlobal","color","vertexShader","fragmentShader","depthTest","transparent","ShaderMaterial","InventoryRenderer","_Renderer","animationOffset","waters","sugars","handleGetResources","wantedMeshes","ceil","handleGiveResources","splice","newParticle","WaterParticles","startFrame","SugarParticles","endFrame","resource","particles","resourceArray","commit","fract","resources","r","vx","vy","angle","performance","now","goTowardsCenterStrength","avoidPlayerStrength","lengthSq","multiplyScalar","strength","updateNumParticles","simulateResourcePositions","commitParticles","Color","fontMeshGeometry","createFontMesh","char","font","textAlign","textBaseline","fillText","mat","side","rotateX","MOVEMENT_KEY_MESHES","PlayerRenderer","mesh","Mesh","PlaneBufferGeometry","MeshBasicMaterial","depthWrite","DoubleSide","lerp2","droopPos","_ref2","keyMesh","isBuildCandidate","uiState","remove","TileMesh","_Mesh","materialMapping","TileRenderer","inventoryRenderer","originalColor","lastAudioValueTracker","pairsLines","growingRenderer","zIndex","scale","matrixAutoUpdate","updateMatrix","Audio","audioListener","lightAmount","colorIndex","AIR_COLORSCALE","startColorIndex","startColor","endColor","update","newAudioValueTracker","setBuffer","dist","distanceToSquared","volume","setVolume","play","baseVolume","stop","pairColor","getHex","pairs","line","arrowDir","Vector3","normalize","arrowHelper","makeLine","hasActiveNeighbors","lines","ArrowHelper","origin","Line","lineGeometry","LineBasicMaterial","copy","quaternion","axis","radians","acos","setFromAxisAngle","Float32BufferAttribute","materials","TransportRenderer","_TileRenderer","arrow","makeArrow","SceneObject","_React$PureComponent","object","TILE_HIGHLIGHT","edgesGeometry","lineSegments","TileHighlight","tileHighlight_Animate","setScalar","sceneObject_SceneObject","Animate","rafid","Instructions","toFixed","renderCredit","href","rel","GameStack","handlePlay","gameState","style","background","display","alignItems","justifyContent","fontSize","Instructions_Instructions","HoveredTileInfo","tileInfo","inventoryInfo","cellInfo","growingCellInfo","rootInfo","leafInfo","airInfo","fountainInfo","energyInfo","waterInfo","sugarInfo","HUD","isMaxed","isMaxedEl","isTutorialFinished","renderFruitUI","renderAllBuildButtons","renderSecondEls","renderDPad","renderInventoryBar","renderInventory","renderUIState","renderAutoplacePopup","preventDefault","getElementsByTagName","focus","text","onTryActionKey","ensureCanvasFocus","autoplace","fontWeight","textDecoration","renderButton","waterPercent","sugarPercent","emptyPercent","waterStyles","sugarStyles","emptyStyles","buttons","renderBuildButton","F","els","split","mouseX","top","mouseY","ParamsGUI","gui","dat","closed","onChange","setTimeout","reload","f","addFolder","__controllers","onFinishChange","Hover","hoveredTile","HoveredTileInfo_HoveredTileInfo","maybeRenderHoveredTileHighlight","maybeRenderPath","tileHighlight","_this$props$mito","Mito","expansionTiles","indexOf","Hover_PathHighlight","walkable","PathHighlight","_ISketch","Scene","camera","OrthographicCamera","renderers","tutorialRef","mouse","raycaster","firstActionTakenYet","keyMap","Set","getTileAtScreenPosition","clientX","clientY","setAction","handleClick","tryAction","delete","delta","deltaX","deltaY","newZoom","zoom","updateProjectionMatrix","resetUIState","buildAction","expandingTileHighlight","HUD_HUD","isFinished","GameStack_GameStack","ParamsGUI_ParamsGUI","Hover_Hover","originalZoom","numDone","oneMoreLoaded","oncanplaythrough","loader","audioBuffer","xhr","loaded","total","hookUpAudio","lookAt","updateAmbientAudio","created","createRendererFor","yPos","drumVolume","stringsVolume","info","memory","geometries","textures","calls","points","triangles","yes","no","traverse","log","stats","checkWinLoss","deletedEntities","cameraNorm","getCameraNormCoordinates","setFromCamera","_this$raycaster$ray$o","ray","ix","iy","getAction","moveAction","keysToMovement","worldStepAndDeleteOldRenderers","getOrCreateRenderer","mouseNorm","h","aspect","bottom","singleMove","enterUIStateExpanding","setActions","originalFn","Object3D","updateMatrixWorld","App","react_default","fullPageSketch_FullPageSketch","Boolean","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAGaA,EAAY,CACrBC,OAAO,EACPC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,OAAO,EACPC,SAAS,EACTC,UAAU,EACVC,OAAO,GAQWC,EAAtB,WAYI,SAAAA,EAAmBC,EAAsCC,GAAmCC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAK,KAAAJ,WAAAI,KAAAH,eAAAG,KATrFC,cASoF,EAAAD,KARpFE,YAQoF,EAAAF,KAJpFG,YAAc,EAIsEH,KAFpFI,WAAa,EAVxB,OAAAN,OAAAO,EAAA,EAAAP,CAAAH,EAAA,EAAAW,IAAA,cAAAC,IAAA,WAkBQ,OAAOP,KAAKJ,SAASY,WAAWC,OAAST,KAAKJ,SAASY,WAAWE,QAlB1E,CAAAJ,IAAA,aAAAC,IAAA,WAsBQ,OAAO,IAAII,IAAcX,KAAKJ,SAASY,WAAWE,MAAOV,KAAKJ,SAASY,WAAWC,UAtB1F,CAAAH,IAAA,SAAAC,IAAA,WA0BQ,OAAOP,KAAKJ,SAASY,eA1B7Bb,EAAA,GAAsBA,EACXiB,cCIAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EACAC,UCCLC,cAGF,SAAAA,EAAYC,GAAoC,IAAAC,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,IAC5CE,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAsB,GAAAK,KAAAzB,KAAMqB,KAHFK,aAEwC,EAAAJ,EADxCK,cAAgB,EACwBL,EA4ExCM,KAAO,SAACC,GACZ,IAAMC,EAAgBD,EAAYP,EAAKK,cACvCL,EAAKK,cAAgBE,EACrBP,EAAKD,MAAMU,OAAO3B,aAClBkB,EAAKD,MAAMU,OAAO5B,YAAc0B,EAChC,IACIP,EAAKD,MAAMU,OAAOC,QAAQF,GAC5B,MAAOG,GACLC,QAAQC,MAAMF,GAIlBX,EAAKc,SAAS,CACVhC,WAAYkB,EAAKD,MAAMU,OAAO3B,aAElCkB,EAAKI,QAAUW,sBAAsBf,EAAKM,OA3FEN,EA8FxCgB,mBAAqB,WAAM,IACvB1C,EAAa0B,EAAKD,MAAMU,OAAxBnC,SACR0B,EAAKiB,kCAAkC3C,GACP,MAA5B0B,EAAKD,MAAMU,OAAOS,QAClBlB,EAAKD,MAAMU,OAAOS,OAAO5C,EAASY,WAAWE,MAAOd,EAASY,WAAWC,SAhG5Ea,EAAKmB,MAAQ,CACTrC,WAAYiB,EAAMU,OAAO3B,YAHekB,mFAO5B,IAAAoB,EAAA1C,KAChBA,KAAKuC,kCAAkCvC,KAAKqB,MAAMU,OAAOnC,UACzD+C,OAAOC,iBAAiB,SAAU5C,KAAKsC,oBAGvC,IAAMO,EAAS7C,KAAKqB,MAAMU,OAAOnC,SAASY,WAC1CqC,EAAOC,SAAW,EACjBhD,OAAOiD,KAAKlE,GAA6CmE,QAAQ,SAACC,GAC/D,GAAgC,MAA5BP,EAAKrB,MAAMU,OAAO7B,OAAgB,CAClC,IAAMgD,EAAWR,EAAKrB,MAAMU,OAAO7B,OAAO+C,GAC1B,MAAZC,IACIR,EAAKrB,MAAM8B,aACXC,SAASC,KAAKT,iBAAiBK,EAAWC,GAE1CL,EAAOD,iBAAiBK,EAAWC,OAWnDlD,KAAKqB,MAAMU,OAAOuB,OAClBtD,KAAK0B,QAAUW,sBAAsBrC,KAAK4B,uCAI1C,IAAM2B,EAA8C,GAOpD,OANgC,MAA5BvD,KAAKqB,MAAMU,OAAOyB,QAClBD,EAAsBE,KAAKzD,KAAKqB,MAAMU,OAAOyB,UAEf,MAA9BxD,KAAKqB,MAAMU,OAAO9B,UAClBsD,EAAsBE,KAAtBC,MAAAH,EAAqBzD,OAAA6D,EAAA,EAAA7D,CAASE,KAAKqB,MAAMU,OAAO9B,WAGhD2D,EAAA,qBAAKC,UAAU,mBACVN,EAAsBO,IAAI,SAACC,EAAIC,GAAL,OAAaC,eAAmBF,EAAI,CAAEzD,IAAK0D,sDAK3D,IAAAE,EAAAlE,KACfA,KAAKqB,MAAMU,OAAOoC,SAClBnE,KAAKqB,MAAMU,OAAOoC,UAEF,MAAhBnE,KAAK0B,SACL0C,qBAAqBpE,KAAK0B,SAE9B1B,KAAKqB,MAAMU,OAAOnC,SAASyE,UAC3B1B,OAAO2B,oBAAoB,SAAUtE,KAAKsC,oBAE1C,IAAMO,EAAS7C,KAAKqB,MAAMU,OAAOc,OAChC/C,OAAOiD,KAAKlE,GAA6CmE,QAAQ,SAACC,GAC/D,GAAgC,MAA5BiB,EAAK7C,MAAMU,OAAO7B,OAAgB,CAClC,IAAMgD,EAAWgB,EAAK7C,MAAMU,OAAO7B,OAAO+C,GAC1B,MAAZC,IACIgB,EAAK7C,MAAM8B,aACXC,SAASC,KAAKiB,oBAAoBrB,EAAWC,GAE7CL,EAAOyB,oBAAoBrB,EAAWC,iEAiChBtD,GACtC,IAAM2E,EAAS3E,EAASY,WAAWgE,cACrB,MAAVD,GACA3E,EAAS6E,QAAQF,EAAOG,YAAaH,EAAOI,qBA5GnBV,aAsHxBW,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAjF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4E,GAAA,QAAAI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAjF,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA8E,EAAAhF,OAAA0B,EAAA,EAAA1B,CAAA8E,IAAAnD,KAAAiC,MAAAoB,EAAA,CAAA9E,MAAAsF,OAAAH,MACW1C,MAA+B,CAClC8C,OAAQ,CAAEC,KAAM,WAChBC,cAAeC,KAAKC,MAAMhD,OAAOiD,aAAaC,QAAQ,yBAA2B,SAHzFd,EAOYlF,kBAPZ,EAAAkF,EAQYe,gBARZ,EAAAf,EAUYgB,mBAAqB,SAACC,GAC1B,GAAW,MAAPA,EACA,IAGI,IAAMC,EAAgDtD,OAAeuD,cAAiBvD,OAAewD,mBAC/FtG,EAAekF,EAAKlF,aAAe,IAAIoG,EAC5CtF,IAA2ByF,WAAWvG,GACvCkF,EAAKe,WAAajG,EAAawG,aAC/BtB,EAAKe,WAAWQ,KAAKC,eAAe,GAAK,GACzCxB,EAAKe,WAAWU,QAAQ3G,EAAa4G,cACZ5G,EAAayG,KAAOzG,EAAawG,cACzCG,QAAQzB,EAAKe,YAC9B1C,SAASR,iBAAiB,mBAAoBmC,EAAK2B,wBAEnD,IAAM9G,EAAW,IAAIe,IAAoB,CAAEgG,OAAO,EAAMC,uBAAuB,EAAMC,WAAW,IAChGb,EAAIc,YAAYlH,EAASY,YAEzB,IAAMuB,EAAS,IAAKgD,EAAK1D,MAAM0F,YAAanH,EAAUmF,EAAKlF,cAC3DkF,EAAK3C,SAAS,CAACmD,OAAQ,CAAEC,KAAM,UAAWzD,OAAQA,KACpD,MAAOE,GACL8C,EAAK3C,SAAS,CAAEmD,OAAQ,CAAEC,KAAM,QAASrD,MAAOF,KAChDC,QAAQC,MAAMF,QAGlBmB,SAASkB,oBAAoB,mBAAoBS,EAAK2B,wBAC7B,MAArB3B,EAAKlF,cACLkF,EAAKlF,aAAamH,SArClCjC,EA6FYkC,wBAA0B,WAC9B,IAAMxB,GAAiBV,EAAKtC,MAAMgD,cAClCV,EAAK3C,SAAS,CAAEqD,kBAChB9C,OAAOiD,aAAasB,QAAQ,uBAAwBxB,KAAKyB,UAAU1B,KAhG3EV,EAmGY2B,uBAAyB,WACJ,MAArB3B,EAAKlF,eACDuD,SAASgE,OACTrC,EAAKlF,aAAawH,UACXtC,EAAKtC,MAAMgD,eAClBV,EAAKlF,aAAayH,WAxGlCvC,EAAA,OAAAjF,OAAAyH,EAAA,EAAAzH,CAAA8E,EAAAC,GAAA/E,OAAAO,EAAA,EAAAP,CAAA8E,EAAA,EAAAtE,IAAA,SAAAkH,MAAA,WA2C+B,MAAnBxH,KAAK8F,YAA2C,MAArB9F,KAAKH,eAE5BG,KAAKyC,MAAMgD,eAA6C,cAA5BzF,KAAKH,aAAa4C,MAC9CzC,KAAKH,aAAayH,SACVtH,KAAKyC,MAAMgD,eAA6C,YAA5BzF,KAAKH,aAAa4C,OACtDzC,KAAKH,aAAawH,WANd,IAAAI,EAU+BzH,KAAKqB,MAAxBqG,GAVZD,EAUJV,YAVIjH,OAAA6H,EAAA,EAAA7H,CAAA2H,EAAA,kBAWN5D,EAAY+D,IAAW,mBAAoB5H,KAAKyC,MAAM8C,OAAOC,MACnE,OACI5B,EAAA,oBAAA9D,OAAA+H,OAAA,GAASH,EAAT,CAAyB9G,GAAIZ,KAAKqB,MAAM0F,YAAYnG,GAAIiD,UAAWA,EAAWmC,IAAKhG,KAAK+F,qBACnF/F,KAAK8H,uBACL9H,KAAK+H,wBAzDtB,CAAAzH,IAAA,uBAAAkH,MAAA,WA8DmC,IACnBjC,EAAWvF,KAAKyC,MAAhB8C,OACR,MAAoB,YAAhBA,EAAOC,KAEA5B,EAAA,cAACoE,EAAD,CAAwB1H,IAAKN,KAAKqB,MAAM0F,YAAYnG,GAAImB,OAAQwD,EAAOxD,OAAQoB,aAAcnD,KAAKqB,MAAM8B,eACxF,UAAhBoC,EAAOC,KACOxF,KAAKqB,MAAM4G,cAAgBjI,KAAKkI,0BAA0B3C,EAAOpD,MAAMgG,SAErE,YAAhB5C,EAAOC,KACP,UADJ,IAtEf,CAAAlF,IAAA,4BAAAkH,MAAA,SA2EsCW,GAC9B,OACIvE,EAAA,mBAAGC,UAAU,gBAAb,sFAEID,EAAA,yBAAMuE,MA/EtB,CAAA7H,IAAA,qBAAAkH,MAAA,WAoFiC,IACjB/B,EAAkBzF,KAAKyC,MAAvBgD,cACR,OACI7B,EAAA,wBAAQC,UAAU,cAAcuE,QAASpI,KAAKiH,yBACxCxB,EAAgB7B,EAAA,cAACyE,EAAA,EAAD,MAAiBzE,EAAA,cAACyE,EAAA,EAAD,WAxFnDzD,EAAA,CAAqCX,aC/IxBqE,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAxD,EAAAxD,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAsI,GAAA,QAAAtD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/D,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA8E,EAAAhF,OAAA0B,EAAA,EAAA1B,CAAAwI,IAAA7G,KAAAiC,MAAAoB,EAAA,CAAA9E,MAAAsF,OAAAH,MAWYqD,aAAe,SAACC,GACT,MAAPA,GAGAnH,EAAKoH,kBAfjBpH,EAAA,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAwI,EAAAC,GAAAzI,OAAAO,EAAA,EAAAP,CAAAwI,EAAA,EAAAhI,IAAA,SAAAkH,MAAA,WACoB,IACJmB,EAAY3I,KAAKqB,MAAjBsH,QACFC,IAAuBjD,gBAAMhD,OAAOkG,SAASC,QAAQC,iBACrDC,EAAUpB,IAAW,mBAAoB,CAAEqB,oBAAqBL,EAAoBM,aAAcP,IACxG,OACI/E,EAAA,qBAAKC,UAAWmF,EAAShD,IAAKhG,KAAKwI,cAC/B5E,EAAA,cAACuF,EAAD,CAAiBpC,YAAa/G,KAAKqB,MAAM0F,iBAPzD,CAAAzG,IAAA,iBAAAkH,MAAA,WAqBYpE,SAASgG,qBACThG,SAASgG,uBACFhG,SAASiG,qBAChBjG,SAASiG,0BAxBrBf,EAAA,CAAoCrE,aCT7B,SAASH,EAAIwF,EAAWC,EAAgBC,EAAeC,EAAgBC,GAC1E,OALG,SAAcC,EAAWC,EAAWN,GACvC,OAAOK,GAAKC,EAAID,GAAKL,EAIdO,CAAKJ,EAAQC,GAAQJ,EAAIC,IAAWC,EAAQD,IHAvD,SAASO,EAAcC,EAAmBvE,GACtC,IAAMwE,EAAS5G,SAAS6G,cAAc,UAGtC,OAFAD,EAAOE,IAAP,iBAAA5E,OAA8ByE,EAA9B,KAAAzE,OAA2CE,GAC3CwE,EAAOxE,KAAP,SAAAF,OAAuBE,GAChBwE,EAEX,SAASG,EAAqBC,EAAyBL,GACnD,IAAMM,EAAQjH,SAAS6G,cAAc,SACrCI,EAAMC,UAAW,EACjBD,EAAMzI,MAAO,EACbyI,EAAMvD,YAAYgD,EAAcC,EAAW,QAC3CM,EAAMvD,YAAYgD,EAAcC,EAAW,QAC3CM,EAAMvD,YAAYgD,EAAcC,EAAW,QAC3C,IAAMC,EAASI,EAAIG,yBAAyBF,GACtC/D,EAAO8D,EAAI/D,aAEjB,OADA2D,EAAOxD,QAAQF,GACR,CAAC+D,QAAO/D,4BIfnB,SAASkE,EAAMlB,GACX,OAAOmB,KAAKC,MAAU,KAAJpB,GAAY,KAO3B,IAAMqB,EAAb,WACI,SAAAA,EACWC,EACAC,GAGT,IAFSC,EAET7F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAFyB,EAChB+F,EACT/F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GADyB,EACzBnF,OAAAC,EAAA,EAAAD,CAAAE,KAAA2K,GAAA3K,KAAA4K,WAAA5K,KAAA6K,UAAA7K,KAAA8K,QAAA9K,KAAAgL,QAAAhL,KAqEME,YArEN,EACEF,KAAKiL,WAPb,OAAAnL,OAAAO,EAAA,EAAAP,CAAA6K,EAAA,EAAArK,IAAA,OAAAkH,MAAA,SA6CgB0D,EAAkBC,EAAqBC,GAC/C,GAAIF,IAAUlL,KACV,MAAM,IAAIqL,MAAM,0BAOpB,IAAIP,EAAQL,KAAKa,IAAIH,EAAanL,KAAK8K,OACnCE,EAAQP,KAAKa,IAAIF,EAAapL,KAAKgL,OACjCO,EAAcf,EAAMM,EAAQE,GAC5BQ,EAAiBN,EAAMO,QAe7B,OAdIF,EAAcC,IAGdV,EAAQL,KAAKiB,MAAMZ,EAAQS,EAAcC,GACzCR,EAAQP,KAAKiB,MAAMV,EAAQO,EAAcC,IAE7CxL,KAAK2L,QAAQb,GAAQE,GACrBE,EAAMS,OAAOb,EAAOE,GAChBhL,KAAKE,QACLF,KAAKE,OAAO0L,KAAK,OAAQV,EAAOJ,EAAOE,GAEvCE,EAAMhL,QACNgL,EAAMhL,OAAO0L,KAAK,MAAO5L,KAAM8K,EAAOE,GAEnC,CAACF,QAAOE,WAxEvB,CAAA1K,IAAA,KAAAkH,MAAA,SA4EcqE,EAAsBC,GAC5B9L,KAAKE,OAASF,KAAKE,QAAU,IAAI6L,eACjC/L,KAAKE,OAAO8L,GAAGH,EAAMC,KA9E7B,CAAAxL,IAAA,MAAAkH,MAAA,SAiFesD,EAAeE,GACtB,IAAMO,EAAcf,EAAMM,EAAQE,GAC5BQ,EAAiBxL,KAAKyL,QACxBF,EAAcC,IAEdV,EAAQA,EAAQS,EAAcC,EAC9BR,EAAQA,EAAQO,EAAcC,GAElCxL,KAAK2L,OAAOb,EAAOE,KAzF3B,CAAA1K,IAAA,SAAAkH,MAAA,SA4FmBsD,EAAeE,GAC1B,IAAMiB,EAAWzB,EAAMxK,KAAK8K,MAAQA,GAC9BoB,EAAW1B,EAAMxK,KAAKgL,MAAQA,GACpChL,KAAKiL,SAASgB,EAAUC,GACxBlM,KAAK8K,MAAQmB,EACbjM,KAAKgL,MAAQkB,EAGTlM,KAAK8K,MAAQ,IAAK9K,KAAK8K,MAAQ,GAC/B9K,KAAKgL,MAAQ,IAAKhL,KAAKgL,MAAQ,GAC/BhL,KAAK8K,MAAQ9K,KAAKgL,MAAQhL,KAAK4K,WAC3B5K,KAAK8K,MAAQ9K,KAAKgL,MAClBhL,KAAK8K,MAAQ9K,KAAK4K,SAAW5K,KAAKgL,MAElChL,KAAKgL,MAAQhL,KAAK4K,SAAW5K,KAAK8K,SA1GlD,CAAAxK,IAAA,QAAAkH,MAAA,WAiHQ,OAAOgD,EAD4BxK,KAA3B4K,SAA2B5K,KAAjB8K,MAAiB9K,KAAVgL,SAhHjC,CAAA1K,IAAA,WAAAkH,MAAA,WAoHqE,IAAxDsD,EAAwD7F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAxCjF,KAAK8K,MAAOE,EAA4B/F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAZjF,KAAKgL,MAC9CJ,EAAa5K,KAAb4K,SACJE,EAAQ,GACR5I,QAAQiK,KAAR,cAAA7G,OAA2BwF,IAG3BE,EAAQ,GACR9I,QAAQiK,KAAR,cAAA7G,OAA2B0F,IAG3BF,EAAQE,EAAQJ,GAChB1I,QAAQiK,KAAR,kBAAA7G,OAA+BwF,EAA/B,aAAAxF,OAAgD0F,EAAhD,OAAA1F,OAA2DsF,EAA3D,aA/HZD,EAAA,GAyIO,SAASyB,EAAgBC,GAC5B,OAAc,MAAPA,GAAiBA,EAAYC,qBAAqB3B,ECtJtD,IAAM4B,EAAa,CACtBC,GAAI,IAAIC,KAAS,GAAI,GACrBC,EAAI,IAAID,KAAS,EAAI,GACrBE,GAAI,IAAIF,KAAS,EAAG,GACpBG,EAAI,IAAIH,IAAS,GAAI,GAErBI,EAAI,IAAIJ,IAAS,EAAG,GACpBK,GAAI,IAAIL,IAAQ,GAAK,GACrBxK,EAAI,IAAIwK,IAAQ,EAAK,GACrBM,GAAI,IAAIN,IAAQ,EAAI,IAMXO,EADkBlN,OAAOiD,KAAKwJ,GACgBzI,IAAI,SAACmJ,GAAD,OAAOV,EAAWU,2BCE3EC,aACF,SAAAA,EAAmB5D,EAAkB6D,EAAkBC,GAAYtN,OAAAC,EAAA,EAAAD,CAAAE,KAAAkN,GAAAlN,KAAAsJ,IAAAtJ,KAAAmN,IAAAnN,KAAAoN,qDAE9D9D,EAAW6D,GACZ,OAAOnN,KAAKsJ,EAAIA,EAAItJ,KAAKmN,EAAIA,+BAG5B7D,EAAW6D,EAAWC,GACvB,OAAOpN,KAAKsJ,EAAIA,EAAItJ,KAAKmN,EAAIA,EAAInN,KAAKoN,EAAIA,WAI5CC,EAAQ,CAAC,IAAIH,EAAK,EAAG,EAAG,GAAI,IAAIA,GAAM,EAAG,EAAG,GAAI,IAAIA,EAAK,GAAI,EAAG,GAAI,IAAIA,GAAM,GAAI,EAAG,GAC3F,IAAIA,EAAK,EAAG,EAAG,GAAI,IAAIA,GAAM,EAAG,EAAG,GAAI,IAAIA,EAAK,EAAG,GAAI,GAAI,IAAIA,GAAM,EAAG,GAAI,GAC5E,IAAIA,EAAK,EAAG,EAAG,GAAI,IAAIA,EAAK,GAAI,EAAG,GAAI,IAAIA,EAAK,EAAG,GAAI,GAAI,IAAIA,EAAK,GAAI,GAAI,IAEtEI,EAAI,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,GAC9B,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,EAAG,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,GAAI,GAC/F,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAC7F,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAC3F,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAC5F,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IACzF,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAC1F,EAAG,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAC9F,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,EAC1F,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IACzF,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAC1F,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,EAAG,IAAK,IACxF,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,KASrFC,EAAK,IAAO9C,KAAK+C,KAAK,GAAK,GAC3BC,GAAM,EAAIhD,KAAK+C,KAAK,IAAM,EAG1BE,EAAK,EAAI,EAEFC,EAAb,WAuCI,SAAAA,IAAuD,IAA3CC,EAA2C3I,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAZ,WAAhBwF,KAAKoD,SAAuB/N,OAAAC,EAAA,EAAAD,CAAAE,KAAA2N,GAAA3N,KArChD8N,KAAO,IAAI1I,MAAM,KAqC+BpF,KApChD+N,MAAQ,IAAI3I,MAAM,KAoC8BpF,KAlChDgO,UAAY,EAkCoChO,KAjChDiO,cAAgB,GAiCgCjO,KA/BhDkO,cAAgB,CACL,EAAdzD,KAAK0D,IAAI,GAAuB,GAAd1D,KAAK2D,IAAI,GACb,EAAd3D,KAAK2D,IAAI,GAAuB,EAAd3D,KAAK0D,IAAI,IA8B3BnO,KAAK4N,KAAKA,GAxClB,OAAA9N,OAAAO,EAAA,EAAAP,CAAA6N,EAAA,EAAArN,IAAA,OAAAkH,MAAA,SAegBoG,GACJA,EAAO,GAAKA,EAAO,IAEnBA,GAAQ,QAGZA,EAAOnD,KAAKiB,MAAMkC,IACP,MACPA,GAAQA,GAAQ,GAGpB,IAAK,IAAIS,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIC,OAAC,EAEDA,EADI,EAAJD,EACIf,EAAEe,GAAa,IAAPT,EAERN,EAAEe,GAAOT,GAAQ,EAAK,IAG9B5N,KAAK8N,KAAKO,GAAKrO,KAAK8N,KAAKO,EAAI,KAAOC,EACpCtO,KAAK+N,MAAMM,GAAKrO,KAAK+N,MAAMM,EAAI,KAAOhB,EAAMiB,EAAI,SAnC5DxO,OAAAO,EAAA,EAAAP,CAAA6N,EAAA,EAAArN,IAAA,WAAAkH,MAAA,SA4CoB+G,EAAaC,GACzB,IAUIC,EAAIC,EARF7B,GAAK0B,EAAMC,GAAOjB,EACpBc,EAAI5D,KAAKiB,MAAM6C,EAAM1B,GACrB8B,EAAIlE,KAAKiB,MAAM8C,EAAM3B,GACnB+B,GAAKP,EAAIM,GAAKlB,EAChBoB,EAAKN,EAAMF,EAAIO,EACfE,EAAKN,EAAMG,EAAIC,EAIfC,EAAKC,GACLL,EAAK,EAAGC,EAAK,IAEbD,EAAK,EAAGC,EAAK,GAKjB,IAAMK,EAAKF,EAAKJ,EAAKhB,EACfuB,EAAKF,EAAKJ,EAAKjB,EACfwB,EAAKJ,EAAK,EAAI,EAAIpB,EAClByB,EAAKJ,EAAK,EAAI,EAAIrB,EAExBY,GAAK,IACLM,GAAK,IACL,IAAMQ,EAAMnP,KAAK+N,MAAMM,EAAIrO,KAAK8N,KAAKa,IAC/BS,EAAMpP,KAAK+N,MAAMM,EAAII,EAAKzO,KAAK8N,KAAKa,EAAID,IACxCW,EAAMrP,KAAK+N,MAAMM,EAAI,EAAIrO,KAAK8N,KAAKa,EAAI,IAEzCW,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAO1BS,EAAK,GAAMR,EAAKA,EAAKC,EAAKA,EAO1BQ,EAAK,GAAMP,EAAKA,EAAKC,EAAKA,EAS9B,OAAO,KAtBHI,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAIM,KAAKZ,EAAIC,KAG5BS,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAIK,KAAKV,EAAIC,KAG5BQ,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAII,KAAKR,EAAIC,OA9FxC,CAAA5O,IAAA,iBAAAkH,MAAA,SAqG0B+G,EAAaC,GAK/B,IAL4G,IAAhER,EAAgE/I,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAApDjF,KAAKgO,UAAWC,EAAoChJ,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAApBjF,KAAKiO,cACzFyB,EAAM,EACNpG,EAAIiF,EACJpB,EAAIqB,EACJmB,EAAS,EACJtB,EAAI,EAAGA,EAAIL,EAAWK,IAAK,CAChCqB,GAAO1P,KAAK4P,SAAStG,EAAG6D,GAAKwC,EAC7B,IAAME,EAAOvG,EAAItJ,KAAKkO,cAAc,GAAKf,EAAInN,KAAKkO,cAAc,GAC1D4B,EAAOxG,EAAItJ,KAAKkO,cAAc,GAAKf,EAAInN,KAAKkO,cAAc,GAChE5E,EAAIuG,EACJ1C,EAAI2C,EACJH,GAAU1B,EAEd,OAAOyB,IAlHf,CAAApP,IAAA,WAAAkH,MAAA,SAsHoB+G,EAAaC,EAAauB,GACtC,IAeItB,EAAIC,EAAIsB,EACRC,EAAIC,EAAIC,EAbNtD,GAAK0B,EAAMC,EAAMuB,IA7HpB,EAAI,GA8HH1B,EAAI5D,KAAKiB,MAAM6C,EAAM1B,GACrB8B,EAAIlE,KAAKiB,MAAM8C,EAAM3B,GACrBuD,EAAI3F,KAAKiB,MAAMqE,EAAMlD,GAEnB+B,GAAKP,EAAIM,EAAIyB,GAAK1C,EAClBmB,EAAKN,EAAMF,EAAIO,EACfE,EAAKN,EAAMG,EAAIC,EACfyB,EAAKN,EAAMK,EAAIxB,EAMjBC,GAAMC,EACFA,GAAMuB,GAAM5B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GACpDtB,GAAMwB,GAAM5B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAC3D1B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAEhDrB,EAAKuB,GAAM5B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GACnDtB,EAAKwB,GAAM5B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAC1D1B,EAAK,EAAGC,EAAK,EAAGsB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAMxD,IAAMpB,EAAKF,EAAKJ,EAAKf,EACfsB,EAAKF,EAAKJ,EAAKhB,EACf4C,EAAKD,EAAKL,EAAKtC,EAEjBuB,EAAKJ,EAAKoB,EAAK,EAAIvC,EACnBwB,EAAKJ,EAAKoB,EAAK,EAAIxC,EACnB6C,EAAKF,EAAKF,EAAK,EAAIzC,EAEnB8C,EAAK3B,EAAK,EAAI,GACd4B,EAAK3B,EAAK,EAAI,GACd4B,EAAKL,EAAK,EAAI,GAGlBhC,GAAK,IACLM,GAAK,IACLyB,GAAK,IA9C8C,IA+C3CrC,EAAgB/N,KAAhB+N,MAAOD,EAAS9N,KAAT8N,KACXqB,EAAMpB,EAAMM,EAAIP,EAAKa,EAAIb,EAAKsC,KAC9BhB,EAAMrB,EAAMM,EAAII,EAAKX,EAAKa,EAAID,EAAKZ,EAAKsC,EAAIJ,KAC5CX,EAAMtB,EAAMM,EAAI4B,EAAKnC,EAAKa,EAAIuB,EAAKpC,EAAKsC,EAAID,KAC5CQ,EAAM5C,EAAMM,EAAI,EAAIP,EAAKa,EAAI,EAAIb,EAAKsC,EAAI,KAG1Cd,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKuB,EAAKA,EAOpCd,EAAK,GAAMR,EAAKA,EAAKC,EAAKA,EAAKsB,EAAKA,EAOpCd,EAAK,GAAMP,EAAKA,EAAKC,EAAKA,EAAKqB,EAAKA,EAOpCK,EAAK,GAAMJ,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EASxC,OAAO,KA7BHpB,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAI0B,KAAKhC,EAAIC,EAAIuB,KAGhCd,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAIyB,KAAK9B,EAAIC,EAAIsB,KAGhCd,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKH,EAAIwB,KAAK5B,EAAIC,EAAIqB,KAGhCK,EAAK,EACA,GAELA,GAAMA,GACIA,EAAKD,EAAIE,KAAKL,EAAIC,EAAIC,OAtM5C,CAAApQ,IAAA,iBAAAkH,MAAA,SA8M0B+G,EAAaC,EAAauB,GAM5C,IANyH,IAAhE/B,EAAgE/I,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAApDjF,KAAKgO,UAAWC,EAAoChJ,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAApBjF,KAAKiO,cACtGyB,EAAM,EACNpG,EAAIiF,EACJpB,EAAIqB,EACJpB,EAAI2C,EACJJ,EAAS,EACJtB,EAAI,EAAGA,EAAIL,EAAWK,IAC3BqB,GAAO1P,KAAK8Q,SAASxH,EAAG6D,EAAGC,GAAKuC,EAChCrG,GAAK,EACL6D,GAAK,EACLC,GAAK,EACLuC,GAAU1B,EAEd,OAAOyB,IA3Nf,CAAApP,IAAA,OAAAkH,MAAA,SAiOgBoH,GACR,OAAOA,EAAIA,EAAIA,GAAKA,GAAS,EAAJA,EAAQ,IAAM,MAlO/C,CAAAtO,IAAA,OAAAkH,MAAA,SAqOgBmC,EAAWC,EAAWgF,GAC9B,OAAQ,EAAIA,GAAKjF,EAAIiF,EAAIhF,IAtOjC,CAAAtJ,IAAA,UAAAkH,MAAA,SA0OmB8B,EAAW6D,GAEtB,IAAI4D,EAAItG,KAAKiB,MAAMpC,GAAI0H,EAAIvG,KAAKiB,MAAMyB,GAEtC7D,GAAQyH,EAAG5D,GAAQ6D,EAEnBD,GAAQ,IAAKC,GAAQ,IANY,IAQzBjD,EAAgB/N,KAAhB+N,MAAOD,EAAS9N,KAAT8N,KAEXmD,EAAMlD,EAAMgD,EAAIjD,EAAKkD,IAAIvB,KAAKnG,EAAG6D,GACjC+D,EAAMnD,EAAMgD,EAAIjD,EAAKkD,EAAI,IAAIvB,KAAKnG,EAAG6D,EAAI,GACzCgE,EAAMpD,EAAMgD,EAAI,EAAIjD,EAAKkD,IAAIvB,KAAKnG,EAAI,EAAG6D,GACzCiE,EAAMrD,EAAMgD,EAAI,EAAIjD,EAAKkD,EAAI,IAAIvB,KAAKnG,EAAI,EAAG6D,EAAI,GAGjDkE,EAAIrR,KAAKsR,KAAKhI,GAGlB,OAAOtJ,KAAK6J,KACR7J,KAAK6J,KAAKoH,EAAKE,EAAKE,GACpBrR,KAAK6J,KAAKqH,EAAKE,EAAKC,GACpBrR,KAAKsR,KAAKnE,MAhQtB,CAAA7M,IAAA,UAAAkH,MAAA,SAoQmB8B,EAAW6D,EAAWC,GAAW,IACpCW,EAAgB/N,KAAhB+N,MAAOD,EAAS9N,KAAT8N,KAEXiD,EAAItG,KAAKiB,MAAMpC,GAAI0H,EAAIvG,KAAKiB,MAAMyB,GAAIoE,EAAI9G,KAAKiB,MAAM0B,GAEzD9D,GAAQyH,EAAG5D,GAAQ6D,EAAG5D,GAAQmE,EAK9B,IAAIC,EAAOzD,GAHXgD,GAAQ,KAGajD,GAHRkD,GAAQ,KAGSlD,EAHJyD,GAAQ,OAGMV,KAAKvH,EAAG6D,EAAGC,GAC/CqE,EAAO1D,EAAMgD,EAAIjD,EAAKkD,EAAIlD,EAAKyD,EAAI,KAAKV,KAAKvH,EAAG6D,EAAGC,EAAI,GACvDsE,EAAO3D,EAAMgD,EAAIjD,EAAKkD,EAAI,EAAIlD,EAAKyD,KAAKV,KAAKvH,EAAG6D,EAAI,EAAGC,GACvDuE,EAAO5D,EAAMgD,EAAIjD,EAAKkD,EAAI,EAAIlD,EAAKyD,EAAI,KAAKV,KAAKvH,EAAG6D,EAAI,EAAGC,EAAI,GAC/DwE,EAAO7D,EAAMgD,EAAI,EAAIjD,EAAKkD,EAAIlD,EAAKyD,KAAKV,KAAKvH,EAAI,EAAG6D,EAAGC,GACvDyE,EAAO9D,EAAMgD,EAAI,EAAIjD,EAAKkD,EAAIlD,EAAKyD,EAAI,KAAKV,KAAKvH,EAAI,EAAG6D,EAAGC,EAAI,GAC/D0E,EAAO/D,EAAMgD,EAAI,EAAIjD,EAAKkD,EAAI,EAAIlD,EAAKyD,KAAKV,KAAKvH,EAAI,EAAG6D,EAAI,EAAGC,GAC/D2E,EAAOhE,EAAMgD,EAAI,EAAIjD,EAAKkD,EAAI,EAAIlD,EAAKyD,EAAI,KAAKV,KAAKvH,EAAI,EAAG6D,EAAI,EAAGC,EAAI,GAGvEiE,EAAIrR,KAAKsR,KAAKhI,GACdgF,EAAItO,KAAKsR,KAAKnE,GACdT,EAAI1M,KAAKsR,KAAKlE,GAGlB,OAAOpN,KAAK6J,KACR7J,KAAK6J,KACD7J,KAAK6J,KAAK2H,EAAMI,EAAMP,GACtBrR,KAAK6J,KAAK4H,EAAMI,EAAMR,GAAI3E,GAC9B1M,KAAK6J,KACD7J,KAAK6J,KAAK6H,EAAMI,EAAMT,GACtBrR,KAAK6J,KAAK8H,EAAMI,EAAMV,GAAI3E,GAC9B4B,OApSZX,EAAA,WC5DMqE,EAAiB,CACnBC,YAAY,EACZC,YAAa,YACbC,cAAe,IACfC,wBAAyB,GACzBC,qBAAsB,GACtBC,iBAAkB,KAClBC,qBAAsB,EACtBC,mBAAoB,EACpBC,mBAAoB,EACpBC,mBAAoB,EACpBC,iBAAkB,GAClBC,kBAAmB,WACnBC,mBAAoB,KACpBC,cAAe,GACfC,aAAc,GACdC,MAAO,IACPC,sBAAuB,GACvBC,uBAAwB,IACxBC,sBAAuB,EACvBC,uBAAwB,IACxBC,kBAAmB,EACnBC,aAAc,KAKLC,EAAMzT,OAAA0T,EAAA,EAAA1T,CAAA,GAAQkS,GAE3B,GAAIrP,OAAOkG,SAAS4K,KAAKvO,OAAS,EAAG,CACjC,IAAMwO,GAAwBhO,KAAKC,MAAMgO,UAAUhR,OAAOkG,SAAS4K,KAAKG,OAAO,KAC/E9T,OAAO+H,OAAO0L,EAAQG,IAGnB,SAASG,KAGZ,IAFA,IAAMC,EAAoC,GAE1CC,EAAA,EAAAC,EADalU,OAAOiD,KAAKiP,GACzB+B,EAAAC,EAAA9O,OAAA6O,IAAwB,CAAnB,IAAMzT,EAAG0T,EAAAD,GACJ3D,EAAImD,EAAOjT,GACb8P,IAAM4B,EAAe1R,KACrBwT,EAAiBxT,GAAO8P,GAG5BtQ,OAAOiD,KAAK+Q,GAAkB5O,OAAS,EACvCvC,OAAOkG,SAAS4K,KAAOQ,UAAUvO,KAAKyB,UAAU2M,IAEhDnR,OAAOkG,SAAS4K,KAAO,GCjCxB,SAASS,GAAajS,GACzB,MAAoC,kBAArBA,EAAUkS,ODmC7BN,KChCO,IAAeO,GAAtB,WAkBI,SAAAA,EAAmBC,EAAqBC,GAEpC,GAFmDxU,OAAAC,EAAA,EAAAD,CAAAE,KAAAoU,GAAApU,KAAAsU,QAAAtU,KAfhDuU,YAAa,EAekCvU,KAd/CwU,SAAWC,IAcoCzU,KAD/CqU,SAC+C,EAClDrU,KAAKqU,IAAMA,EAAIK,QACF,MAATJ,EACA,MAAM,IAAIjJ,MAAM,eArB5B,OAAAvL,OAAAO,EAAA,EAAAP,CAAAsU,EAAA,EAAA9T,IAAA,iBAAAC,IAAA,WAMQ,OAAQP,KAAK2U,YAAoBC,iBANzC,CAAAtU,IAAA,iBAAAC,IAAA,WAUQ,OAAQP,KAAK2U,YAAoBE,iBAVzC,CAAAvU,IAAA,aAAAC,IAAA,WAcQ,OAAQP,KAAK2U,YAAoBG,eAdzChV,OAAAO,EAAA,EAAAP,CAAAsU,EAAA,EAAA9T,IAAA,cAAAkH,MAAA,WA0BQ,OAAOiD,KAAK+C,KAAK/C,KAAKa,IAAIb,KAAKsK,IAAIjR,EAAI,EAAI9D,KAAKwU,SAAU,EAAG,EAAG,EAAG,GAAI,GAAI,MA1BnF,CAAAlU,IAAA,OAAAkH,MAAA,WA+BQ,IAAMwN,EAAYhV,KAAKsU,MAAMW,cAAcjV,KAAKqU,KAChDrU,KAAKkV,aAAaF,GAClBhV,KAAKmV,cAAcH,GACnBhV,KAAKoV,gBAlCb,CAAA9U,IAAA,eAAAkH,MAAA,SAqCiBwN,GACT,GAAIhV,gBAAgBqV,GAChBrV,KAAKwU,SAAW,MACb,CACH,IAAIc,EAActV,KAAKwU,SADpBe,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAEH,QAAA2K,EAAAC,EAAoBX,EAApBY,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA+B,KAAAS,EAAAN,EAAAlO,MAAjBoH,EAAiB9O,OAAAmW,EAAA,EAAAnW,CAAAkW,EAAA,MACrBE,EAAUzL,KAAKsK,IAAI,GAAKjR,EAAI9D,KAAKqU,IAAIlH,EAAG1M,GAAS,EAAGA,GAAQ8S,EAAOZ,iBAAkB,IACrFwD,EAAuBvH,aAAawH,GAAO3B,IAAW7F,EAAE4F,SAAW0B,EAErEZ,EADA1G,aAAayG,GACC,EAEA5K,KAAKa,IAAIgK,EAAaa,IARzC,MAAAE,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAWHzV,KAAKwU,SAAWc,EAChB,IAAMiB,EAAwD,MAA7CvW,KAAKsU,MAAMkC,OAAOxW,KAAKqU,IAAI/K,EAAGtJ,KAAKqU,IAAIlH,GACpDoJ,GACArU,QAAQC,MAAM,0DAA2DoU,MAtDzF,CAAAjW,IAAA,gBAAAkH,MAAA,SA2DkBwN,GACV,GAAI5I,EAAapM,MAAO,KAAAyW,GAAA,EAAAC,GAAA,EAAAC,OAAA5L,EAAA,IACpB,QAAA6L,EAAAC,EAA0B7B,EAA1BY,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAAqC,KAAAK,EAAAF,EAAApP,MAAAuP,EAAAjX,OAAAmW,EAAA,EAAAnW,CAAAgX,EAAA,GAAzBE,EAAyBD,EAAA,GAApBE,EAAoBF,EAAA,GAC5B/W,KAAKkX,WAAWF,EAAKC,KAIC,MAAvBjX,KAAK4U,gBACDqC,EAAK3K,UAAUxB,MAAQ9K,KAAKsM,UAAUxB,OACtC9K,KAAKmX,aAAaF,GAGC,MAAvBjX,KAAK6U,gBACDoC,EAAK3K,UAAUtB,MAAQhL,KAAKsM,UAAUtB,OACtChL,KAAKoX,aAAaH,KAbV,MAAAZ,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,OA5DhC,CAAArW,IAAA,aAAAkH,MAAA,SAgFe6P,EAAeJ,GACtB,OAAOK,GAAiBtX,KAAMiX,KAjFtC,CAAA3W,IAAA,eAAAkH,MAAA,SAoFiB+P,GACT,GAAInL,EAAapM,MACb,GAAiC,eAA7BuT,EAAOX,kBAAoC,CAC3C,IAAM4E,GAAmBD,EAAMjL,UAAUxB,MAAQ9K,KAAKsM,UAAUxB,OAAS9K,KAAK4U,eAC9E2C,EAAMjL,UAAUmL,KAAKzX,KAAKsM,UAAWkL,EAAiB,OACnD,CACH,IAAME,EAAYH,EAAMjL,UAAUxB,MAAQ9K,KAAKsM,UAAUxB,MACnD6M,EAAuBlN,KAAKa,IAAIoM,EAAW,GAC7CjN,KAAKoD,SAAW6J,EAAY1X,KAAK4U,eAAiB+C,GAClDJ,EAAMjL,UAAUmL,KAAKzX,KAAKsM,UAAW,EAAG,MA7F5D,CAAAhM,IAAA,eAAAkH,MAAA,SAmGiB+P,GACT,GAAInL,EAAapM,MAAO,CACpB,IAAMwX,GAAmBD,EAAMjL,UAAUtB,MAAQhL,KAAKsM,UAAUtB,OAAShL,KAAK6U,eAC9E0C,EAAMjL,UAAUmL,KAAKzX,KAAKsM,UAAW,EAAGkL,MAtGpD,CAAAlX,IAAA,cAAAkH,MAAA,WA2GQ,IAAMsN,EAAa9U,KAAK8U,WAClB8C,EAAgB5X,KAAKsU,MAAMuD,OAAO7X,KAAKqU,IAAI/K,EAAGtJ,KAAKqU,IAAIlH,EAAI,GAC7D2H,EAAa,GAAK9U,KAAKsU,MAAMwD,KAAOrN,KAAKiB,MAAM,EAAIoJ,GAAc,GAC7D1I,EAAawL,IAAkBN,GAAiBM,EAAe5X,OAC/DA,KAAKsM,UAAUmL,KAAKG,EAActL,UAAW,EAAG,OA/GhE8H,EAAA,GA8HA,SAASkD,GAAiBS,EAAeR,GACrC,OAAOnL,EAAa2L,IAAa3L,EAAamL,KAGzCQ,aAAoBR,EAAM5C,aAAe4C,aAAiBQ,EAASpD,aAGnEoD,aAAoB1C,IAAQkC,aAAiBlC,IAXtD,SAAmB0C,EAAeC,EAAgCT,EAAYU,GAC1E,OAAOF,aAAoBC,GAAgBT,aAAiBU,EAaxDC,CAAUH,EAAUI,GAAMZ,EAAOa,KAxInBhE,GACXiE,YAAc,OADHjE,GAEXU,WAAa,EA2IxB,IAAMwD,GAAW,IAAI3K,EACRyK,GAAb,SAAAG,GAOI,SAAAH,EAA0B/D,EAAcC,GAAc,IAAAhT,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoY,IAClD9W,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAsY,GAAA3W,KAAAzB,KAAMqU,EAAKC,KADuCD,MAAA/S,EAH/CkX,eAAyB,EAGsBlX,EAF/CmX,UAE+C,EAAAnX,EAD/CgL,UAAY,IAAI3B,EAAU,GAAd7K,OAAA4Y,EAAA,EAAA5Y,CAAAwB,IAGfA,EAAKkT,SAAW,EAChBlT,EAAKmX,KAAOnX,EAAKqX,aAHiCrX,EAP1D,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAsY,EAAAG,GAAAzY,OAAAO,EAAA,EAAAP,CAAAsY,EAAA,EAAA9X,IAAA,aAAAkH,MAAA,WAcQ,IAAMoR,EAAO9U,EAAI9D,KAAKqU,IAAIlH,EAAG1M,GAAS,EAAG,EAAGT,KAAKsU,MAAMpC,YAAY2G,SAAU,MACvEC,EAAShV,EAAI9D,KAAKqU,IAAIlH,EAAG1M,GAAS,EAAG,EAAG,EAAG,GAE3CqX,EAAqB,MAAd9X,KAAKsU,MAAgB,EAAItU,KAAKsU,MAAMwD,KAC3CiB,EAAmH,IAA1GT,GAASU,QAAQ,QAAUhZ,KAAKqU,IAAI/K,EAAI5I,GAAQ,GAAKoY,EAAQ,KAAO9Y,KAAKqU,IAAIlH,EAAI,EAAG2K,EAAO,IAAO,MAEjH,OAAOrN,KAAKsK,IAAItK,KAAKa,IAAIsN,EAAOG,EAAQ,GAAItO,KAAKa,IAAI,GAAuC,IAAlCtL,KAAKsU,MAAMpC,YAAY2G,aApBzF,CAAAvY,IAAA,cAAAkH,MAAA,WAwBQ,OAAOxH,KAAKiZ,aAxBpB,CAAA3Y,IAAA,OAAAkH,MAAA,WA4BQxH,KAAKoV,cACLpV,KAAKmV,cAAcnV,KAAKsU,MAAMW,cAAcjV,KAAKqU,MACjDrU,KAAKyY,KAAOzY,KAAK2Y,eA9BzB,CAAArY,IAAA,aAAAkH,MAAA,SAiCewP,EAAcC,GACrB,OAAOD,IAAQzK,EAAWM,GACtBmK,IAAQzK,EAAWI,IACnBqK,IAAQzK,EAAWQ,IAFhBjN,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAsY,EAAAe,WAAA,aAAAnZ,MAAAyB,KAAAzB,KAGcgX,EAAKC,KArClC,CAAA3W,IAAA,MAAAkH,MAAA,WAyCQ,OAAOxH,KAAKyY,OAzCpB,CAAAnY,IAAA,WAAAkH,MAAA,WA6CQ,OAAOxH,KAAKwY,mBA7CpBJ,EAAA,CAAyBhE,IAAZgE,GACFC,YAAc,MADZD,GAEFtD,WAAa,EAFXsD,GAGFxD,eAAiB,GA8CrB,IAAMuD,GAAb,SAAAiB,GASI,SAAAjB,EAAY9D,GAA+C,IAAA3R,EAAjCoI,EAAiC7F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAjB,EAAGqP,EAAcrP,UAAAC,OAAA,EAAAD,UAAA,QAAA8F,EAAA,OAAAjL,OAAAC,EAAA,EAAAD,CAAAE,KAAAmY,IACvDzV,EAAA5C,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAqY,GAAA1W,KAAAzB,KAAMqU,EAAKC,KAPRhI,UAAY,IAAI3B,EAAU4I,EAAOR,aAArBjT,OAAA4Y,EAAA,EAAA5Y,CAAA4C,IAQfA,EAAK4J,UAAU+M,IAAIvO,EAAO,GAF6BpI,EAT/D,OAAA5C,OAAAyH,EAAA,EAAAzH,CAAAqY,EAAAiB,GAAAtZ,OAAAO,EAAA,EAAAP,CAAAqY,EAAA,EAAA7X,IAAA,aAAAC,IAAA,WAMQ,OAAOP,KAAKsU,MAAMpC,YAAYoH,wBANtCxZ,OAAAO,EAAA,EAAAP,CAAAqY,EAAA,EAAA7X,IAAA,OAAAkH,MAAA,WAeQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAqY,EAAAgB,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACAA,KAAKuZ,oBAhBb,CAAAjZ,IAAA,kBAAAkH,MAAA,WAmBsB,IAAAgS,EACiCxZ,KAAKsU,MAAMpC,YAAlDuH,EADMD,EACNC,gBAAiBC,EADXF,EACWE,kBACnBC,EAA0B7V,EAAI9D,KAAKqU,IAAIlH,EAAG1M,GAAS,EAAGA,GAASiZ,EAAmB,EAAG,GACrFE,EAA0B5Z,KAAKsM,UAAUxB,MAC3CL,KAAKoD,SAAW4L,EAAkBE,EAA0BC,GAC5D5Z,KAAKsM,UAAU+M,KAAK,EAAG,OAxBnClB,EAAA,CAA0B/D,IAAb+D,GACFE,YAAc,OADZF,GAEFvD,eAAiBrB,EAAOV,mBA2B5B,IAAMuD,GAAb,SAAAyD,GAAA,SAAAzD,IAAA,IAAAtR,EAAAZ,EAAApE,OAAAC,EAAA,EAAAD,CAAAE,KAAAoW,GAAA,QAAApR,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAnB,EAAApE,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA8E,EAAAhF,OAAA0B,EAAA,EAAA1B,CAAAsW,IAAA3U,KAAAiC,MAAAoB,EAAA,CAAA9E,MAAAsF,OAAAH,MACIoP,YAAa,EADjBrQ,EAAA,OAAApE,OAAAyH,EAAA,EAAAzH,CAAAsW,EAAAyD,GAAAzD,EAAA,CAA0BhC,IAAbgC,GAEFiC,YAAc,OAGlB,IAAMyB,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAha,OAAAC,EAAA,EAAAD,CAAAE,KAAA8Z,GAAAha,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAga,GAAApW,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAAga,EAAAC,GAAAD,EAAA,CAA8B1F,IAAjB0F,GACFzB,YAAc,YAGlB,IAAM2B,GAAb,SAAAC,GAII,SAAAD,EAAY3F,GAA6E,IAAAtP,EAA/D+F,EAA+D7F,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAA/C,EAAGqP,EAA4CrP,UAAAC,OAAA,EAAAD,UAAA,QAAA8F,EAAvBmP,EAAuBjV,UAAAC,OAAA,EAAAD,UAAA,QAAA8F,EAAA,OAAAjL,OAAAC,EAAA,EAAAD,CAAAE,KAAAga,IACrFjV,EAAAjF,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAka,GAAAvY,KAAAzB,KAAMqU,EAAKvJ,EAAOwJ,KADmE4F,gBAAAnV,EAFzFwP,YAAa,EAE4ExP,EADjFoV,SAAW,EACsEpV,EAJ7F,OAAAjF,OAAAyH,EAAA,EAAAzH,CAAAka,EAAAC,GAAAna,OAAAO,EAAA,EAAAP,CAAAka,EAAA,EAAA1Z,IAAA,OAAAkH,MAAA,WAQQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAka,EAAAb,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACIA,KAAKma,SAAW,GAChBna,KAAKma,WAELna,KAAKsM,UAAUb,QAAU,GAAKzL,KAAKma,UAAY,IAE/Cna,KAAKsM,UAAU+M,IAAI,EAAG,GACtBrZ,KAAKma,SAAWna,KAAKka,mBAfjCF,EAAA,CAA8B7B,IAAjB6B,GACF3B,YAAc,WAmBlB,IAAMhD,GAAb,SAAA+E,GAAA,SAAA/E,IAAA,IAAAgF,EAAAC,EAAAxa,OAAAC,EAAA,EAAAD,CAAAE,KAAAqV,GAAA,QAAAkF,EAAAtV,UAAAC,OAAAC,EAAA,IAAAC,MAAAmV,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAArV,EAAAqV,GAAAvV,UAAAuV,GAAA,OAAAF,EAAAxa,OAAAyB,EAAA,EAAAzB,CAAAE,MAAAqa,EAAAva,OAAA0B,EAAA,EAAA1B,CAAAuV,IAAA5T,KAAAiC,MAAA2W,EAAA,CAAAra,MAAAsF,OAAAH,MAKWgP,OAAiBZ,EAAOpB,cALnCmI,EAMW9F,SAAW,EANtB8F,EAaWG,OAAS,EAbpBH,EAAA,OAAAxa,OAAAyH,EAAA,EAAAzH,CAAAuV,EAAA+E,GAAAta,OAAAO,EAAA,EAAAP,CAAAuV,EAAA,EAAA/U,IAAA,OAAAkH,MAAA,WAuCQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAuV,EAAA8D,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACAA,KAAKmU,QAAU,EACf,IAAMc,EAAgBjV,KAAKsU,MAAMW,cAAcjV,KAAKqU,KAC9CW,EAAY5P,MAAMsV,KAAKzF,EAAc0F,UACrCC,EAAgB,GAAAtV,OAAAxF,OAAA6D,EAAA,EAAA7D,CAAQkV,GAAR,CAAmBhV,OAG/B6a,GAAA,EAAAC,GAAA,EAAAC,OAAAhQ,EAAA,IACN,QAAAiQ,EAAAC,EAAmBL,EAAnBhF,OAAAC,cAAAgF,GAAAG,EAAAC,EAAAnF,QAAAC,MAAA8E,GAAA,EAAqC,KAA1B5D,EAA0B+D,EAAAxT,MACjC,GAAI4E,EAAa6K,MAAWA,aAAgBiE,IAAQ,CAChD,KAAIlb,KAAKmU,OAASZ,EAAOpB,eAarB,MAZA,IAAMgJ,EAAe5H,EAAOpB,cAAgBnS,KAAKmU,OAC3CiH,EAAc3Q,KAAKa,IACrB6P,EAAe5H,EAAOpB,cACtB8E,EAAK3K,UAAUtB,OAEnBiM,EAAK3K,UAAU+M,IAAI,GAAI+B,GACvB,IAAMC,EAAYD,EAAc7H,EAAOpB,cACvCnS,KAAKmU,QAAUkH,IAXrB,MAAAhF,GAAAyE,GAAA,EAAAC,EAAA1E,EAAA,YAAAwE,GAAA,MAAAI,EAAA3E,QAAA2E,EAAA3E,SAAA,WAAAwE,EAAA,MAAAC,GAoBN,GAAI/a,KAAKmU,OAASZ,EAAOpB,cAAe,CACpC,IAAMmJ,EAAqBV,EAAiBW,OAAO,SAAC3M,GAAD,OAAOsF,GAAUtF,KADhC4M,GAAA,EAAAC,GAAA,EAAAC,OAAA3Q,EAAA,IAEpC,QAAA4Q,EAAAC,EAAuBN,EAAvB1F,OAAAC,cAAA2F,GAAAG,EAAAC,EAAA9F,QAAAC,MAAAyF,GAAA,EAA2C,KAAhCK,EAAgCF,EAAAnU,MACvC,KAAIxH,KAAKmU,OAASZ,EAAOpB,eAsBrB,MArBA,IAAI2J,EAAiB,EAGrB,GAAID,EAAS1H,OAASnU,KAAKmU,OAAQ,CAM/B,GAJA2H,EAAiBrR,KAAKiB,MAAwC,KAAjCmQ,EAAS1H,OAASnU,KAAKmU,SAIhD0H,EAAS1H,OAAS2H,EAAiB,EACnC,MAAM,IAAIzQ,MAAM,4DAEpB,GAAIrL,KAAKmU,OAAS2H,EAAiBvI,EAAOpB,cACtC,MAAM,IAAI9G,MAAM,8DAGpBrL,KAAKmU,QAAU2H,EACfD,EAAS1H,QAAU2H,IArBK,MAAAzF,GAAAoF,GAAA,EAAAC,EAAArF,EAAA,YAAAmF,GAAA,MAAAI,EAAAtF,QAAAsF,EAAAtF,SAAA,WAAAmF,EAAA,MAAAC,IAgC5C1b,KAAK+b,UAAU9G,GACXjV,KAAKya,OAAS,KAEVza,KAAKsU,MAAM0H,OAAO3H,IAAI4H,OAAOjc,KAAKqU,OAClCrU,KAAKsU,MAAM0H,OAAO3H,IAAIlH,GAAK,GAE/BnN,KAAKsU,MAAM4H,kBAAkBlc,KAAKqU,KAC9BrU,KAAKqU,IAAIlH,EAAI1M,GAAS,IACtBT,KAAKqU,IAAIlH,GAAK,GAElBnN,KAAKya,QAAU,EAEfza,KAAKsU,MAAM6H,UAAUnc,KAAKqU,IAAKrU,OAG/BA,KAAKmU,QAAU,GAEfnU,KAAKsU,MAAM6H,UAAUnc,KAAKqU,IAAK,IAAIyF,GAAS9Z,KAAKqU,IAAKrU,KAAKsU,UAnHvE,CAAAhU,IAAA,YAAAkH,MAAA,SAoJcyN,GACN,IAAMmH,EAAQnH,EAAc1U,IAAIgM,EAAWM,GACrCwP,EAAYpH,EAAc1U,IAAIgM,EAAWI,IACzC2P,EAAarH,EAAc1U,IAAIgM,EAAWQ,IAE1CwP,EAAOtH,EAAc1U,IAAIgM,EAAWG,GACpC8P,EAAQvH,EAAc1U,IAAIgM,EAAWtK,GAErCwa,EAAQxH,EAAc1U,IAAIgM,EAAWK,GACrC8P,EAAYzH,EAAc1U,IAAIgM,EAAWC,IACzCmQ,EAAa1H,EAAc1U,IAAIgM,EAAWO,IAEhD9M,KAAKya,QAAUlH,EAAOP,MAClBhT,KAAKmU,OAASZ,EAAOpB,cAAgB,IACrCnS,KAAKya,QAAUlH,EAAOP,OAI1B,IADA,IAAI4J,GAAkB,EACtB7I,EAAA,EAAA8I,EAAmB,CAACT,EAAOC,EAAWC,GAAtCvI,EAAA8I,EAAA3X,OAAA6O,IAAmD,CAA9C,IAAM+I,EAAID,EAAA9I,GACX,GAAI+I,aAAgB1G,IAAQ0G,aAAgB3E,GAExC,YADAnY,KAAKya,OAAShQ,KAAKa,IAAItL,KAAKya,OAAQ,IAEjC,GAAIqC,aAAgBzH,EAGvB,OAFArV,KAAKya,OAAShQ,KAAKa,IAAItL,KAAKya,OAAQqC,EAAKrC,aACzCmC,GAAkB,GAK1B,IAAMG,EAAsB,CAACL,EAAWD,EAAOE,EAAYJ,EAAMC,EAAOxc,MAAMub,OAAO,SAAC3O,GAAD,OAAOA,aAAayI,IAGpGuH,GAAkD,IAA/BG,EAAoB7X,OAGxClF,KAAKya,OAASsC,EAAoBC,OAAO,SAACtN,EAAK9C,GAAN,OAAY8C,EAAM9C,EAAE6N,QAAQ,GAAKsC,EAAoB7X,OAF9FlF,KAAKya,QAAU,MArL3BpF,EAAA,CAA0BjB,IAAbiB,GACFgD,YAAc,OADZhD,GAEFT,eAAiBrB,EAAOd,mBAFtB4C,GAGFR,eAAiBtB,EAAOb,mBAHtB2C,GAIF4H,aAAe1J,EAAOf,mBAwL1B,IAAM0K,GAAb,SAAAC,GAII,SAAAD,EAAY7I,EAAcC,EAAqB8I,GAAqB,IAAAC,EAAA,OAAAvd,OAAAC,EAAA,EAAAD,CAAAE,KAAAkd,IAChEG,EAAAvd,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAod,GAAAzb,KAAAzB,KAAMqU,EAAKC,KADqD8I,gBAAAC,EAH7D9I,YAAa,EAGgD8I,EAF7DC,mBAE6D,EAAAD,EAD7DE,iBAC6D,EAEhEF,EAAKC,cAAgBD,EAAKE,YAAeH,EAAczI,YAAoBsI,cAAgB,EAF3BI,EAJxE,OAAAvd,OAAAyH,EAAA,EAAAzH,CAAAod,EAAAC,GAAArd,OAAAO,EAAA,EAAAP,CAAAod,EAAA,EAAA5c,IAAA,OAAAkH,MAAA,WASQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAod,EAAA/D,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACAA,KAAKsd,gBACDtd,KAAKsd,eAAiB,GACtBtd,KAAKsU,MAAM6H,UAAUnc,KAAKod,cAAc/I,IAAKrU,KAAKod,mBAZ9DF,EAAA,CAAiC7H,IAiBpBmI,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAA7d,OAAAC,EAAA,EAAAD,CAAAE,KAAAwd,GAAA,QAAAI,EAAA3Y,UAAAC,OAAAC,EAAA,IAAAC,MAAAwY,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA1Y,EAAA0Y,GAAA5Y,UAAA4Y,GAAA,OAAAF,EAAA7d,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA0d,EAAA5d,OAAA0B,EAAA,EAAA1B,CAAA0d,IAAA/b,KAAAiC,MAAAga,EAAA,CAAA1d,MAAAsF,OAAAH,MAEWmH,UAAY,IAAI3B,EAAU4I,EAAOnB,wBAArBtS,OAAA4Y,EAAA,EAAA5Y,CAAA6d,IAFvBA,EAAA,OAAA7d,OAAAyH,EAAA,EAAAzH,CAAA0d,EAAAC,GAAAD,EAAA,CAA4BnI,IAAfmI,GACFnF,YAAc,SAYlB,IAAMyF,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAne,OAAAC,EAAA,EAAAD,CAAAE,KAAA8d,GAAA,QAAAI,EAAAjZ,UAAAC,OAAAC,EAAA,IAAAC,MAAA8Y,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAhZ,EAAAgZ,GAAAlZ,UAAAkZ,GAAA,OAAAF,EAAAne,OAAAyB,EAAA,EAAAzB,CAAAE,MAAAge,EAAAle,OAAA0B,EAAA,EAAA1B,CAAAge,IAAArc,KAAAiC,MAAAsa,EAAA,CAAAhe,MAAAsF,OAAAH,MAEWoP,YAAa,EAFxB0J,EAGWG,kBAAoB,EAH/BH,EAIWI,aAAe,EAJ1BJ,EAKWK,YAAa,EALxBL,EAMWM,eAAiB,EAN5BN,EAOWO,UAAuB,GAPlCP,EAAA,OAAAne,OAAAyH,EAAA,EAAAzH,CAAAge,EAAAC,GAAAje,OAAAO,EAAA,EAAAP,CAAAge,EAAA,EAAAxd,IAAA,OAAAkH,MAAA,WAUQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAge,EAAA3E,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACAA,KAAKse,YAAa,EAClB,IAAMtJ,EAAYhV,KAAKsU,MAAMW,cAAcjV,KAAKqU,KAChDrU,KAAKoe,kBAAoB,EACzBpe,KAAKqe,aAAe,EACpBre,KAAKue,eAAiB,EACtB,IAAIE,EAAS,EACbze,KAAKwe,UAAY,GARP,IAAAE,GAAA,EAAAC,GAAA,EAAAC,OAAA7T,EAAA,IAUV,QAAA8T,EAAAC,EAA0B9J,EAA1BY,OAAAC,cAAA6I,GAAAG,EAAAC,EAAAhJ,QAAAC,MAAA2I,GAAA,EAAqC,KAAAK,EAAAF,EAAArX,MAAAwX,EAAAlf,OAAAmW,EAAA,EAAAnW,CAAAif,EAAA,GAAzB/H,EAAyBgI,EAAA,GAApB/H,EAAoB+H,EAAA,GAC3BC,EAAejf,KAAKsU,MAAMuD,OAAO7X,KAAKqU,IAAI/K,EAAI0N,EAAI1N,EAAGtJ,KAAKqU,IAAIlH,EAAI6J,EAAI7J,GAC5E,GAAI8J,aAAgBmB,IAChB6G,aAAwBzB,GAAQ,CAChCiB,GAAU,EACVze,KAAKwe,UAAU/a,KAAKuT,GACpB,IAAMkI,EAAMjI,EACNkI,EAASF,EAGTG,EAAQF,EAAIjG,WAGZoG,EAAaH,EAAII,MAEvBtf,KAAKoe,mBAAqBiB,EAC1Brf,KAAKqe,cAAgBe,EAQrB,IAAMG,EAAsBhM,EAAOhB,qBAAuB8M,EACpDG,EAAiB/U,KAAKa,IAAI6T,EAAO7S,UAAUxB,MAAOyU,GAClDE,EAASL,EAAQ7L,EAAOjB,iBAAmBkN,EAAiBD,EAClE,GAAI9U,KAAKoD,SAAW4R,EAAQ,CACxBzf,KAAKse,YAAa,EAClB,IAAMC,EAAiBiB,EAAiBH,EACxCF,EAAO7S,UAAU+M,KAAKmG,EAAgBjB,GACtCve,KAAKue,gBAAkBA,KAzCzB,MAAAlI,GAAAsI,GAAA,EAAAC,EAAAvI,EAAA,YAAAqI,GAAA,MAAAI,EAAAxI,QAAAwI,EAAAxI,SAAA,WAAAqI,EAAA,MAAAC,GA8CNH,EAAS,IACTze,KAAKoe,mBAAqBK,OAxDtCX,EAAA,CAA0BzI,IAAbyI,GACFzF,YAAc,OA6DlB,IAAMqH,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAA/f,OAAAC,EAAA,EAAAD,CAAAE,KAAA0f,GAAA,QAAAI,EAAA7a,UAAAC,OAAAC,EAAA,IAAAC,MAAA0a,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA5a,EAAA4a,GAAA9a,UAAA8a,GAAA,OAAAF,EAAA/f,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA4f,EAAA9f,OAAA0B,EAAA,EAAA1B,CAAA4f,IAAAje,KAAAiC,MAAAkc,EAAA,CAAA5f,MAAAsF,OAAAH,MAEW6a,oBAAsB,EAFjCH,EAIWI,gBAA6B,GAJxCJ,EAKWvT,UAAuB,IAAI3B,EAAU,GAAd7K,OAAA4Y,EAAA,EAAA5Y,CAAA+f,IALlCA,EAMI1F,SAAW,EANf0F,EAAA,OAAA/f,OAAAyH,EAAA,EAAAzH,CAAA4f,EAAAC,GAAA7f,OAAAO,EAAA,EAAAP,CAAA4f,EAAA,EAAApf,IAAA,OAAAkH,MAAA,WASQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAA4f,EAAAvG,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACIA,KAAKma,UAAY,IACjBna,KAAKkgB,oBACLlgB,KAAKma,UAAY5G,EAAOlB,sBAE5BrS,KAAKma,UAAY,IAdzB,CAAA7Z,IAAA,oBAAAkH,MAAA,WAkBQxH,KAAKggB,oBAAsB,EAE3BhgB,KAAKigB,gBAAkB,GACvB,IAAMjL,EAAYhV,KAAKsU,MAAMW,cAAcjV,KAAKqU,KAJxB8L,GAAA,EAAAC,GAAA,EAAAC,OAAAtV,EAAA,IAKxB,QAAAuV,EAAAC,EAA0BvL,EAA1BY,OAAAC,cAAAsK,GAAAG,EAAAC,EAAAzK,QAAAC,MAAAoK,GAAA,EAAqC,KAAAK,EAAAF,EAAA9Y,MAAAiZ,EAAA3gB,OAAAmW,EAAA,EAAAnW,CAAA0gB,EAAA,GAAzBxJ,EAAyByJ,EAAA,GAApBxJ,EAAoBwJ,EAAA,GAEjC,GAAIxJ,aAAgBkB,GACwB,CAWxCnY,KAAKigB,gBAAgBxc,KAAKuT,GAXc,IAYjClM,EAASmM,EAAK3K,UAAUmL,KAAKzX,KAAKsM,UAAW,EAAG,GAAhDxB,MACP9K,KAAKggB,qBAAuBlV,EAAwB,KAAhBL,KAAKoD,WArBzB,MAAAwI,GAAA+J,GAAA,EAAAC,EAAAhK,EAAA,YAAA8J,GAAA,MAAAI,EAAAjK,QAAAiK,EAAAjK,SAAA,WAAA8J,EAAA,MAAAC,QAjBhCX,EAAA,CAA0BrK,IAAbqK,GACFrH,YAAc,OA2ClB,IAAM6C,GAAb,SAAAwF,GAAA,SAAAxF,IAAA,IAAAyF,EAAAC,EAAA9gB,OAAAC,EAAA,EAAAD,CAAAE,KAAAkb,GAAA,QAAA2F,EAAA5b,UAAAC,OAAAC,EAAA,IAAAC,MAAAyb,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAA3b,EAAA2b,GAAA7b,UAAA6b,GAAA,OAAAF,EAAA9gB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA2gB,EAAA7gB,OAAA0B,EAAA,EAAA1B,CAAAob,IAAAzZ,KAAAiC,MAAAid,EAAA,CAAA3gB,MAAAsF,OAAAH,MAEWoP,YAAa,EAFxBqM,EAIWtU,UAAY,IAAI3B,EAAUuQ,EAAM6F,WAAa,IAAjCjhB,OAAA4Y,EAAA,EAAA5Y,CAAA8gB,IAJvBA,EAAA,OAAA9gB,OAAAyH,EAAA,EAAAzH,CAAAob,EAAAwF,GAAA5gB,OAAAO,EAAA,EAAAP,CAAAob,EAAA,EAAA5a,IAAA,OAAAkH,MAAA,WAQQ1H,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAob,EAAA/B,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACA,IAAMgV,EAAYhV,KAAKsU,MAAMW,cAAcjV,KAAKqU,KAF7C2M,GAAA,EAAAC,GAAA,EAAAC,OAAAnW,EAAA,IAGH,QAAAoW,EAAAC,EAA2BpM,EAA3BY,OAAAC,cAAAmL,GAAAG,EAAAC,EAAAtL,QAAAC,MAAAiL,GAAA,EAAsC,KAAAK,EAAAF,EAAA3Z,MAAxBqU,EAAwB/b,OAAAmW,EAAA,EAAAnW,CAAAuhB,EAAA,MAC9BjV,EAAayP,IAEbA,EAASvP,UAAUmL,KAAKzX,KAAKsM,UAAW,EAAGuP,EAASvP,UAAUtB,QANnE,MAAAqL,GAAA4K,GAAA,EAAAC,EAAA7K,EAAA,YAAA2K,GAAA,MAAAI,EAAA9K,QAAA8K,EAAA9K,SAAA,WAAA2K,EAAA,MAAAC,QAPXhG,EAAA,CAA2B7F,IAAd6F,GACF7C,YAAc,QADZ6C,GAGF6F,WAAa,IAgBjB,IAAMO,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAA3hB,OAAAC,EAAA,EAAAD,CAAAE,KAAAshB,GAAA,QAAAI,EAAAzc,UAAAC,OAAAC,EAAA,IAAAC,MAAAsc,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAxc,EAAAwc,GAAA1c,UAAA0c,GAAA,OAAAF,EAAA3hB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAAwhB,EAAA1hB,OAAA0B,EAAA,EAAA1B,CAAAwhB,IAAA7f,KAAAiC,MAAA8d,EAAA,CAAAxhB,MAAAsF,OAAAH,MAEW6R,SAFX,EAAAyK,EAGWtH,SAAW,EAHtBsH,EAAA,OAAA3hB,OAAAyH,EAAA,EAAAzH,CAAAwhB,EAAAC,GAAAzhB,OAAAO,EAAA,EAAAP,CAAAwhB,EAAA,EAAAhhB,IAAA,OAAAkH,MAAA,WASQ,GAFAxH,KAAKmU,QAAU,EACfrU,OAAAoZ,EAAA,EAAApZ,QAAA0B,EAAA,EAAA1B,CAAAwhB,EAAAnI,WAAA,OAAAnZ,MAAAyB,KAAAzB,MACIA,KAAKma,UAAY,EAAG,CACpBna,KAAKma,UAAY5G,EAAOJ,sBAExB,IAAMyO,EAAa5hB,KAAK6hB,YACpBD,GACA5hB,KAAKsM,UAAUmL,KAAKmK,EAAWtV,UAAW,EAAG,GAGjD,IAAMwV,EAAW9hB,KAAK+hB,UAClBD,GACAA,EAASxV,UAAUmL,KAAKzX,KAAKsM,UAAW,EAAG,GAGnDtM,KAAKma,UAAY,IAtBzB,CAAA7Z,IAAA,YAAAkH,MAAA,WA0BQ,IAAMoa,EAAa5hB,KAAKsU,MAAMuD,OAAO7X,KAAKqU,IAAI/K,EAAItJ,KAAKgX,IAAI1N,EAAGtJ,KAAKqU,IAAIlH,EAAInN,KAAKgX,IAAI7J,GACpF,GAAIyU,aAAsBvM,IAAQjJ,EAAawV,GAC3C,OAAOA,IA5BnB,CAAAthB,IAAA,UAAAkH,MAAA,WAiCQ,IAAMsa,EAAW9hB,KAAKsU,MAAMuD,OAAO7X,KAAKqU,IAAI/K,EAAItJ,KAAKgX,IAAI1N,EAAGtJ,KAAKqU,IAAIlH,EAAInN,KAAKgX,IAAI7J,GAClF,GAAI2U,aAAoBzM,IAAQjJ,EAAa0V,GACzC,OAAOA,MAnCnBR,EAAA,CAA+B9D,IAAlB8D,GACFjJ,YAAc,YAuClB,IAAM2J,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAriB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgiB,GAAA,QAAAI,EAAAnd,UAAAC,OAAAC,EAAA,IAAAC,MAAAgd,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAld,EAAAkd,GAAApd,UAAAod,GAAA,OAAAF,EAAAriB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAAkiB,EAAApiB,OAAA0B,EAAA,EAAA1B,CAAAkiB,IAAAvgB,KAAAiC,MAAAwe,EAAA,CAAAliB,MAAAsF,OAAAH,MAKWmH,UAAY,IAAI3B,EAAU,EAAd7K,OAAA4Y,EAAA,EAAA5Y,CAAAqiB,IALvBA,EAAA,OAAAriB,OAAAyH,EAAA,EAAAzH,CAAAkiB,EAAAC,GAAAniB,OAAAO,EAAA,EAAAP,CAAAkiB,EAAA,OAAA1hB,IAAA,iBAAAC,IAAA,WAGkC,OAAOgT,EAAOT,gBAHhD,CAAAxS,IAAA,iBAAAC,IAAA,WAIkC,OAAOgT,EAAOT,kBAJhDkP,EAAA,CAA0BxE,IAAbwE,GACF3J,YAAc,OCvoBlB,IAAMiK,GAA2C,CACpD3T,EAAK,CACDnJ,KAAM,OACNwF,MAAO,EACPF,MAAO,IAEXsF,EAAK,CACD5K,KAAM,OACNwF,MAAO,GACPF,MAAO,GAEXyX,IAAK,CACD/c,KAAM,UAIDgd,GAA+C,CACxD9V,EAAG,CACClH,KAAM,OACNwR,IAAKzK,EAAWK,GAEpBjD,EAAG,CACCnE,KAAM,OACNwR,IAAKzK,EAAWG,GAEpBG,EAAG,CACCrH,KAAM,OACNwR,IAAKzK,EAAWM,GAEpB4V,EAAG,CACCjd,KAAM,OACNwR,IAAKzK,EAAWtK,GAEpBygB,EAAG,CACCld,KAAM,OACNwR,IAAKzK,EAAWC,IAEpBvK,EAAG,CACCuD,KAAM,OACNwR,IAAKzK,EAAWO,IAEpBM,EAAG,CACC5H,KAAM,OACNwR,IAAKzK,EAAWI,IAEpBgW,EAAG,CACCnd,KAAM,OACNwR,IAAKzK,EAAWQ,KAIX6V,GAAY9iB,OAAOiD,KAAKyf,IAAe1e,IAAI,SAACxD,GAAD,OAASkiB,GAAcliB,KAElEuiB,GAAsD,CAC/DxR,EAAGmM,GACHsF,EAAGhF,GACH7Q,EAAGyS,GACHpS,EAAGgU,GACHjT,EAAG6M,ICpDM6H,GAAb,WAMI,SAAAA,EAA0B1O,EAAqBC,GAAexU,OAAAC,EAAA,EAAAD,CAAAE,KAAA+iB,GAAA/iB,KAAAqU,MAAArU,KAAAsU,QAAAtU,KALvDsM,UAAY,IAAI3B,EAAU4I,EAAOD,aAActT,KAAMyK,KAAKC,MAAM6I,EAAOD,aAAe,GAAI7I,KAAKC,MAAM6I,EAAOD,aAAe,IAKrEtT,KAJrDgjB,YAIqD,EAAAhjB,KAHrDE,OAAS,IAAI6L,eAGwC/L,KAFrDijB,YAAwB,GAE6BjjB,KADtDkjB,gBACsD,EANjE,OAAApjB,OAAAO,EAAA,EAAAP,CAAAijB,EAAA,EAAAziB,IAAA,aAAAkH,MAAA,SAOsB2b,GACdnjB,KAAKijB,YAAcE,IAR3B,CAAA7iB,IAAA,YAAAkH,MAAA,SAUqBwb,GACbhjB,KAAKgjB,OAASA,EACdhjB,KAAKijB,YAAc,KAZ3B,CAAA3iB,IAAA,YAAAkH,MAAA,WAeQ,OAAOxH,KAAKgjB,SAfpB,CAAA1iB,IAAA,SAAAkH,MAAA,WAkBQ,IAAMyP,EAAOjX,KAAKsU,MAAMuD,OAAO7X,KAAKqU,IAAI/K,EAAGtJ,KAAKqU,IAAIlH,GACpD,OAAI8J,aAAgB5B,GACT4B,EAAKwD,OAEL,IAtBnB,CAAAna,IAAA,WAAAkH,MAAA,WA2BQ,IAAMiT,EAASza,KAAKya,SACpB,GAAe,IAAXA,EAAc,CACd,IAAM7L,EAAI5O,KAAKqU,IAAIK,QAEnB,OADA9F,EAAEzB,GAAKsN,EACA7L,EAEX,OAAO5O,KAAKqU,MAjCpB,CAAA/T,IAAA,cAAAkH,MAAA,WAqCQ,OAAOxH,KAAKsU,MAAMuD,OAAO7X,KAAKqU,OArCtC,CAAA/T,IAAA,KAAAkH,MAAA,SAwCc4b,EAAeC,GACrBrjB,KAAKE,OAAO8L,GAAGoX,EAAOC,KAzC9B,CAAA/iB,IAAA,OAAAkH,MAAA,WAgDQ,QAHoBuD,IAAhB/K,KAAKgjB,SACLhjB,KAAKgjB,OAAShjB,KAAKijB,YAAYK,SAAW,CAAE9d,KAAM,SAElDxF,KAAKkjB,WAAY,CACjB,IAAMK,EAAevjB,KAAKkjB,WAAWljB,KAAMA,KAAKgjB,QAChD,GAAI5d,MAAMoe,QAAQD,GAAe,KAAAE,EAAAC,EAAA5jB,OAAA6jB,EAAA,EAAA7jB,CACayjB,GAAnCK,EADsBF,EAAA,GACJG,EADIH,EAAAI,MAAA,GAE7B9jB,KAAKgjB,OAASY,GACdH,EAAAzjB,KAAKijB,aAAYc,QAAjBrgB,MAAA+f,EAAA3jB,OAAA6D,EAAA,EAAA7D,CAA4B+jB,SAE5B7jB,KAAKgjB,OADkB,MAAhBO,EACOA,EAEA,CAAE/d,KAAM,QAGLxF,KAAKgkB,cAAchkB,KAAKgjB,SAE7ChjB,KAAKE,OAAO0L,KAAK,SAAU5L,KAAKgjB,QAEpChjB,KAAKgjB,YAASjY,IAhEtB,CAAAzK,IAAA,gBAAAkH,MAAA,SAmEyBwb,GACjB,OAAQA,EAAOxd,MACX,IAAK,OAED,OAAO,EACX,IAAK,QACD,OAAOxF,KAAKikB,eAChB,IAAK,OACD,OAAOjkB,KAAKkkB,YAAYlB,GAC5B,IAAK,QACD,OAAOhjB,KAAKmkB,aAAanB,GAC7B,IAAK,kBACD,OAAOhjB,KAAKokB,sBAAsBpB,GACtC,IAAK,cACD,OAAOhjB,KAAKqkB,mBAAmBrB,GACnC,IAAK,OACD,OAAOhjB,KAAKskB,YAAYtB,GAC5B,IAAK,WACD,OAAOhjB,KAAKukB,gBAAgBvB,MArF5C,CAAA1iB,IAAA,aAAAkH,MAAA,SAwFsBwb,GACd,IAAMwB,EAASxkB,KAAKqU,IAAIK,QAAQ2E,IAAI2J,EAAOhM,KAC3C,OAAOhX,KAAKykB,WAAWD,KA1F/B,CAAAlkB,IAAA,aAAAkH,MAAA,SA6FsB6M,GAId,GAHIA,aAAeD,KACfC,EAAMA,EAAIA,MAETrU,KAAKsU,MAAMoQ,gBAAgBrQ,EAAI/K,EAAG+K,EAAIlH,GACvC,OAAO,EAEX,IAAMyU,EAAa5hB,KAAKsU,MAAMuD,OAAOxD,EAAI/K,EAAG+K,EAAIlH,GAChD,OAAMyU,aAAsBvM,IAAuB,MAAduM,IAAsBA,EAAWrN,aArG9E,CAAAjU,IAAA,mBAAAkH,MAAA,SA4G4ByP,GACpB,GAAY,MAARA,GAAiBjX,KAAKykB,WAAWxN,IAAUA,EAAK1C,WAMhD,OAAO,EAJP,IAAMwE,EAAS9B,EAAK5C,IAAIK,QAAQiQ,IAAI3kB,KAAKqU,KAEzC,OAD8E,MAArDuO,GAAUgC,KAAK,SAACC,GAAD,OAAUA,EAAK7N,IAAIiF,OAAOlD,OAhH9E,CAAAzY,IAAA,cAAAkH,MAAA,SAsHuBwb,GACf,QAAIhjB,KAAK8kB,WAAW9B,KAChBhiB,EAAUqJ,MAAM0a,YAA8B,IAAhBta,KAAKoD,SACnC7M,EAAUsF,KAAKA,KAAK0e,sBAAsB,GAC1ChkB,EAAUsF,KAAKA,KAAKkB,MAAQ,EAC5BxG,EAAUsF,KAAKA,KAAK2e,wBAAwB,EAAGjkB,EAAUsF,KAAK4e,QAAQH,YAAc,KAEpF/kB,KAAKqU,IAAIgF,IAAI2J,EAAOhM,KACpBhX,KAAKmlB,cACE,KA/HnB,CAAA7kB,IAAA,eAAAkH,MAAA,WAsIQ,OADAxH,KAAKmlB,cACE,IAtIf,CAAA7kB,IAAA,aAAAkH,MAAA,WA0IQ,IAAMsV,EAAO9c,KAAKolB,cAClB,GAAIhZ,EAAa0Q,GAAO,CACpB,IAAMuI,EAAMvI,EAAKxQ,UACjB+Y,EAAI5N,KAAKzX,KAAKsM,UAAW+Y,EAAIva,MAAOua,EAAIra,UA7IpD,CAAA1K,IAAA,yBAAAkH,MAAA,SAgJqC8d,EAAmBC,GAChDD,EAAWA,EAAS5Q,QACpB,IAAMkN,EAAa5hB,KAAKsU,MAAMuD,OAAOyN,EAAShc,EAAGgc,EAASnY,GAC1D,GAAkB,MAAdyU,IAMoB,MAApB5hB,KAAKsU,MAAMkR,OAAkBD,IAAqBrK,OAIlD0G,aAAsB1G,IAA1B,CAMA,KAD0B0G,aAAsB2D,KAAeA,IAAqBjE,IAAaM,aAAsBN,OAElHM,EAAWrN,YACZvU,KAAKsM,UAAUxB,OALD,GAMd9K,KAAKsM,UAAUtB,OALD,EAKqB,CACnChL,KAAKsM,UAAU+M,KAPD,GACA,GAOd,IAAMoM,EAAU,IAAIF,EAASD,EAAUtlB,KAAKsU,OAK5C,OAJArT,EAAMoJ,MAAM0a,YAAc,EAC1B9jB,EAAMqF,KAAKA,KAAK0e,sBAAsB,GACtC/jB,EAAMqF,KAAKA,KAAKkB,MAAQ,GACxBvG,EAAMqF,KAAKA,KAAKof,6BAA6B,KAAQzkB,EAAMqF,KAAK4e,QAAQH,YAAc,IAC/EU,MA7KnB,CAAAnlB,IAAA,eAAAkH,MAAA,SAmLwBwb,GAChB,IAAM2C,EAAe3lB,KAAKsU,MAAMkC,OAAOwM,EAAOsC,SAAShc,EAAG0Z,EAAOsC,SAASnY,GAC1E,GAAoB,MAAhBwY,GAAwBA,EAAahR,cAAgBqO,EAAOuC,SAE5D,OAAO,EAEPI,GACA3lB,KAAKqkB,mBAAmB,CAAE7e,KAAM,cAAe8f,SAAUtC,EAAOsC,SAAUM,OAAO,IAErF,IAEQ9I,EAFF+I,EAAa7lB,KAAK8lB,uBAAuB9C,EAAOsC,SAAUtC,EAAOuC,UACvE,OAAkB,MAAdM,KAGI/I,EADAkG,EAAOuC,SAAStI,aACT,IAAIC,GAAY8F,EAAOsC,SAAUtlB,KAAKsU,MAAOuR,GAE7CA,GAENpL,OAASza,KAAKya,SACnBza,KAAKsU,MAAM6H,UAAU6G,EAAOsC,SAAUxI,GAClC9c,KAAKykB,WAAW3H,IAEhB9c,KAAKkkB,YAAY,CACb1e,KAAM,OACNwR,IAAKgM,EAAOsC,SAAS5Q,QAAQiQ,IAAI3kB,KAAKqU,QAGvC,KA7MnB,CAAA/T,IAAA,wBAAAkH,MAAA,SAgPiCwb,GACzB,GAAkB,MAAdA,EAAOhM,IAEP,OADA9U,QAAQC,MAAM,WAAY6gB,IACnB,EAEUhjB,KAAKsU,MAAMkC,OAAOwM,EAAOsC,SAAShc,EAAG0Z,EAAOsC,SAASnY,IAEtEnN,KAAKqkB,mBAAmB,CAAE7e,KAAM,cAAe8f,SAAUtC,EAAOsC,SAAUM,OAAO,IAErF,IAAMG,EAAU/lB,KAAK8lB,uBAAuB9C,EAAOsC,SAAUtC,EAAOuC,UACpE,OAAe,MAAXQ,IACAA,EAAQ/O,IAAMgM,EAAOhM,IACrBhX,KAAKsU,MAAM6H,UAAU6G,EAAOsC,SAAUS,GAEtC/lB,KAAKkkB,YAAY,CACb1e,KAAM,OACNwR,IAAKgM,EAAOhM,OAET,KAlQnB,CAAA1W,IAAA,qBAAAkH,MAAA,SAuQ8Bwb,GACtB,IAAKA,EAAOsC,SAASrJ,OAAOjc,KAAKqU,MAAQ2O,EAAO4C,MAAO,CACnD,IAAMI,EAAYhmB,KAAKsU,MAAM4H,kBAAkB8G,EAAOsC,UACtD,GAAiB,MAAbU,EAAmB,CAEnB,IAAMC,EAASD,EAAU7R,OAASZ,EAAOpB,cAKzC,OAJAnS,KAAKsM,UAAU+M,IAAI4M,EAAQA,GACvB7Z,EAAa4Z,IACbA,EAAU1Z,UAAUmL,KAAKzX,KAAKsM,UAAW0Z,EAAU1Z,UAAUxB,MAAOkb,EAAU1Z,UAAUtB,QAErF,GAGf,OAAO,IApRf,CAAA1K,IAAA,cAAAkH,MAAA,SAsRuBwb,GAEf,IAAMoC,EAAcplB,KAAKolB,cACzB,GAAIhZ,EAAagZ,GAAc,KACnBta,EAAiBkY,EAAjBlY,MAAOE,EAAUgY,EAAVhY,MAMf,OAJAoa,EAAY9Y,UAAUmL,KAAKzX,KAAKsM,UAAWtB,EAAOF,GAGlD9K,KAAKsM,UAAUmL,KAAK2N,EAAY9Y,UAAWxB,EAAOE,IAC3C,EAEP,OAAO,IAlSnB,CAAA1K,IAAA,kBAAAkH,MAAA,SAsS2B0e,GACnB,IAAIC,GAAa,EAD4B5Q,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAE7C,QAAA2K,EAAAC,EAAqBuQ,EAAS/C,QAA9BvN,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAuC,KAA5ByN,EAA4BtN,EAAAlO,MACnC2e,EAAanmB,KAAKgkB,cAAchB,IAAWmD,GAHF,MAAA9P,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAK7C,OAAO0Q,MA3SfpD,EAAA,GCCaqD,GACT,SAAAA,IAAwE,IAArDC,EAAqDphB,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAjC,GAAWqhB,EAAsBrhB,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAJ,GAAInF,OAAAC,EAAA,EAAAD,CAAAE,KAAAomB,GAAApmB,KAAAqmB,UAAArmB,KAAAsmB,SAG/DC,GAAb,WAQI,SAAAA,EAAmBrU,GAA0B,IAAA5Q,EAAAtB,KAAAF,OAAAC,EAAA,EAAAD,CAAAE,KAAAumB,GAAAvmB,KAAAkS,cAAAlS,KAPtC8X,KAAe,EAOuB9X,KAN7Bgc,OAAS,IAAI+G,GAAO,IAAItW,IAAQ/L,GAAQ,EAAGD,GAAS,GAAIT,MAM3BA,KALtCwlB,WAAgBza,EAKsB/K,KAJrCwmB,qBAIqC,EAAAxmB,KAHrCymB,eAGqC,EAAAzmB,KAFrC0mB,mBAEqC,EAAA1mB,KAkNrC2mB,oBAlNqC,EAAA3mB,KAmRrC4mB,UAAuB,IAAIR,GAlR/BpmB,KAAKwmB,gBAAkB,IAAIphB,MAAM1E,IAAOmmB,UAAK9b,GAAWjH,IAAI,SAACgjB,EAAGxd,GAAJ,OAAW,IAAIlE,MAAM3E,IAAQomB,UAAK9b,GAAWjH,IAAI,SAACijB,EAAI5Z,GAC9G,IAEI8J,EAFE5C,EAAM,IAAI5H,IAAQnD,EAAG6D,GADyFoI,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAIpH,QAAA2K,EAAAC,EAA2BzD,EAAY2U,KAAvCjR,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6C,KACnC3G,GAAIoY,EAD+BtR,EAAAlO,OAClB6M,EAAK/S,GAC5B,GAAS,MAALsN,EAAW,CACXqI,EAAOrI,EACP,QAR4G,MAAAyH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAcpH,OAHY,MAARwB,IACAA,EAAO,IAAImB,GAAI/D,EAAK/S,IAEjB2V,MAIX,IAAMgQ,EAAUjnB,KAAKgc,OAAO3H,IAAI/K,EAC1B4d,EAAYlnB,KAAKwmB,gBAAgBS,GAASrC,KAAK,SAAChW,GAAD,QAASA,aAAawJ,MACvE8O,IACAlnB,KAAKgc,OAAO3H,IAAIlH,EAAI+Z,EAAU7S,IAAIlH,GAItCnN,KAAKymB,UAAY,IAAIrhB,MAAM1E,IAAOmmB,UAAK9b,GAAWjH,IAAI,SAACgjB,EAAGxd,GAAJ,OAAW,IAAIlE,MAAM3E,IAAQomB,UAAK9b,GAAWjH,IAAI,SAACijB,EAAI5Z,GACxG,IAAMkH,EAAM,IAAI5H,IAAQnD,EAAG6D,GAE3B,OAAI7L,EAAK0a,OAAO3H,IAAI8S,WAAW9S,GAJpB,KAMH/S,EAAKklB,2BAA2BpQ,KAChC9U,EAAKklB,gBAAgBld,GAAG6D,GAAK,IAAIgL,GAAK,IAAI1L,IAAQnD,EAAG6D,GAAI,EAAG7L,IAEzD,IAAIkc,GAAOnJ,EAAK/S,IAEhB,SAGftB,KAAK0mB,cAAgB,IAAIthB,MAAM1E,IAAOmmB,UAAK9b,GAAWjH,IAAI,SAACgjB,EAAGxd,GAAJ,OAAW,IAAIlE,MAAM3E,IAAQomB,UAAK9b,GAAWjH,IAAI,SAACijB,EAAI5Z,GAC5G,OAAO7L,EAAK8lB,qBAAqB9d,EAAG6D,OAExCnN,KAAKqnB,qBAlDb,OAAAvnB,OAAAO,EAAA,EAAAP,CAAAymB,EAAA,EAAAjmB,IAAA,SAAAkH,MAAA,SA2EkB8f,EAA2Bna,GACrC,IAAI7D,EASJ,GARIge,aAAmB7a,KACnBnD,EAAIge,EAAQhe,EACZ6D,EAAIma,EAAQna,IAEZ7D,EAAIge,EACJna,EAAIA,IAGHnN,KAAK0kB,gBAAgBpb,EAAG6D,GACzB,OAAO,KAEX,IAAM2P,EAAO9c,KAAKymB,UAAUnd,GAAG6D,GAC/B,OAAY,MAAR2P,EACOA,EAEA9c,KAAKwmB,gBAAgBld,GAAG6D,KA5F3C,CAAA7M,IAAA,SAAAkH,MAAA,SAgGkB8B,EAAW6D,GACrB,OAAInN,KAAK0kB,gBAAgBpb,EAAG6D,GACjBnN,KAAKymB,UAAUnd,GAAG6D,GAElB,OApGnB,CAAA7M,IAAA,oBAAAkH,MAAA,SAwG6B8B,EAAW6D,GAChC,OAAInN,KAAK0kB,gBAAgBpb,EAAG6D,GACjBnN,KAAKwmB,gBAAgBld,GAAG6D,GAExB,OA5GnB,CAAA7M,IAAA,YAAAkH,MAAA,SAmHqB8d,EAAmBrO,GAAiB,IACzC3N,EAASgc,EAAThc,EAAG6D,EAAMmY,EAANnY,EACX,IAAKnN,KAAK0kB,gBAAgBpb,EAAG6D,GACzB,MAAM,IAAI9B,MAAJ,oBAAA/F,OAA8BgE,EAA9B,MAAAhE,OAAoC6H,EAApC,MAEN8J,aAAgBiE,KACE,MAAdlb,KAAKwlB,MACLxlB,KAAKwlB,MAAQvO,EAEb/U,QAAQiK,KAAK,yBAGrB,IAAMob,EAAUvnB,KAAK6X,OAAOvO,EAAG6D,GAE3Bf,EAAamb,KAYTnb,EAAa6K,IACbsQ,EAAQjb,UAAUmL,KAAKR,EAAK3K,UAAWib,EAAQjb,UAAUxB,MAAOyc,EAAQjb,UAAUtB,OAEtD,IAA5Buc,EAAQjb,UAAUxB,OAA2C,IAA5Byc,EAAQjb,UAAUtB,QACnD9I,QAAQiK,KAAK,OAAQob,EAAQjb,UAAW,yBACxCib,EAAQjb,UAAU+M,KAAKkO,EAAQjb,UAAUxB,OAAQyc,EAAQjb,UAAUtB,SAI3E,IAAMwc,EAAUxnB,KAAKymB,UAAUnd,GAAG6D,GAKlC,GAJe,MAAXqa,GACAxnB,KAAK4mB,UAAUP,QAAQ5iB,KAAK+jB,GAG5BvQ,aAAgB5B,GAEhBrV,KAAKymB,UAAUnd,GAAG6D,GAAK8J,MACpB,CAEHjX,KAAKymB,UAAUnd,GAAG6D,GAAK,KAEvB,IAAMsa,EAAqBznB,KAAKwmB,gBAAgBld,GAAG6D,GACzB,MAAtBsa,GACAznB,KAAK4mB,UAAUP,QAAQ5iB,KAAKgkB,GAEhCznB,KAAKwmB,gBAAgBld,GAAG6D,GAAK8J,EAEjCjX,KAAK4mB,UAAUN,MAAM7iB,KAAKwT,GAC1BjX,KAAK0nB,kBAAkBpC,KAzK/B,CAAAhlB,IAAA,oBAAAkH,MAAA,SA2K6B8d,GACrB,IAAMU,EAAYhmB,KAAKwW,OAAO8O,EAAShc,EAAGgc,EAASnY,GASnD,OARI6Y,IACAhmB,KAAKymB,UAAUnB,EAAShc,GAAGgc,EAASnY,GAAK,KACrC6Y,IAAchmB,KAAKwlB,QACnBxlB,KAAKwlB,WAAQza,GAEjB/K,KAAK4mB,UAAUP,QAAQ5iB,KAAKuiB,IAEhChmB,KAAK0nB,kBAAkBpC,GAChBU,IArLf,CAAA1lB,IAAA,kBAAAkH,MAAA,SAuL2B8B,EAAW6D,GAC9B,QAAI7D,GAAK5I,IAAS4I,EAAI,GAAK6D,GAAK1M,IAAU0M,EAAI,KAxLtD,CAAA7M,IAAA,gBAAAkH,MAAA,SA+LyB6M,GACjB,OAAOrU,KAAK0mB,cAAcrS,EAAI/K,GAAG+K,EAAIlH,KAhM7C,CAAA7M,IAAA,uBAAAkH,MAAA,SAmMiCmgB,EAAYC,GAAY,IAAAllB,EAAA1C,KAC3C6nB,EAAU,IAAIC,IAWpB,OATmBC,GAAsB/nB,KAAK8X,KAAOiQ,GAAsB7iB,QAChElC,QAAQ,SAACsL,GAChB,IAAMhF,EAAIqe,EAAKrZ,EAAEhF,EACX6D,EAAIya,EAAKtZ,EAAEnB,EACX8J,EAAOvU,EAAKmV,OAAOvO,EAAG6D,GAChB,MAAR8J,GACA4Q,EAAQG,IAAI1Z,EAAG2I,KAGhB4Q,IA/Mf,CAAAvnB,IAAA,WAAAkH,MAAA,WA4NQ,GAA2B,MAAvBxH,KAAK2mB,eACL,MAAM,IAAItb,MAAM,oCAEpB,OAAOrL,KAAK2mB,iBA/NpB,CAAArmB,IAAA,oBAAAkH,MAAA,SAkO8B6M,GACtBrU,KAAK0mB,cAAcrS,EAAI/K,GAAG+K,EAAIlH,GAAKnN,KAAKonB,qBAAqB/S,EAAI/K,EAAG+K,EAAIlH,GADpC,IAAAsJ,GAAA,EAAAC,GAAA,EAAAC,OAAA5L,EAAA,IAEpC,QAAA6L,EAAAC,EAAkB7J,EAAlB4I,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAAoC,KAAzBO,EAAyBJ,EAAApP,MAC1B8B,EAAI+K,EAAI/K,EAAI0N,EAAI1N,EAChB6D,EAAIkH,EAAIlH,EAAI6J,EAAI7J,EAClBnN,KAAK0kB,gBAAgBpb,EAAG6D,KACxBnN,KAAK0mB,cAAcpd,GAAG6D,GAAKnN,KAAKonB,qBAAqB9d,EAAG6D,KAN5B,MAAAkJ,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GASpC3W,KAAKqnB,uBA3Ob,CAAA/mB,IAAA,qBAAAkH,MAAA,WA8OQ,IAAMygB,EAAwB,GAO1B3e,EAAI,EAAG6D,EAAI,EACf,IAAK7D,EAAI,EAAGA,EAAI5I,GAAO4I,IACnB,IAAK6D,GAAK7D,EAAItJ,KAAK8X,MAAQ,EAAG3K,EAAI1M,GAAQ0M,GAAK,EAE3C8a,EAAYxkB,KAAKzD,KAAK6X,OAAOvO,EAAG6D,IAGxC,IAAK7D,EAAI,EAAGA,EAAI5I,GAAO4I,IACnB,IAAK6D,GAAK7D,EAAItJ,KAAK8X,KAAO,GAAK,EAAG3K,EAAI1M,GAAQ0M,GAAK,EAE/C8a,EAAYxkB,KAAKzD,KAAK6X,OAAOvO,EAAG6D,IAGpCnN,KAAK8X,KAAO,EAAI,GAChBmQ,EAAYC,UAKhBD,EAAYxkB,KAAKzD,KAAKgc,QACtBhc,KAAK2mB,eAAiBsB,IAzQ9B,CAAA3nB,IAAA,OAAAkH,MAAA,WA6RQ,IAAM2gB,EAAWnoB,KAAKmoB,WAYtB,OAXAnoB,KAAK4mB,UAAY,IAAIR,GAErB+B,EAASnlB,QAAQ,SAAColB,GChRK,oBDiRHA,ECjRNC,MDkRND,EAAOC,SAGfroB,KAAKsoB,kBACLtoB,KAAKuoB,cACLvoB,KAAK8X,OACL9X,KAAKqnB,qBACErnB,KAAK4mB,YAzSpB,CAAAtmB,IAAA,cAAAkH,MAAA,WAgTQ,IADmBxH,KAAK8X,KAAO9X,KAAKkS,YAAYsW,QAAQC,qBAAuB,KAAOzoB,KAAKkS,YAAYsW,QAAQC,qBAAuBzoB,KAAKkS,YAAYsW,QAAQE,aAChJ,CACX,IAAMpf,EAAI3I,IAAWgoB,QAAQ,EAAGjoB,GAAQ,GAClCkO,EAAI5O,KAAK6X,OAAOvO,EAAG,GACrBsF,aAAawJ,IACbxJ,EAAEtC,UAAU+M,IAAIrZ,KAAKkS,YAAYsW,QAAQI,gBAAiB,MApT1E,CAAAtoB,IAAA,kBAAAkH,MAAA,WA+TQ,IAHA,IAAMqhB,EAAW7oB,KAAK8X,KAAOrN,KAAKqe,GAAK,EAAI,IACrCC,EAAkBte,KAAK2D,IAAIya,EAAWpe,KAAKqe,GAAK,GAChDE,EAAYve,KAAKwe,KAA0B,GAArBxe,KAAK2D,IAAIya,KAAmBpe,KAAKqe,GAAK,GAAK,GAAM,GACpE3b,EAAI,EAAGA,GAAc,GAAT1M,GAAc0M,IAC/B,IAAK,IAAI7D,EAAI,EAAGA,EAAI5I,GAAO4I,IAAK,CAC5B,IAAMsF,EAAI5O,KAAKkpB,kBAAkB5f,EAAG6D,GACpC,GAAIyB,aAAawJ,GAAK,CAClB,IAAIa,EAAW,EACf,GAAU,IAAN9L,EACA8L,EAAW,MACR,CACH,IAAMkQ,EAASnpB,KAAK6X,OAAOvO,EAAG6D,EAAI,GAC5Bic,EAAYppB,KAAK6X,OAAOvO,EAAI,EAAG6D,EAAI,GACnCkc,EAAWrpB,KAAK6X,OAAOvO,EAAI,EAAG6D,EAAI,GAClCmc,EAAaH,aAAkB/Q,GAAM+Q,EAAO3Q,eAAiBwQ,EAAsB,MAAVG,EAAiB,EAAI,EAC9FI,EAAgBH,aAAqBhR,GAAMgR,EAAU5Q,eAAiBwQ,EAAyB,MAAbI,EAAoB,EAAI,EAC1GI,EAAeH,aAAoBjR,GAAMiR,EAAS7Q,eAAiBwQ,EAAwB,MAAZK,EAAmB,EAAI,EAO5GpQ,GAJIA,EAFA8P,EAAkB,EAEPQ,EAAgBR,EAAkBO,GAAc,EAAIP,GAEpDS,GAAgBT,EAAkBO,GAAc,IAAMP,KAE9C,EAAIxV,EAAOF,oBAAuBiW,EAAaC,EAAgBC,GAAgB,EAAKjW,EAAOF,kBAGtH4F,EAAW1F,EAAOH,uBAAyB6F,GAAY,EAAI1F,EAAOH,wBAElE6F,GAAY+P,EACZpa,EAAE4J,eAAiBS,MAzVvC,CAAA3Y,IAAA,eAAAkH,MAAA,WAoWQ,OAAkB,MAAdxH,KAAKwlB,OACDxlB,KAAKwlB,MAAMlZ,UAAUtB,MAAQkQ,GAAM6F,WAC5B,MAIX/gB,KAAK6X,OAAO7X,KAAKgc,OAAO3H,IAAI/K,EAAGtJ,KAAKgc,OAAO3H,IAAIlH,aAAc2M,GACtD,OAEJ,OA7Wf,CAAAxZ,IAAA,iBAAAkH,MAAA,WAmXQxH,KAAKmoB,WAAWnlB,QAAQ,SAACf,GACjBmK,EAAanK,KACCA,EAAEqK,UAAUtB,MACZ/I,EAAEqK,UAAUxB,OAE1BoJ,GAAUjS,IACKA,EAAEkS,aAzXjCoS,EAAA,GAgYA,SAASkD,GAAWC,GAGhB,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMxkB,OAElB,IAAM2kB,GAETD,EAAcnf,KAAKiB,MAAMjB,KAAKoD,SAAWgc,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEzB,OAAOD,EAEX,IAAM3B,GAAwB,CAC1B0B,GAAQzc,EAAiB8W,SACzB2F,GAAQzc,EAAiB8W,SACzB2F,GAAQzc,EAAiB8W,SACzB2F,GAAQzc,EAAiB8W,SACzB2F,GAAQzc,EAAiB8W,UEnad,SAASgG,GAAQhe,GAC5B,IAAIie,EACJ,OAAO,WAIH,YAHchf,IAAVgf,IACAA,EAAQje,KAELie,GCkBR,IAAMC,GAAYF,GAAK,WAC1B,IAAMG,EAAa,IAAItc,EACjBuc,EAAY,IAAIvc,EAChBwc,EAAc,IAAIxc,EA2CxB,MAzCiC,CAC7B6a,QAAS,CACLC,qBAAsB,IACtBC,aAAc,GACdE,gBAAiB,GAErBnP,gBAAiB,KACjBC,kBAAmB,GACnBb,SAAU,GACVS,oBAAqB,KACrBuN,KAAM,CACF,SAACxS,EAAKC,GAAU,IACLhL,EAAQ+K,EAAR/K,EAAG6D,EAAKkH,EAALlH,EACJid,EAAY3pB,GAAS,EACrB,GAAK0pB,EAAYE,QAAQ,EAAG/gB,EAAI,GAAK,GAAK,EAC1C,GAAM6gB,EAAYE,QAAQ,GAAI/gB,EAAI,GAAK,IACvCghB,EAAgBxmB,EAAIqJ,EAAI1M,GAAS,EAAG,EAAGA,GAAS,GAAI,GAAK,IACzD8pB,EAASL,EAAUta,SAAStG,EAAI,EAAG6D,EAAI,GAAKmd,EAClD,GAAInd,EAAIid,EAAW,CACf,GAAIG,EAEA,OADa,IAAInU,GAAK/B,EAAKC,GAG3B,IAAMkW,EAAe/f,KAAKggB,IAAI3mB,EAAIqJ,EAAI1M,GAAS,EAAG,EAAGA,GAAS,EAAG,GAAK,GAAI,GAGpEiqB,EAAeT,EAAWra,SAFV,GAEmBtG,EAFnB,GAEsC6D,GAAqB,GAC3ErC,EAAQL,KAAKC,MAAMD,KAAKsK,IAAI,EAAGtK,KAAKa,IAEtC,GAAIof,EAAe,GAAM,GAAKF,EAAe,KACjD,GAAIA,EAAeE,EAAe,EAAInX,EAAOL,uBAAwB,CACjE,IAAMyX,EAAkBlgB,KAAKa,IAAIkf,EAAeE,EAAc,GAC9D,OAAO,IAAI1Q,GAAS3F,EAAKvJ,EAAOwJ,EAAO7J,KAAKC,MAAM6I,EAAON,sBAAwB0X,IAEjF,OAAO,IAAIxS,GAAK9D,EAAKvJ,EAAOwJ,SAU3CsW,GAASd,GAAK,WACvB,IAAMK,EAAc,IAAIxc,EAClBuc,EAAY,IAAIvc,EA+BtB,MA7BuB,CACnB6a,QAAS,CACLE,aAAc,IACdD,qBAAsB,IACtBG,gBAAiB,GAErBnP,gBAAiB,KACjBC,kBAAmB,GACnBJ,oBAAqB,IACrBT,SAAU,IACVgO,KAAM,CACF,SAACxS,EAAKC,GAAU,IACLhL,EAAQ+K,EAAR/K,EAAG6D,EAAKkH,EAALlH,EACJid,EAAY3pB,GAAS,EACrB,GAAK0pB,EAAYE,QAAQ,EAAG/gB,EAAI,IAAM,GAAK,EAC3C,EAAK6gB,EAAYE,QAAQ,GAAI/gB,EAAI,IAAM,IAEvCghB,EAAgBxmB,EAAIqJ,EAAG1M,GAAS,EAAGA,IAAS,IAAM,IAClD8pB,EAASL,EAAUta,SAAStG,EAAI,EAAG6D,EAAI,GAAKmd,EAClD,GAAInd,EAAIid,EAAW,CACf,GAAIG,EACA,OAAO,IAAInU,GAAK/B,EAAKC,GAEzB,IAAMxJ,EAAQL,KAAKiB,MAAMjB,KAAKsK,IAAI,EAAGjR,EAAIqJ,EAAY,IAAT1M,GAAeA,GAAQ,EAAG,KACtE,OAAO,IAAI0X,GAAK9D,EAAKvJ,EAAOwJ,SAQnCuW,GAAQf,GAAK,WACtB,IAAMI,EAAY,IAAIvc,EAChBwc,EAAc,IAAIxc,EAiCxB,MA/BuB,CACnB6a,QAAS,CACLC,qBAAsB,KACtBC,aAAc,IACdE,gBAAiB,GAErBtP,oBAAqB,GACrBI,kBAAmB,GACnBD,gBAAiB,KACjBZ,SAAU,EACVgO,KAAM,CACF,SAACxS,EAAKC,GAAU,IACLhL,EAAQ+K,EAAR/K,EAAG6D,EAAKkH,EAALlH,EACJid,EAAqB,IAAT3pB,GACZ,GAAK0pB,EAAYE,QAAQ,EAAG/gB,EAAI,GAAK,GAAK,EAC1C,GAAM6gB,EAAYE,QAAQ,GAAI/gB,EAAI,GAAK,IACvCxF,EAAIwF,EAAG,EAAG5I,GAAO,IAAK,IAItB4pB,EAHYnd,EACZ,GAAKgd,EAAYE,QAAQ,EAAG/gB,EAAI,IAAM,GAAK,EAC3C,GAAM6gB,EAAYE,QAAQ,GAAI/gB,EAAI,IAAM,IACF,GAAT7I,IAAiB,GAAK,IAEzD,OADeypB,EAAUta,SAAStG,EAAI,GAAI6D,EAAI,IAAMmd,EAEnC,IAAIlU,GAAK/B,EAAKC,GAEpBnH,EAAIid,EACJ,IAAIjS,GAAK9D,EAAK,EAAGC,QADrB,OASVwW,GAAmB,CAC5Bd,aACAY,UACAC,mBC7IG,SAASE,GAA2BzW,EAAckQ,GAAmD,IAAlCwG,EAAkC/lB,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,IAAAA,UAAA,GAClGgmB,EAAOC,GAAQ,SAAC5hB,EAAG6D,EAAGge,GACxB,IAAMlU,EAAO3C,EAAMuD,OAAOvO,EAAG6D,GACjB,MAAR8J,GAAgB3C,EAAM0H,OAAOyI,WAAWxN,IACxCkU,EAAEC,cAAc9hB,EAAG6D,GAAG,KAG9B8d,EAAKG,cAAc5G,EAAOlb,EAAGkb,EAAOrX,GAAG,GACvC,IAAMke,EAAOC,GAAcL,EAAM3W,EAAM0H,OAAO3H,IAAKmQ,GACnD,OAAMlQ,EAAMuD,OAAO2M,aAAmBnP,IAAU2V,EAKzCK,GAHHA,EAAKE,MACEF,GAKR,SAASG,GAAiClX,EAAckQ,GAQ3D,OAAO8G,GAPMJ,GAAQ,SAAC5hB,EAAG6D,EAAGge,GACxB,IAAMlU,EAAO3C,EAAMuD,OAAOvO,EAAG6D,IACzB8J,aAAgBuG,MAAavG,aAAgB5B,MAAU4B,EAAK1C,aAC5D4W,EAAEC,cAAc9hB,EAAG6D,GAAG,KAIHmH,EAAM0H,OAAO3H,IAAKmQ,GAG1C,SAASiH,GAASC,GAErB,IADA,IAAMvI,EAAwB,GACrB9U,EAAI,EAAGA,EAAIqd,EAAUxmB,OAAS,EAAGmJ,IAAK,KAAAsd,EAAA7rB,OAAAmW,EAAA,EAAAnW,CACpB4rB,EAAUrd,GADU,GACpCud,EADoCD,EAAA,GAC7BE,EAD6BF,EAAA,GAAAG,EAAAhsB,OAAAmW,EAAA,EAAAnW,CAExB4rB,EAAUrd,EAAI,GAFU,GAGrC0d,EAAYC,GAAcJ,EAAOC,EAHIC,EAAA,GAAAA,EAAA,IAI3C,GAAiB,MAAbC,EACA,MAAM,IAAI1gB,MAAM,+CAEpB8X,EAAQ1f,KAAKsoB,GAEjB,OAAO5I,EAGX,SAASmI,GAAcL,EAAYgB,EAAgBzH,GAG/C,OAFe,IAAI0H,eAAY,CAAEC,iBAAkBC,oBAAiBC,SAEtDC,SACVL,EAAM3iB,EAAG2iB,EAAM9e,EACfqX,EAAOlb,EAAGkb,EAAOrX,EACjB8d,GAGR,SAASC,GAAQpf,GAEb,IADA,IAAMmf,EAAO,IAAIsB,QAAK7rB,GAAOD,IACpB6I,EAAI,EAAGA,EAAI5I,GAAO4I,IACvB,IAAK,IAAI6D,EAAI,EAAGA,EAAI1M,GAAQ0M,IACxB8d,EAAKG,cAAc9hB,EAAG6D,GAAG,GAIjC,IAAK,IAAI7D,EAAI,EAAGA,EAAI5I,GAAO4I,IACvB,IAAK,IAAI6D,EAAI,EAAGA,EAAI1M,GAAQ0M,IACxBrB,EAAGxC,EAAG6D,EAAG8d,GAGjB,OAAOA,EAGJ,SAASe,GAAcJ,EAAeC,EAAeW,EAAaC,GACrE,IAAMC,EAAKF,EAAMZ,EACXe,EAAKF,EAAMZ,EACjB,OAAOjJ,GAAUgC,KAAK,SAAAgI,GAAA,IAAE5V,EAAF4V,EAAE5V,IAAF,OAAWA,EAAI1N,IAAMojB,GAAM1V,EAAI7J,IAAMwf,IC3E/D,IAAME,GAAa,GACfC,IAAoB,EAClBC,GAAcjD,GAAK,kBAAM,IAAInpB,KAAsBqsB,KAAM,+CAAiD,WAC5GD,KAAcE,cAAc,CAACznB,KAAM,WACnCsnB,IAAoB,MAGXI,IAAe,IAAIvsB,KAAsBqsB,KAAK,2BAErDjD,GAA0C,GAEzC,SAASoD,GAAuB7jB,EAAW6D,GAAsC,IAA3BigB,EAA2BnoB,UAAAC,OAAA,QAAA6F,IAAA9F,UAAA,GAAAA,UAAA,GAAT,QAC3EqE,EAAImB,KAAKiB,MAAMpC,GACf6D,EAAI1C,KAAKiB,MAAMyB,GACf,IAAM7M,EAAG,GAAAgF,OAAMgE,EAAN,KAAAhE,OAAW6H,GACpB,GAAkB,MAAd4c,GAAMzpB,GAAc,KASX+sB,EAAT,WACI,IAAMC,EAAQP,KAAcO,MACtBpI,EAAUriB,EAAO0qB,WAAW,MAClCrI,EAAQsI,UAAYJ,EACpBlI,EAAQuI,SAAS,EAAG,EAAGZ,GAAY,IAGnC3H,EAAQwI,UAAUJ,EAEdT,GAAavjB,EACbujB,GAAa1f,EACb0f,GACAA,GAEA,EACA,EACAA,GACAA,IAEJc,EAAQC,aAAc,GA3BpB/qB,EAASO,SAAS6G,cAAc,UACtCpH,EAAOnC,MAAQmsB,GACfhqB,EAAOpC,OAASosB,GAChB,IAAMc,EAAU,IAAIhtB,IAAckC,GAClC8qB,EAAQE,UAAYltB,IACpBgtB,EAAQG,OAAQ,EAChBH,EAAQI,MAAQptB,IAChBgtB,EAAQK,MAAQrtB,IAuBZmsB,GACAO,IAEAN,KAAcnqB,iBAAiB,SAAU,WACrCyqB,MAGRtD,GAAMzpB,GAAOqtB,EAEjB,OAAO5D,GAAMzpB,GCzDV,IAAe2tB,GAClB,SAAAA,EAAmBzJ,EAAkB0J,EAAqBrtB,GAAaf,OAAAC,EAAA,EAAAD,CAAAE,KAAAiuB,GAAAjuB,KAAAwkB,SAAAxkB,KAAAkuB,QAAAluB,KAAAa,QCD9DstB,GAAb,SAAAC,GAYI,SAAAD,EAAY5a,GAAwB,IAAAjS,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmuB,IAChC7sB,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAquB,GAAA1sB,KAAAzB,QAXGquB,cAU6B,EAAA/sB,EAT7BgtB,cAS6B,EAAAhtB,EAM5BitB,MAAQ,EAJZjtB,EAAK+sB,SAAWF,EAAkBK,cAClCltB,EAAKgtB,SAAW,IAAIG,GAAyBlb,GAC7CjS,EAAKotB,eAAgB,EAJWptB,EAZxC,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAquB,EAAAC,GAAAtuB,OAAAO,EAAA,EAAAP,CAAAquB,EAAA,OAAA7tB,IAAA,cAAAkH,MAAA,WAKQ,IAAM6mB,EAAW,IAAIM,IACfjD,EAAY,IAAIkD,aAA6C,EAAhCT,EAAkBU,aAC/CC,EAAQ,IAAIF,aAAaT,EAAkBU,aAGjD,OAFAR,EAASU,aAAa,WAAY,IAAIC,IAAgBtD,EAAW,GAAGuD,YAAW,IAC/EZ,EAASU,aAAa,OAAQ,IAAIC,IAAgBF,EAAO,GAAGG,YAAW,IAChEZ,MAVfvuB,OAAAO,EAAA,EAAAP,CAAAquB,EAAA,EAAA7tB,IAAA,aAAAkH,MAAA,WAoBQxH,KAAKuuB,MAAQ,IApBrB,CAAAjuB,IAAA,SAAAkH,MAAA,SAsBW8B,EAAW6D,EAAWC,EAAW8hB,GACpClvB,KAAKquB,SAASc,WAAW7J,SAAS8J,OAAOpvB,KAAKuuB,MAAOjlB,EAAG6D,EAAGC,GAC3DpN,KAAKquB,SAASc,WAAWD,KAAKG,KAAKrvB,KAAKuuB,MAAOW,GAC/ClvB,KAAKuuB,UAzBb,CAAAjuB,IAAA,WAAAkH,MAAA,WA4B2BxH,KAAKquB,SAASc,WAAW7J,SAClCsI,aAAc,EACT5tB,KAAKquB,SAASc,WAAWD,KAClCtB,aAAc,EACpB5tB,KAAKquB,SAASiB,aAAa,EAAGtvB,KAAKuuB,WAhC3CJ,EAAA,CAAuCoB,KAA1BpB,GACFU,YAAc,QA0CnBJ,eAGF,SAAAA,EAAmBlb,GAAwB,IAAA7Q,EAAA,OAAA5C,OAAAC,EAAA,EAAAD,CAAAE,KAAAyuB,IACvC/rB,EAAA5C,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAA2uB,GAAAhtB,KAAAzB,KAAM,CACFwvB,SAAU,CACNC,QAAS,CAAEjoB,MAAO+L,EAAOkc,SACzBC,WAAY,CAAEloB,MAAO+L,EAAO2b,MAC5BS,MAAO,CAAEnoB,MAAO+L,EAAOoc,OAEvB7rB,IAAK,CAAE0D,MAAO+L,EAAOzP,MAEzB8rB,gBACAC,kBACAC,WAAW,EACXC,aAAa,MAZsBxc,SAAA7Q,EAFpCoB,SAEoC,EAgBvCpB,EAAKoB,IAAMyP,EAAOzP,IAhBqBpB,6BAHRstB,KAuBjCJ,GAAY,6PAWZC,GAAc,kXCpEPI,GAAb,SAAAC,GAmEI,SAAAD,EAAYzL,EAAmB0J,EAAcrtB,GAAY,IAAAS,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAiwB,IACrD3uB,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAmwB,GAAAxuB,KAAAzB,KAAMwkB,EAAQ0J,EAAOrtB,KALlBsvB,gBAAkB,EAIgC7uB,EAFlD8uB,OAAoB,GAE8B9uB,EADlD+uB,OAAoB,GAC8B/uB,EAejDgvB,mBAAqB,SAAC/Y,GAE1B,IADA,IAAIgZ,EAAe9lB,KAAK+lB,KAAKlvB,EAAKkjB,OAAO1Z,OAClCxJ,EAAK8uB,OAAOlrB,OAASqrB,GAAc,CACtC,IAAMjiB,EAAIiJ,EAAM1M,QAAQwJ,IAAIK,QAAQiQ,IAAIrjB,EAAKkjB,OAAO3Z,QAAQwJ,KAC5D/F,EAAEhF,GAA6B,IAAvBmB,KAAKoD,SAAW,IACxBS,EAAEnB,GAA6B,IAAvB1C,KAAKoD,SAAW,IACxBvM,EAAK8uB,OAAO3sB,KAAK6K,GAIrB,IADAiiB,EAAe9lB,KAAK+lB,KAAKlvB,EAAKkjB,OAAOxZ,OAC9B1J,EAAK+uB,OAAOnrB,OAASqrB,GAAc,CACtC,IAAMjiB,EAAIiJ,EAAM1M,QAAQwJ,IAAIK,QAAQiQ,IAAIrjB,EAAKkjB,OAAO3Z,QAAQwJ,KAC5D/F,EAAEhF,GAA6B,IAAvBmB,KAAKoD,SAAW,IACxBS,EAAEnB,GAA6B,IAAvB1C,KAAKoD,SAAW,IACxBvM,EAAK+uB,OAAO5sB,KAAK6K,KA7BgChN,EAiCjDmvB,oBAAsB,WAC1B,IAAIF,EAAe9lB,KAAK+lB,KAAKlvB,EAAKkjB,OAAO1Z,OACrCxJ,EAAK8uB,OAAOlrB,OAASqrB,GACrBjvB,EAAK8uB,OAAOM,OAAOH,EAAcjvB,EAAK8uB,OAAOlrB,OAASqrB,GAG1DA,EAAe9lB,KAAK+lB,KAAKlvB,EAAKkjB,OAAOxZ,OACjC1J,EAAK+uB,OAAOnrB,OAASqrB,GACrBjvB,EAAK+uB,OAAOK,OAAOH,EAAcjvB,EAAK+uB,OAAOnrB,OAASqrB,IAvC1D/L,EAAOxY,GAAG,MAAO1K,EAAKgvB,oBACtB9L,EAAOxY,GAAG,OAAQ1K,EAAKmvB,qBAKvB,IAAK,IAAIpiB,EAAI,EAAGA,EAAI/M,EAAKkjB,OAAO1Z,MAAOuD,IACnC/M,EAAK8uB,OAAO3sB,KAAKktB,MAErB,IAAK,IAAItiB,EAAI,EAAGA,EAAI/M,EAAKkjB,OAAOxZ,MAAOqD,IACnC/M,EAAK+uB,OAAO5sB,KAAKktB,MAZgC,OAAArvB,EAnE7D,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAmwB,EAAAC,GAAApwB,OAAAO,EAAA,EAAAP,CAAAmwB,EAAA,OAAA3vB,IAAA,aAAAkH,MAAA,WAqCQyoB,EAAkBW,iBAAiBC,aACnCZ,EAAkBa,iBAAiBD,eAtC3C,CAAAvwB,IAAA,WAAAkH,MAAA,WA0CQyoB,EAAkBW,iBAAiBG,WACnCd,EAAkBa,iBAAiBC,eA3C3CjxB,OAAAO,EAAA,EAAAP,CAAAmwB,EAAA,EAAA3vB,IAAA,qBAAAkH,MAAA,SAgH+BwpB,MAhH/B,CAAA1wB,IAAA,kBAAAkH,MAAA,SAyH4BypB,EAA8BD,EAAkBE,GACpE,GAAIA,EAAchsB,OAAS,EAAG,CAC1B,IAAK,IAAImJ,EAAI,EAAGA,EAAI6iB,EAAchsB,OAAS,EAAGmJ,IAAK,CAC/C,IAAMf,EAAI4jB,EAAc7iB,GACxB4iB,EAAUE,OAAO7jB,EAAEhE,EAAItJ,KAAKwkB,OAAO3Z,QAAQwJ,IAAI/K,EAAGgE,EAAEH,EAAInN,KAAKwkB,OAAO3Z,QAAQwJ,IAAIlH,EAAG,GAAI,GACvF6jB,GAAY,EAEhB,IAAM1jB,EAAI4jB,EAAcA,EAAchsB,OAAS,GACzCksB,EAAQJ,EACdC,EAAUE,OAAO7jB,EAAEhE,EAAItJ,KAAKwkB,OAAO3Z,QAAQwJ,IAAI/K,EAAGgE,EAAEH,EAAInN,KAAKwkB,OAAO3Z,QAAQwJ,IAAIlH,EAAG,GAAIikB,MAlInG,CAAA9wB,IAAA,4BAAAkH,MAAA,WAuIQ,IAAM6pB,EAAYrxB,KAAKowB,OAAO9qB,OAAOtF,KAAKqwB,QADV9a,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAEhC,QAAA2K,EAAAC,EAAgB0b,EAAhBzb,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2B,KAAhB+b,EAAgB5b,EAAAlO,MACnB+pB,EAAK,EAAGC,EAAK,EACXC,EAAQC,YAAYC,MAAQ,IAAO3xB,KAAKmwB,gBAC9CoB,GAAwB,IAAlB9mB,KAAK0D,IAAIsjB,GAEf,IAAMG,EAA0B,GAAmB,GAAbN,EAAEpsB,SAGxC,GAFAqsB,IAAOD,EAAEhoB,EAAIsoB,EACbJ,IAAOF,EAAEnkB,EAAIykB,EACT5xB,KAAKa,KAAKyT,MAAM0H,OAAO3H,IAAI4H,OAAOjc,KAAKwkB,OAAO3Z,QAAQwJ,KAAM,CAC5D,IAAMwd,EAAsBpnB,KAAKsK,IAAItK,KAAKa,IAAIxH,EAAIwtB,EAAEQ,WAAY,EAAG,EAAG,GAAI,GAAI,GAAI,GAC5ExjB,EAAIgjB,EAAE5c,QAAQqd,eAAqC,GAAtBF,GACnCN,GAAMjjB,EAAEhF,EACRkoB,GAAMljB,EAAEnB,EAZW,IAAAsJ,GAAA,EAAAC,GAAA,EAAAC,OAAA5L,EAAA,IAcvB,QAAA6L,EAAAC,EAAgBwa,EAAhBzb,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAA2B,KAAhBqM,EAAgBlM,EAAApP,MACvB,GAAI8pB,IAAMxO,EACN,MAEJ,IAAM4J,EAAK4E,EAAEhoB,EAAIwZ,EAAExZ,EACbqjB,EAAK2E,EAAEnkB,EAAI2V,EAAE3V,EACb2kB,EAAWpF,EAAKA,EAAKC,EAAKA,EAChC,GAAImF,EAAW,EAAG,CACd,IAAME,EAAW,KAAQF,EACzBP,GAAM7E,EAAKsF,EACXR,GAAM7E,EAAKqF,IAxBI,MAAA3b,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GA2BvB2a,EAAEhoB,GAAKioB,EACPD,EAAEnkB,GAAKqkB,GA9BqB,MAAAnb,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,MAtIxC,CAAAnV,IAAA,SAAAkH,MAAA,WAyKQxH,KAAKiyB,mBAAmBjyB,KAAKwkB,OAAO1Z,OACpC9K,KAAKiyB,mBAAmBjyB,KAAKwkB,OAAOxZ,OACpChL,KAAKkyB,4BACLlyB,KAAKmyB,gBAAgBlC,EAAkBW,iBAAkB5wB,KAAKwkB,OAAO1Z,MAAO9K,KAAKowB,QACjFpwB,KAAKmyB,gBAAgBlC,EAAkBa,iBAAkB9wB,KAAKwkB,OAAOxZ,MAAOhL,KAAKqwB,UA7KzF,CAAA/vB,IAAA,UAAAkH,MAAA,gBAAAyoB,EAAA,CAAuChC,IAoLvC,SAAS0C,KACL,OAAO,IAAIlkB,IAAgC,KAAvBhC,KAAKoD,SAAW,IAAqC,KAAvBpD,KAAKoD,SAAW,KArLzDoiB,GACFW,eAAiB9G,GAAK,kBAAM,IAAIqE,GACnC,CACIwB,MAAO,IAAIyC,IAAM,mBACjBlD,KAAM,GACNO,QAAS,QALRQ,GAmBFa,eAAiBhH,GAAK,kBAAM,IAAIqE,GACnC,CACIwB,MAAO,IAAIyC,IAAM,UACjBlD,KAAM,GACNO,QAAS,GACT3rB,IAAKqpB,GAAuB,GAAI,GAAI,mBC/BhD,IAAMkF,GAAmB,IAAI1xB,IAAoB,EAAG,GAEpD,SAAS2xB,GAAeC,GACpB,IACM1vB,EAASO,SAAS6G,cAAc,UACtCpH,EAAOnC,MAFM,GAGbmC,EAAOpC,OAHM,GAIb,IAAMykB,EAAUriB,EAAO0qB,WAAW,MAElCrI,EAAQsN,KAAR,GAAAltB,OAAkB4pB,GAAlB,gBACAhK,EAAQuN,UAAY,SACpBvN,EAAQwN,aAAe,SACvBxN,EAAQsI,UAAY,QACpBtI,EAAQyN,SAASJ,EAAMrD,GAAUA,IAIjC,IAAMvB,EAAU,IAAIhtB,IAAoBkC,GAExC8qB,EAAQG,OAAQ,EAEhB,IAAM8E,EAAM,IAAIjyB,IAAwB,CACpCmD,IAAK6pB,EACLoC,aAAa,EACb8C,KAAMlyB,MAMV,OAJa,IAAIA,IACb0xB,GACAO,GA3BRP,GAAiBS,QAAQroB,KAAKqe,IA+BvB,IAAMiK,GAA+C,IAAIjL,IAChE,IAAK,IAAMyK,MAAQ/P,GACfuQ,GAAoB/K,IAAIuK,GAAMD,GAAeC,KC5B1C,IAAMS,GAAb,SAAA9C,GAEI,SAAA8C,EAAYxO,EAAgB0J,EAAcrtB,GAAY,IAAAS,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgzB,IAClD1xB,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAkzB,GAAAvxB,KAAAzB,KAAMwkB,EAAQ0J,EAAOrtB,KAFlBoyB,UAC+C,EAElD3xB,EAAK2xB,KAAO,IAAIC,IAAK,IAAIC,IAAoB,EAAG,GAE5C,IAAIC,IAAkB,CAClBrD,aAAa,EACbsD,YAAY,EACZvD,WAAW,EACXhsB,IAAKqpB,GAAuB,GAAI,GAAI,eACpCwC,MAAO,IAAIyC,IAAM,SACjBS,KAAMS,OAGdC,GAAMjyB,EAAK2xB,KAAK3N,SAAUhkB,EAAKkjB,OAAOnQ,IAAK,GAC3C/S,EAAK2xB,KAAK3N,SAASlY,EAAI,EACvB9L,EAAK4sB,MAAM7U,IAAI/X,EAAK2xB,MAf8B3xB,EAF1D,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAkzB,EAAA9C,GAAApwB,OAAAO,EAAA,EAAAP,CAAAkzB,EAAA,EAAA1yB,IAAA,SAAAkH,MAAA,WAoBQ+rB,GAAMvzB,KAAKizB,KAAK3N,SAAUtlB,KAAKwkB,OAAOgP,WAAY,IAElDxzB,KAAKizB,KAAK3N,SAASlY,EAAI,EAHlB,IAAAmI,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAIL,QAAA2K,EAAAC,EAA6Bod,GAA7Bnd,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAkD,KAAAS,EAAAN,EAAAlO,MAAAisB,EAAA3zB,OAAAmW,EAAA,EAAAnW,CAAAkW,EAAA,GAAtC1V,EAAsCmzB,EAAA,GAAjCC,EAAiCD,EAAA,GACxCzQ,EAASR,GAAcliB,GACvBgJ,EAAItJ,KAAKwkB,OAAOnQ,IAAI/K,EAAI0Z,EAAOhM,IAAI1N,EACnC6D,EAAInN,KAAKwkB,OAAOnQ,IAAIlH,EAAI6V,EAAOhM,IAAI7J,EACrCnN,KAAKwkB,OAAOmP,iBAAiB3zB,KAAKa,KAAKyT,MAAMuD,OAAOvO,EAAG6D,KAAkC,SAA3BnN,KAAKa,KAAK+yB,QAAQpuB,MAChFxF,KAAKkuB,MAAM7U,IAAIqa,GACfA,EAAQpO,SAAShc,EAAIA,EACrBoqB,EAAQpO,SAASnY,EAAIA,EACrBumB,EAAQpO,SAASlY,EAAI,GAErBpN,KAAKkuB,MAAM2F,OAAOH,IAdrB,MAAArd,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,MAnBb,CAAAnV,IAAA,UAAAkH,MAAA,WAsCQxH,KAAKkuB,MAAM2F,OAAO7zB,KAAKizB,UAtC/BD,EAAA,CAAoC/E,ICGvB6F,GAAb,SAAAC,GAEI,SAAAD,EAAmBl0B,GAAwB,IAAA0B,EA+Q1B2V,EA/Q0B,OAAAnX,OAAAC,EAAA,EAAAD,CAAAE,KAAA8zB,IACvCxyB,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAg0B,GAAAryB,KAAAzB,KAAM8zB,EAASzF,UA8QFpX,EA9QwBrX,EAAS4kB,OAgR3CwP,KAAkBzzB,IAAI0W,EAAKtC,aAAmCD,YAjR1B9U,WAAA0B,EAF/C,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAg0B,EAAAC,GAAAD,EAAA,CAA8BZ,KAAjBY,GACFzF,SAAW,IAAI8E,IAAoB,EAAG,GAM1C,IAAMc,GAAb,SAAA/D,GAQI,SAAA+D,EAAYzP,EAAW0J,EAAcrtB,GAAY,IAAA6B,EAAA5C,OAAAC,EAAA,EAAAD,CAAAE,KAAAi0B,IAC7CvxB,EAAA5C,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAm0B,GAAAxyB,KAAAzB,KAAMwkB,EAAQ0J,EAAOrtB,KAPlBoyB,UAM0C,EAAAvwB,EALzCwxB,uBAKyC,EAAAxxB,EAJzCyxB,mBAIyC,EAAAzxB,EAHzC2H,WAGyC,EAAA3H,EAFzC0xB,sBAAwB,EAEiB1xB,EADzC2xB,WAAyB,GACgB3xB,EAoDzC4xB,qBApDyC,EAEzC5xB,EAAK8hB,kBAAkBtH,IACvBxa,EAAK4xB,gBAAkB,IAAIL,EAAavxB,EAAK8hB,OAAOpH,cAAe1a,EAAKwrB,MAAOxrB,EAAK7B,MACpF6B,EAAKuwB,KAAOvwB,EAAK4xB,gBAAgBrB,MAEjCvwB,EAAKuwB,KAAO,IAAIa,GAAJh0B,OAAA4Y,EAAA,EAAA5Y,CAAA4C,IAgBhBA,EAAKyxB,cAAiBzxB,EAAKuwB,KAAK3E,SAA+BqB,MAAMjb,QAGjEtI,EAAa1J,EAAK8hB,UAClB9hB,EAAKwxB,kBAAoB,IAAIjE,GAAkBvtB,EAAK8hB,OAAOlY,UAAW5J,EAAKwrB,MAAOxrB,EAAK7B,MACvF6B,EAAKwxB,kBAAkB/D,iBAAmBztB,EAAK8hB,OAAOnQ,IAAI/K,EAAI5G,EAAK8hB,OAAOnQ,IAAIlH,GAAK,GAGvFzK,EAAKwrB,MAAM7U,IAAI3W,EAAKuwB,MACpB,IAAMsB,EAAS7xB,EAAK8hB,kBAAkBnP,GAAO,EAAI,EA/BJ,OAgC7C3S,EAAKuwB,KAAK3N,SAAS0C,IAAItlB,EAAK8hB,OAAOnQ,IAAI/K,EAAG5G,EAAK8hB,OAAOnQ,IAAIlH,EAAGonB,GACzD7xB,EAAK8hB,kBAAkBnP,GAEjB3S,EAAK8hB,OAAO7P,YAAkCsI,cAChDva,EAAKuwB,KAAKuB,MAAMxM,IAAI,IAAM,IAAM,GAGpCtlB,EAAKuwB,KAAKwB,kBAAmB,EAEjC/xB,EAAKuwB,KAAKyB,gBACNhyB,EAAK8hB,kBAAkB1G,IAAQpb,EAAK8hB,kBAAkB9E,MACtDhd,EAAK2H,MAAQ,IAAIsqB,IAAMjyB,EAAK7B,KAAK+zB,eACjClyB,EAAKuwB,KAAK5Z,IAAI3W,EAAK2H,QA5CsB3H,EARrD,OAAA5C,OAAAyH,EAAA,EAAAzH,CAAAm0B,EAAA/D,GAAApwB,OAAAO,EAAA,EAAAP,CAAAm0B,EAAA,EAAA3zB,IAAA,QAAAkH,MAAA,SAwDU8B,EAAW4lB,GACb,OAAOzkB,KAAKiB,MAAMpC,EAAI4lB,GAAQA,IAzDtC,CAAA5uB,IAAA,SAAAkH,MAAA,WA6Da,IAAAtD,EAAAlE,KACL,GAAIA,KAAKwkB,kBAAkBtH,GAAa,CAEpC,IAAMrQ,EAAI/I,EAAI,MAAQ9D,KAAKwkB,OAAOlH,cAAgBtd,KAAKwkB,OAAOjH,YAAa,EAAG,EAAG,GAAK,GACtFgW,GAAMvzB,KAAKizB,KAAKuB,MAAO,CAAClrB,EAAGuD,EAAGM,EAAGN,GAAI,SAIrC0mB,GAAMvzB,KAAKizB,KAAKuB,MAAO,IAAI/nB,IAAQ,EAAG,GAAI,IAE9C,IAAMooB,EAAc70B,KAAKwkB,OAAOqQ,cAC1BjC,EAAM5yB,KAAKizB,KAAK3E,SACtB,GAAItuB,KAAKwkB,kBAAkBpM,GAAK,CAC5B,IAAM0c,EAAarqB,KAAKsK,IAAI,EAAGjR,EAAI9D,KAAKwkB,OAAOlF,MAAO,EAAI,EAAG,MAAO,EAAGyV,GAAe7vB,OAAS,IACzF8vB,EAAkBvqB,KAAKiB,MAAMopB,GAC7BG,EAAaF,GAAeC,GAElC,GADAh1B,KAAKm0B,cAAgBc,EAAWvgB,QAC5BsgB,IAAoBD,GAAe7vB,OAAS,EAAG,CAC/C,IAAMyB,EAAQmuB,EAAaE,EAErBE,EAAWH,GADKC,EAAkB,GAExCh1B,KAAKm0B,cAActqB,KAAKqrB,EAAUvuB,IAgB1C,GAbAisB,EAAIjD,MAAQ,IAAIyC,IAAM,GAAGvoB,KAAK7J,KAAKm0B,cAAerwB,EAAI+wB,EAAa,EAAG,EAAG,GAAK,IAC1E70B,KAAKwkB,kBAAkBnP,IACvBrV,KAAKizB,KAAK3N,SAAS0C,IAAIhoB,KAAKwkB,OAAOnQ,IAAI/K,EAAGtJ,KAAKwkB,OAAOnQ,IAAIlH,EAAInN,KAAKwkB,OAAO/J,OAAQ,GAElFvG,GAAUlU,KAAKwkB,SACfoO,EAAIjD,MAAM9lB,KAAK,IAAIuoB,IAAM,GAAI,EAAIpyB,KAAKwkB,OAAOrQ,OAASZ,EAAOpB,eAEnC,MAA1BnS,KAAKk0B,mBACDW,EAAc,GAEd70B,KAAKk0B,kBAAkBiB,SAG3Bn1B,KAAKwkB,kBAAkB1G,IAAsB,MAAd9d,KAAKqK,MAAe,CACnD,IAAM+qB,EAAuBp1B,KAAKwkB,OAAOlG,WAAa,EAAI,EAC1D,GAAI8W,IAAyBp1B,KAAKo0B,uBAAyBgB,EAAuB,EAAG,CACjFp1B,KAAKqK,MAAMgrB,UAAUn0B,GACrB,IAAMo0B,EAAOt1B,KAAKwkB,OAAOnQ,IAAIkhB,kBAAkBv1B,KAAKa,KAAKyT,MAAM0H,OAAO3H,KAChEmhB,EAAS/qB,KAAKa,IAAI,EAAG,GAAK,EAAIgqB,EAAO,KAAOt1B,KAAKwkB,OAAOjG,eAAiBve,KAAKwkB,OAAOjG,eAC3Fve,KAAKqK,MAAMorB,UAAUD,GAGrBx1B,KAAKqK,MAAMqrB,OAEf11B,KAAKo0B,sBAAwBgB,EAMjC,GAAIp1B,KAAKwkB,kBAAkB9E,IAAsB,MAAd1f,KAAKqK,MAAe,CACnD,IAAM+qB,EAAuBp1B,KAAKwkB,OAAOxE,oBACzC,GAAIoV,IAAyBp1B,KAAKo0B,sBAAuB,CACrDp0B,KAAKqK,MAAMgrB,UAAUl0B,GACrB,IAAMw0B,EAAa31B,KAAKwkB,OAAOxE,qBAAuB,EAAIhgB,KAAKwkB,OAAOxE,qBAChEsV,EAAOt1B,KAAKwkB,OAAOnQ,IAAIkhB,kBAAkBv1B,KAAKa,KAAKyT,MAAM0H,OAAO3H,KAChEmhB,EAAS/qB,KAAKa,IAAI,EAAG,GAAK,EAAIgqB,EAAO,KAAOK,EAClD31B,KAAKqK,MAAMorB,UAAUD,GACI,MAArBx1B,KAAKqK,MAAML,QACXhK,KAAKqK,MAAMurB,OAEf51B,KAAKqK,MAAMqrB,OAEf11B,KAAKo0B,sBAAwBgB,EAEjC,GAAiBp1B,KAAKwkB,Od6UjBhG,qBAAqBpZ,Mc7UK,CAC3B,IAAMywB,EAAY71B,KAAKwkB,kBAAkB1G,GAAO,SAAW,IAAIsU,IAAM,mBAAmB0D,SAClFC,EAAQ/1B,KAAKwkB,OAAOhG,UACtBuX,EAAM7wB,SAAWlF,KAAKq0B,WAAWnvB,SAEjClF,KAAKq0B,WAAWrxB,QAAQ,SAACgzB,GAAD,OAAU9xB,EAAK+uB,KAAKY,OAAOmC,KACnDh2B,KAAKq0B,WAAa0B,EAAMjyB,IAAI,SAACkT,GACzB,IAAM9R,EAAwB,EAAf8R,EAAI9R,SAAe,IAC5B+wB,EAAW,IAAIC,IAAQlf,EAAI1N,EAAG0N,EAAI7J,EAAG,GAAGgpB,YACxCC,EAAclyB,EAAKmyB,SAASJ,EAAUA,EAASvhB,QAAQqd,gBAAgB7sB,EAAS,GAAIA,EAAQ2wB,GAElG,OADA3xB,EAAK+uB,KAAK5Z,IAAI+c,GACPA,KAInB,GAAIp2B,KAAKs2B,mBAAmBt2B,KAAKwkB,QAAS,CACtC,IAAMmL,EAAQ3vB,KAAKwkB,kBAAkB9E,GAAO,IAAI0S,IAAM,mBAAmB0D,SAAW,SAC9ES,EAAQv2B,KAAKwkB,OAAOvE,gBACtBsW,EAAMrxB,SAAWlF,KAAKq0B,WAAWnvB,SAEjClF,KAAKq0B,WAAWrxB,QAAQ,SAACgzB,GAAD,OAAU9xB,EAAK+uB,KAAKY,OAAOmC,KACnDh2B,KAAKq0B,WAAakC,EAAMzyB,IAAI,SAACkT,GACzB,IAAM9R,EAAS8R,EAAI9R,SAAW,IACxB+wB,EAAW,IAAIC,IAAQlf,EAAI1N,EAAG0N,EAAI7J,EAAG,GAAGgpB,YACxCC,EACFlyB,EAAKsgB,kBAAkB9E,GACrBxb,EAAKmyB,SAASJ,EAAU,IAAIC,IAAWhxB,EAAQyqB,GAC/C,IAAI6G,IAAYP,EAAU,IAAIC,IAAQ,EAAG,EAAG,GAAIhxB,EAAQyqB,GAE9D,OADAzrB,EAAK+uB,KAAK5Z,IAAI+c,GACPA,QA/J3B,CAAA91B,IAAA,qBAAAkH,MAAA,SAoKuBoH,GAGf,OAAOxJ,MAAMoe,QAAQ5U,EAAEqR,mBAvK/B,CAAA3f,IAAA,WAAAkH,MAAA,SA8KqBwP,EAAcyf,EAAiBvxB,EAAgByqB,GAE5D,IAAMqG,EAAO,IAAIU,IAAKzC,EAAa0C,aAAc,IAAIC,IAAkB,CAAEjH,MAAOA,KAGhF,GAFAqG,EAAK1Q,SAASuR,KAAKJ,GAEfzf,EAAI7J,EAAI,OACR6oB,EAAKc,WAAW9O,IAAI,EAAG,EAAG,EAAG,QAC1B,GAAIhR,EAAI7J,GAAK,OAChB6oB,EAAKc,WAAW9O,IAAI,EAAG,EAAG,EAAG,OAC1B,CACH,IAAM+O,EAAO,IAAIb,IAAQlf,EAAI5J,EAAG,GAAI4J,EAAI1N,GAAG6sB,YACrCa,EAAUvsB,KAAKwsB,KAAKjgB,EAAI7J,GAC9B6oB,EAAKc,WAAWI,iBAAiBH,EAAMC,GAM3C,OAJAhB,EAAKxB,MAAMxM,IAAI,EAAGvd,KAAKsK,IAAI,EAAG7P,GAAS,GACvC8wB,EAAK1Q,SAASlY,EAAI,GAClB4oB,EAAKtB,eACLsB,EAAKvB,kBAAmB,EACjBuB,IAhMf,CAAA11B,IAAA,UAAAkH,MAAA,WAmMQxH,KAAKkuB,MAAM2F,OAAO7zB,KAAKizB,MACO,MAA1BjzB,KAAKk0B,mBACLl0B,KAAKk0B,kBAAkB/vB,cArMnC8vB,EAAA,CAAyDhG,IAA5CgG,GAyKF0C,aAAgB,WACnB,IAAMxL,EAAI,IAAIwD,IAEd,OADAxD,EAAE4D,aAAa,WAAY,IAAIoI,IAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACnEhM,EAHY,GAiC3B,IAAM6I,GAAkBlK,GAAK,WACzB,IAAMsN,EAAY,IAAItP,IA4DtB,OA3DAsP,EAAUpP,IAAI5P,GAAK,IAAIgb,IAAkB,CACrCP,KAAMS,IACND,YAAY,KAEhB+D,EAAUpP,IAAI7P,GAAM,IAAIib,IAAkB,CACtCtvB,IAAKqpB,GAAuB,EAAG,IAG/B0F,KAAMS,IAEN3D,MAAO,IAAIyC,IAAM,oBACjBiB,YAAY,KAEhB+D,EAAUpP,IAAIhO,GAAU,IAAIoZ,IAAkB,CAC1CtvB,IAAKqpB,GAAuB,IAAS,OACrC0F,KAAMS,OAEV8D,EAAUpP,IAAI5R,GAAM,IAAIgd,IAAkB,CACtCtvB,IAAKqpB,GAAuB,GAAI,IAChC0F,KAAMS,IACN3D,MAAO,IAAIyC,IAAM,sBAErBgF,EAAUpP,IAAIlO,GAAU,IAAIsZ,IAAkB,CAC1CtvB,IAAKqpB,GAAuB,OAAU,QACtC0F,KAAMS,IACN3D,MAAO,IAAIyC,IAAM,yBAErBgF,EAAUpP,IAAIxK,GAAQ,IAAI4V,IAAkB,CACxCtvB,IAAKqpB,GAAuB,EAAG,IAC/B0F,KAAMS,IACN3D,MAAO,IAAIyC,IAAM,YAErBgF,EAAUpP,IAAI1G,GAAW8V,EAAU72B,IAAIid,KAMvC4Z,EAAUpP,IAAIlK,GAAM,IAAIsV,IAAkB,CAEtCtvB,IAAKqpB,GAAuB,GAAK,GAAI,MAErC0F,KAAMS,OAEV8D,EAAUpP,IAAItI,GAAM,IAAI0T,IAAkB,CAEtCtvB,IAAKqpB,GAAuB,GAAK,GAAI,IAAM,IAC3C0F,KAAMS,OAEV8D,EAAUpP,IAAI9M,GAAO,IAAIkY,IAAkB,CACvCtvB,IAAKopB,GACL2F,KAAMS,IACNvD,aAAa,KAEjBqH,EAAUpP,IAAIhG,GAAM,IAAIoR,IAAkB,CACtCtvB,IAAKqpB,GAAuB1iB,KAAKiB,MAAM,MAAWjB,KAAKiB,MAAM,MAC7DmnB,KAAMS,OAGH8D,IA2BX,IAAMrC,GAAiB,CAEnB,IAAI3C,IAAM,qBACV,IAAIA,IAAM,sBACV,IAAIA,IAAM,uBCpTDiF,GAAb,SAAAC,GAEI,SAAAD,EAAY7S,EAAmB0J,EAAcrtB,GAAY,IAAAS,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAq3B,IACrD/1B,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAu3B,GAAA51B,KAAAzB,KAAMwkB,EAAQ0J,EAAOrtB,KAFjB02B,WACiD,EAErDj2B,EAAKi2B,MAAQj2B,EAAKk2B,UAAUl2B,EAAKkjB,OAAOxN,KACxC1V,EAAK2xB,KAAK5Z,IAAI/X,EAAKi2B,OAHkCj2B,EAF7D,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAu3B,EAAAC,GAAAx3B,OAAAO,EAAA,EAAAP,CAAAu3B,EAAA,EAAA/2B,IAAA,YAAAkH,MAAA,SA+BsBwP,GACd,IAAM9R,EAAS8R,EAAI9R,SAAW,IACxB+wB,EAAW,IAAIC,IAAQlf,EAAI1N,EAAG0N,EAAI7J,EAAG,GAAGgpB,YACxC9hB,EAAM4hB,EAASvhB,QAAQqd,gBAAgB7sB,EAAS,GACtD,OAAO,IAAIsxB,IAAYP,EAAU,IAAIC,IAAQ7hB,EAAI/K,EAAG+K,EAAIlH,EAAG,GAAIjI,EAAQ,SAAU,GAAK,QAnC9FmyB,EAAA,CAAuCpD,ICC1BwD,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA33B,OAAAC,EAAA,EAAAD,CAAAE,KAAAy3B,GAAA33B,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAA23B,GAAA/zB,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAA23B,EAAAC,GAAA53B,OAAAO,EAAA,EAAAP,CAAA23B,EAAA,EAAAn3B,IAAA,SAAAkH,MAAA,WAYQ,OAAO,OAZf,CAAAlH,IAAA,oBAAAkH,MAAA,WAgBQxH,KAAKqB,MAAMkD,OAAO8U,IAAIrZ,KAAKqB,MAAMs2B,UAhBzC,CAAAr3B,IAAA,uBAAAkH,MAAA,WAoBQxH,KAAKqB,MAAMkD,OAAOsvB,OAAO7zB,KAAKqB,MAAMs2B,YApB5CF,EAAA,CAAiCxzB,iBCDpB2zB,GAAiB9N,GAAK,WAC/B,IAAMuE,EAAW,IAAI1tB,IAA0B,EAAG,GAC5Ck3B,EAAgB,IAAIl3B,IAAoB0tB,EAAU,GAClDC,EAAW,IAAI3tB,IAAwB,CAAEgvB,MAAO,SAAUI,aAAa,EAAMN,QAAS,MACtFqI,EAAe,IAAIn3B,IAAmBk3B,EAAevJ,GAE3D,OADAwJ,EAAaxS,SAASlY,EAAI,GACnB0qB,IASLC,8MACMJ,OAASC,KAAiBljB,gFACzB,IAAAhS,EAAA1C,KAGL,OAFAA,KAAK23B,OAAOrS,SAAShc,EAAItJ,KAAKqB,MAAMiI,EACpCtJ,KAAK23B,OAAOrS,SAASnY,EAAInN,KAAKqB,MAAM8L,EAC7BvJ,EAAA,cAAAA,EAAA,cACHA,EAAA,cAACo0B,GAAD,CAASruB,EAAI,SAACiF,GAAD,OAAOlM,EAAKi1B,OAAOnD,MAAMyD,UAA8B,IAApBxtB,KAAK2D,IAAQ,IAAJQ,GAAkB,QAC3EhL,EAAA,cAACs0B,GAAD,CAAaP,OAAQ33B,KAAK23B,OAAQpzB,OAAQvE,KAAKqB,MAAM6sB,gBAPrCjqB,iBAYtBk0B,8MACMC,eAEAp2B,QAAU,SAAC8V,GACf5T,EAAK7C,MAAMsI,EAAEmO,EAAO,KACpB5T,EAAKk0B,MAAQ/1B,sBAAsB6B,EAAKlC,kFAIxC,OAAO,iDAIPhC,KAAKo4B,MAAQ/1B,sBAAsBrC,KAAKgC,wDAGpChC,KAAKo4B,OACLh0B,qBAAqBpE,KAAKo4B,cAjBhBn0B,aAsBP8zB,MC3CwC9zB,gBCyDhD,IC9DMo0B,GAAb,SAAAX,GAAA,SAAAW,IAAA,OAAAv4B,OAAAC,EAAA,EAAAD,CAAAE,KAAAq4B,GAAAv4B,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAu4B,GAAA30B,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAAu4B,EAAAX,GAAA53B,OAAAO,EAAA,EAAAP,CAAAu4B,EAAA,EAAA/3B,IAAA,SAAAkH,MAAA,WACa,IAAAlG,EAAAtB,KACL,OAAQ4D,EAAA,qBAAKC,UAAU,qBACnBD,EAAA,qBAAKC,UAAU,+BACXD,EAAA,qBAAKC,UAAU,MAAMuE,QAAS,kBAAM9G,EAAKD,MAAMq0B,SAA/C,cACA9xB,EAAA,gCACAA,EAAA,qBAAKC,UAAU,cAAcuE,QAAS,kBAAM9G,EAAKD,MAAMq0B,SAAvD,QAGA9xB,EAAA,uBACIA,EAAA,wBACIA,EAAA,kGACAA,EAAA,wFACAA,EAAA,qHACAA,EAAA,wBAAIA,EAAA,2FACJA,EAAA,sFACAA,EAAA,+CACAA,EAAA,yHACAA,EAAA,oFACAA,EAAA,0FACAA,EAAA,gEAGRA,EAAA,+BACAA,EAAA,4CACuB2P,EAAOD,aAD9B,iMAKA1P,EAAA,gDACAA,EAAA,iLAE0B2P,EAAOR,aAFjC,kDAGsCQ,EAAON,sBAH7C,WAKArP,EAAA,+CACAA,EAAA,qeAOAA,EAAA,iCACAA,EAAA,gKAEuG,EAAI2P,EAAOV,oBAAoBylB,QAAQ,GAF9I,0HAKA10B,EAAA,iCACAA,EAAA,+NAIAA,EAAA,oCACAA,EAAA,sXAMAA,EAAA,iCACAA,EAAA,+KAE0C2P,EAAOpB,cAFjD,WAIAvO,EAAA,kCACAA,EAAA,sHACiG2P,EAAOnB,wBADxG,eAGAxO,EAAA,iCACAA,EAAA,2PAIAA,EAAA,kCACAA,EAAA,+MAE+D,EAAI2P,EAAOjB,kBAAkBgmB,QAAQ,GAFpG,yNAOA10B,EAAA,qCACAA,EAAA,qKAGAA,EAAA,qCACAA,EAAA,qOAIC5D,KAAKu4B,mBA5FtB,CAAAj4B,IAAA,eAAAkH,MAAA,WAiGQ,OAAQ5D,EAAA,cAAAA,EAAA,cACJA,EAAA,uCACAA,EAAA,iCACWA,EAAA,mBAAG40B,KAAK,sCAAsChU,OAAO,SAASiU,IAAI,uBAAlE,+BAEX70B,EAAA,yDACmCA,EAAA,mBAAG40B,KAAK,uCAAuChU,OAAO,SAASiU,IAAI,uBAAnE,yBADnC,KACuJ70B,EAAA,mBAAG40B,KAAK,mDAAR,gBADvJ,KAGA50B,EAAA,wCACkBA,EAAA,mBAAG40B,KAAK,qCAAqChU,OAAO,SAASiU,IAAI,uBAAjE,oBAElB70B,EAAA,6CACuBA,EAAA,mBAAG40B,KAAK,mBAAmBhU,OAAO,SAASiU,IAAI,uBAA/C,qBAEvB70B,EAAA,sCACgBA,EAAA,mBAAG40B,KAAK,0EAAR,6BAhH5BH,EAAA,CAAkCp0B,iBCErBy0B,GAAb,SAAAhB,GAAA,SAAAgB,IAAA,IAAA5zB,EAAAxD,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAA04B,GAAA,QAAA1zB,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/D,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA8E,EAAAhF,OAAA0B,EAAA,EAAA1B,CAAA44B,IAAAj3B,KAAAiC,MAAAoB,EAAA,CAAA9E,MAAAsF,OAAAH,MACIwzB,WAAa,WACTr3B,EAAKD,MAAMR,KAAK+3B,UAAY,QAFpCt3B,EAAA,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAA44B,EAAAhB,GAAA53B,OAAAO,EAAA,EAAAP,CAAA44B,EAAA,EAAAp4B,IAAA,SAAAkH,MAAA,WAKQ,IAAMqxB,EAA6B,CAC/Bn4B,MAAO,OACPD,OAAQ,OACR6kB,SAAU,WACVwT,WAAY,4BACZC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,QAEd,MAAyB,SAArBl5B,KAAKqB,MAAMoB,MACJ,KACqB,QAArBzC,KAAKqB,MAAMoB,MACVmB,EAAA,qBAAKC,UAAU,aAAag1B,MAAOA,GAAnC,YAGoB,SAArB74B,KAAKqB,MAAMoB,MACVmB,EAAA,qBAAKC,UAAU,cAAcg1B,MAAOA,GAApC,aAGoB,iBAArB74B,KAAKqB,MAAMoB,MACXmB,EAAA,cAACu1B,GAAD,CAAczD,KAAM11B,KAAK24B,kBAD7B,MAzBfD,EAAA,CAA+Bz0B,iBCGlBm1B,GAAb,SAAA7wB,GAAA,SAAA6wB,IAAA,OAAAt5B,OAAAC,EAAA,EAAAD,CAAAE,KAAAo5B,GAAAt5B,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAs5B,GAAA11B,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAAs5B,EAAA7wB,GAAAzI,OAAAO,EAAA,EAAAP,CAAAs5B,EAAA,EAAA94B,IAAA,SAAAkH,MAAA,WACoB,IACJyP,EAASjX,KAAKqB,MAAd4V,KACR,OAAKA,EAGGrT,EAAA,qBAAKC,UAAU,cACjB7D,KAAKq5B,SAASpiB,GACdjX,KAAKs5B,cAAcriB,GACnBjX,KAAKu5B,SAAStiB,GACdjX,KAAKw5B,gBAAgBviB,GACrBjX,KAAKy5B,SAASxiB,GACdjX,KAAK05B,SAASziB,GACdjX,KAAK25B,QAAQ1iB,GACbjX,KAAK45B,aAAa3iB,IAVb,OAJnB,CAAA3W,IAAA,WAAAkH,MAAA,SAiBqByP,GACb,OAAOA,aAAgByI,GAAQ9b,EAAA,qBAAKC,UAAU,aAC1CD,EAAA,yBAAMqT,EAAKkD,SAAX,gCACAvW,EAAA,yBAAMqT,EAAK+I,oBAAoBsY,QAAQ,GAAvC,8BACM,OArBlB,CAAAh4B,IAAA,WAAAkH,MAAA,SAuBqByP,GACb,OAAOA,aAAgB6G,GAAQla,EAAA,qBAAKC,UAAU,aAC1CD,EAAA,0BAAO,GAAKqT,EAAKoH,aAAe9K,EAAOjB,mBAAmBgmB,QAAQ,GAAlE,uBACA10B,EAAA,0BAAO,EAAIqT,EAAKmH,mBAAmBka,QAAQ,GAA3C,qBACM,OA3BlB,CAAAh4B,IAAA,UAAAkH,MAAA,SA6BoByP,GACZ,GAAIA,aAAgBmB,GAChB,OAAQxU,EAAA,qBAAKC,UAAU,YACnBD,EAAA,0CAA4B,IAAlBqT,EAAKgC,YAAkBqf,QAAQ,GAAzC,KACA10B,EAAA,0CAAuB,IAAbqT,EAAKqI,OAAagZ,QAAQ,GAApC,QAjChB,CAAAh4B,IAAA,eAAAkH,MAAA,SAsCyByP,GACjB,GAAIA,aAAgB+C,GAChB,OAAQpW,EAAA,qBAAKC,UAAU,iBACnBD,EAAA,yBAAMqT,EAAKiD,cAAX,uBAzChB,CAAA5Z,IAAA,WAAAkH,MAAA,SA8CqByP,GACb,IAAM4iB,EAAc3lB,GAAU+C,GAAUrT,EAAA,sBAAMC,UAAU,eAAhB,gBAAkCoT,EAAK9C,OAASZ,EAAOpB,cAAgB,KAAKmmB,QAAQ,GAApF,KAAmG,KAC3I,OAAQ10B,EAAA,qBAAKC,UAAU,aACnBD,EAAA,qBAAKC,UAAU,kBAAmBoT,EAAKtC,YAAkC0D,aACxEwhB,KAlDb,CAAAv5B,IAAA,gBAAAkH,MAAA,SAqD0ByP,GAClB,GAAI7K,EAAa6K,GAAO,CACpB,IAAM6iB,EAAa7iB,EAAK3K,UAAUxB,MAAQ,EACpClH,EAAA,qBAAKC,UAAU,uBAAf,gBAAyCoT,EAAK3K,UAAUxB,MAAMwtB,QAAQ,IACtE,KACAyB,EAAa9iB,EAAK3K,UAAUtB,MAAQ,EACpCpH,EAAA,qBAAKC,UAAU,uBAAf,SAA4CoT,EAAK3K,UAAUtB,MAAMstB,QAAQ,IACzE,KACN,OAAO10B,EAAA,qBAAKC,UAAU,kBAAkBi2B,EAAWC,MA7D/D,CAAAz5B,IAAA,WAAAkH,MAAA,SAgEqByP,GACb,GAAIA,aAAgB5B,IACE,IAAd4B,EAAKwD,OAAe,EACpB,OAAO7W,EAAA,qBAAKC,UAAU,cAA4B,IAAdoT,EAAKwD,QAAc6d,QAAQ,GAAxD,aAnEvB,CAAAh4B,IAAA,kBAAAkH,MAAA,SAuE4ByP,GACpB,GAAIA,aAAgBiG,GAChB,OAAOtZ,EAAA,qBAAKC,UAAU,sBAAsB,IAAOoT,EAAKqG,cAAgBrG,EAAKsG,YAAe,KAAK+a,QAAQ,GAAlG,gBAzEnBc,EAAA,CAAqCn1B,aCYxB+1B,GAAb,SAAAtC,GAAA,SAAAsC,IAAA,OAAAl6B,OAAAC,EAAA,EAAAD,CAAAE,KAAAg6B,GAAAl6B,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAk6B,GAAAt2B,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAAk6B,EAAAtC,GAAA53B,OAAAO,EAAA,EAAAP,CAAAk6B,EAAA,EAAA15B,IAAA,SAAAkH,MAAA,WAEQ,IAAMyyB,EAAUj6B,KAAKqB,MAAMyJ,MAAQ9K,KAAKqB,MAAM2J,MAAQuI,EAAOD,aAAe,EACtE4mB,EAAYt2B,EAAA,qBAAKC,UAAS,uBAAAyB,OAAyB20B,EAAU,YAAc,KAA/D,SAClB,OAAQr2B,EAAA,cAAAA,EAAA,cACJA,EAAA,qBAAKC,UAAW+D,IAAW,WAAY,CAAER,QAASpH,KAAKqB,MAAM84B,sBAExDn6B,KAAKo6B,gBACLp6B,KAAKq6B,wBACLr6B,KAAKs6B,kBACLt6B,KAAKu6B,cAEV32B,EAAA,qBAAKC,UAAW+D,IAAW,iBAAkB,CAAER,QAAQ,KAClD8yB,EACDt2B,EAAA,qBAAKC,UAAU,4BACV7D,KAAKw6B,qBACLx6B,KAAKy6B,oBAGbz6B,KAAK06B,gBACL16B,KAAK26B,0BApBlB,CAAAr6B,IAAA,oBAAAkH,MAAA,SAuBsBvF,GACdA,EAAE24B,iBACax3B,SAASy3B,qBAAqB,UAAU,GAChDC,UA1Bf,CAAAx6B,IAAA,eAAAkH,MAAA,SA4BiBlH,EAAay6B,EAAqB15B,GAAyC,IAAAC,EAAAtB,KACpF,OAAQ4D,EAAA,oBAAA9D,OAAA+H,OAAA,CAAKvH,IAAKA,EAAKuD,UAAU,sCAAsCuE,QAAS,SAACnG,GAC7EX,EAAKD,MAAM25B,eAAe16B,GAC1BgB,EAAK25B,kBAAkBh5B,KACpBZ,GACHuC,EAAA,sBAAMC,UAAU,0BAA0BvD,GAAYy6B,KAjClE,CAAAz6B,IAAA,oBAAAkH,MAAA,SAoCsBlH,EAAae,GAC3B,IACI05B,EADExV,EAAW1C,GAAcviB,GAG3By6B,EADAxV,IAAa/H,GACT,SAAAlY,OAAYigB,EAASlN,aAClBkN,IAAazH,IAAQyH,IAAa7F,GACrC,SAAApa,OAAYigB,EAASlN,aAClBkN,IAAarK,GAChB,SAAA5V,OAAYigB,EAASlN,aAClBkN,IAAajE,GAChB,OAAAhc,OAAUigB,EAASlN,aAEnB,SAAA/S,OAAYigB,EAASlN,aAE7B,IAAMwgB,EAA0B/4B,OAAA0T,EAAA,EAAA1T,CAAA,IAASuB,GAAS,CAAEw3B,MAAO,KAAMA,OAcjE,OAbI74B,KAAKqB,MAAM65B,YAAc3V,IACzBsT,EAAMsC,WAAa,OACnBtC,EAAMuC,eAAiB,YACvBvC,EAAMlJ,MAAQ,mBACV3vB,KAAKqB,MAAMyJ,MAAQ,IACnBiwB,GAAQ,iBACRlC,EAAMlJ,MAAQ,OAEd3vB,KAAKqB,MAAM2J,MAAQ,IACnB+vB,GAAQ,iBACRlC,EAAMlJ,MAAQ,QAGf3vB,KAAKq7B,aAAa/6B,EAAK,MAAQy6B,EAA/Bj7B,OAAA0T,EAAA,EAAA1T,CAAA,GAA0CuB,EAA1C,CAAiDw3B,aAhEhE,CAAAv4B,IAAA,kBAAAkH,MAAA,WAmEQ,OAAQ5D,EAAA,qBAAKC,UAAU,4BACnBD,EAAA,sBAAMC,UAAU,wBACX7D,KAAKqB,MAAMyJ,MAAMwtB,QAAQ,GAD9B,UADI,OAGiB10B,EAAA,sBAAMC,UAAU,wBAChC7D,KAAKqB,MAAM2J,MAAMstB,QAAQ,GADT,aAtEjC,CAAAh4B,IAAA,qBAAAkH,MAAA,WA4EQ,IAAM8zB,EAAet7B,KAAKqB,MAAMyJ,MAAQyI,EAAOD,aACzCioB,EAAev7B,KAAKqB,MAAM2J,MAAQuI,EAAOD,aACzCkoB,EAAe,GAAKx7B,KAAKqB,MAAMyJ,MAAQ9K,KAAKqB,MAAM2J,OAASuI,EAAOD,aAClEmoB,EAAmC,CAAE/6B,MAAK,GAAA4E,OAAqB,IAAfg2B,EAAN,MAC1CI,EAAmC,CAAEh7B,MAAK,GAAA4E,OAAqB,IAAfi2B,EAAN,MAC1CI,EAAmC,CAAEj7B,MAAK,GAAA4E,OAAqB,IAAfk2B,EAAN,MAMhD,OALsB53B,EAAA,qBAAKC,UAAU,sBACjCD,EAAA,qBAAKi1B,MAAO4C,EAAa53B,UAAU,6BACnCD,EAAA,qBAAKi1B,MAAO6C,EAAa73B,UAAU,6BACnCD,EAAA,qBAAKi1B,MAAO8C,EAAa93B,UAAU,gCArF/C,CAAAvD,IAAA,wBAAAkH,MAAA,WA0FQ,IAAMo0B,EAAyB,GAC/B,IAAK,IAAMt7B,KAAOuiB,GACd,GAAY,MAARviB,EAAJ,CAIA,IAAMyD,EAAK/D,KAAK67B,kBAAkBv7B,GACxB,MAANyD,GACA63B,EAAQn4B,KAAKM,GAMrB,OAH8B,MAA1B/D,KAAKqB,MAAMiT,MAAMkR,OAAiB3C,GAAciZ,GAChDF,EAAQn4B,KAAKzD,KAAK67B,kBAAkB,MAEjCj4B,EAAA,qBAAKC,UAAU,2CAA2C+3B,KAxGzE,CAAAt7B,IAAA,kBAAAkH,MAAA,WA2GQ,OAAQ5D,EAAA,qBAAKC,UAAU,6CAClB7D,KAAKq7B,aAAa,IAAK,iBACvBr7B,KAAKq7B,aAAa,IAAK,iBACvBr7B,KAAKq7B,aAAa,IAAK,kBACvBr7B,KAAKq7B,aAAa,IAAK,sBA/GpC,CAAA/6B,IAAA,aAAAkH,MAAA,WAmHQ,IAAMu0B,EAAqB,GADXxmB,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAEhB,QAAA2K,EAAAC,EAAkB,YAAYqmB,MAAM,IAApCpmB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAyC,KAA9BjV,EAA8BoV,EAAAlO,MACrCu0B,EAAIt4B,KAAKzD,KAAKq7B,aAAa/6B,EAAK,KAAM,CAClCu4B,MAAO,OAJC,MAAAxiB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAOhB,OAAQ7R,EAAA,qBAAKC,UAAU,0BAClBk4B,KA1Hb,CAAAz7B,IAAA,gBAAAkH,MAAA,WAgI2B,IACX8M,EAAUtU,KAAKqB,MAAfiT,MACR,GAAmB,MAAfA,EAAMkR,MACN,OAAQ5hB,EAAA,qBAAKC,UAAU,oBAAf,mBACayQ,EAAMkR,MAAMlZ,UAAUtB,MAAMstB,QAAQ,GADjD,OACyDpd,GAAM6F,WAD/D,aAnIpB,CAAAzgB,IAAA,gBAAAkH,MAAA,WAyIQ,GAAgC,cAA5BxH,KAAKqB,MAAMuyB,QAAQpuB,KAAsB,CACzC,IAAMo2B,EAAyB,GAC/B,IAAK,IAAMt7B,KAAOuiB,GAAe,CAC7B,IAAM0C,EAAW1C,GAAcviB,GAC/B,IAAIilB,IAAarK,IAAmC,MAA1Blb,KAAKqB,MAAMiT,MAAMkR,QAIvCD,IAAajE,GAAjB,CAGA,IAAMvd,EAAK/D,KAAKq7B,aAAa/6B,EAAKilB,EAASlN,aACjC,MAANtU,GACA63B,EAAQn4B,KAAKM,IAIrB,OADA63B,EAAQn4B,KAAKzD,KAAKq7B,aAAa,MAAO,OAElCz3B,EAAA,qBAAKC,UAAU,4BACXD,EAAA,qBAAKC,UAAU,mBACfD,EAAA,sBAAMC,UAAU,eAAhB,SACAD,EAAA,qBAAKC,UAAU,2BACV+3B,OA/JzB,CAAAt7B,IAAA,uBAAAkH,MAAA,WAsKQ,GAAIxH,KAAKqB,MAAM65B,UAAW,CACtB,IAAMrC,EAA6B,CAC/Btc,KAAMvc,KAAKqB,MAAM46B,OACjBC,IAAKl8B,KAAKqB,MAAM86B,QAEpB,OAAQv4B,EAAA,qBAAKC,UAAU,2BAA2Bg1B,MAAOA,GACrDj1B,EAAA,qBAAKC,UAAU,4BAAf,YACc7D,KAAKqB,MAAM65B,UAAU7iB,YAC9BrY,KAAKq7B,aAAa,MAAO,aA9K9CrB,EAAA,CAAyB/1B,0BClBZm4B,GAAb,SAAA7zB,GAEI,SAAA6zB,EAAY/6B,GAAY,IAAAC,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAo8B,IACpB96B,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAs8B,GAAA36B,KAAAzB,KAAMqB,KAFFg7B,SACgB,EAEpB,IAAMA,EAAM,IAAIC,KAAQ,CACpBC,QAAQ,EACR77B,MAAO,MAEX27B,EAAIhjB,IAAI9F,EAAQ,cAAezT,OAAOiD,KAAK+nB,KAAmB0R,SAAS,kBAAMC,WAAW,kBAAM95B,OAAOkG,SAAS6zB,UAAU,OACxHL,EAAIhjB,IAAI9F,EAAQ,QAAS,EAAG,GAAK,KACjC8oB,EAAIhjB,IAAI9F,EAAQ,wBAAyB,EAAG,IAAK,GACjD8oB,EAAIhjB,IAAI9F,EAAQ,cAChB8oB,EAAIhjB,IAAI9F,EAAQ,mBAAoB,EAAG,GAAK,MAC5C8oB,EAAIhjB,IAAI9F,EAAQ,uBAAwB,EAAG,EAAG,KAC9C8oB,EAAIhjB,IAAI9F,EAAQ,uBAAwB,EAAG,IAAK,GAChD8oB,EAAIhjB,IAAI9F,EAAQ,mBAAoB,EAAG,EAAG,KAC1C8oB,EAAIhjB,IAAI9F,EAAQ,oBAAqB,CAAC,WAAY,eAClD8oB,EAAIhjB,IAAI9F,EAAQ,yBAA0B,EAAG,EAAG,KAChD8oB,EAAIhjB,IAAI9F,EAAQ,oBAAqB,EAAG,EAAG,KAC3C8oB,EAAIhjB,IAAI9F,EAAQ,wBAAyB,EAAG,GAAI,GAChD8oB,EAAIhjB,IAAI9F,EAAQ,gBAAiB,EAAG,IAAM,MAC1C,IAAMopB,EAAIN,EAAIO,UAAU,sBACxBD,EAAEtjB,IAAI9F,EAAQ,qBAAsB,EAAG,IAAK,GAC5CopB,EAAEtjB,IAAI9F,EAAQ,qBAAsB,EAAG,IAAK,MAC5CopB,EAAEtjB,IAAI9F,EAAQ,qBAAsB,EAAG,IAAK,MAC5CopB,EAAEtjB,IAAI9F,EAAQ,gBAAiB,IAAK,IAAO,KAC3CopB,EAAEtjB,IAAI9F,EAAQ,yBAA0B,EAAG,EAAG,IAC9CopB,EAAEtjB,IAAI9F,EAAQ,eAAgB,GAAI,IAAM,GACxCopB,EAAEtjB,IAAI9F,EAAQ,qBAAsB,EAAG,IAAK,MAC5CopB,EAAEtjB,IAAI9F,EAAQ,eAAgB,EAAG,IAAK,GACtCopB,EAAEtjB,IAAI9F,EAAQ,0BAA2B,EAAG,IAAK,GA5B7B,IAAAgC,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IA8BpB,QAAA2K,EAAAC,EAAgB0mB,EAAIQ,cAAcv3B,OAAOq3B,EAAEE,eAA3CjnB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA2D,CAAAG,EAAAlO,MACrDs1B,eAAejpB,KA/BD,MAAAwC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,OAkCpBnU,EAAK+6B,IAAMA,EAlCS/6B,EAF5B,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAs8B,EAAA7zB,GAAAzI,OAAAO,EAAA,EAAAP,CAAAs8B,EAAA,EAAA97B,IAAA,SAAAkH,MAAA,WAwCQ,OAAO,SAxCf40B,EAAA,CAA+Bn4B,aCOlB84B,GAAb,SAAAx0B,GAAA,SAAAw0B,IAAA,OAAAj9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA+8B,GAAAj9B,OAAAyB,EAAA,EAAAzB,CAAAE,KAAAF,OAAA0B,EAAA,EAAA1B,CAAAi9B,GAAAr5B,MAAA1D,KAAAiF,YAAA,OAAAnF,OAAAyH,EAAA,EAAAzH,CAAAi9B,EAAAx0B,GAAAzI,OAAAO,EAAA,EAAAP,CAAAi9B,EAAA,EAAAz8B,IAAA,SAAAkH,MAAA,WAIoB,IACLw1B,EAAeh9B,KAAKqB,MAAMR,KAA1Bm8B,YACP,OAAOp5B,EAAA,cAAAA,EAAA,cACHA,EAAA,cAACq5B,GAAD,CAAiBhmB,KAAM+lB,IACrBh9B,KAAKk9B,gCAAgCF,GACrCh9B,KAAKm9B,qBATnB,CAAA78B,IAAA,kCAAAkH,MAAA,SAa2CyP,GACnC,GAAIA,EACA,OAAOrT,EAAA,cAACw5B,GAAD,CAAe9zB,EAAG2N,EAAK5C,IAAI/K,EAAG6D,EAAG8J,EAAK5C,IAAIlH,EAAG+gB,MAAOluB,KAAKkuB,UAf5E,CAAA5tB,IAAA,kBAAAkH,MAAA,WAmB6B,IAAA61B,EAC4Br9B,KAAKqB,MAAMR,KAApDq6B,EADamC,EACbnC,UAAW8B,EADEK,EACFL,YAAa9O,EADXmP,EACWnP,MAAO5Z,EADlB+oB,EACkB/oB,MACvC,GAAI0oB,EAAa,CACb,GAAiB,MAAb9B,IAAiE,IAA5CoC,GAAKC,eAAeC,QAAQtC,GACjD,OAAOt3B,EAAA,cAAC65B,GAAD,CAAexmB,KAAM+lB,EAAa9O,MAAOA,EAAO5Z,MAAOA,EAAOopB,SAAS,kBAElF,GAAIxC,IAAc5Z,GACd,OAAO1d,EAAA,cAAC65B,GAAD,CAAexmB,KAAM+lB,EAAa9O,MAAOA,EAAO5Z,MAAOA,EAAOopB,SAAS,cA1B9F,CAAAp9B,IAAA,QAAAC,IAAA,WAEQ,OAAOP,KAAKqB,MAAMR,KAAKqtB,UAF/B6O,EAAA,CAA2B94B,aAgCrB05B,oLACO,IAAAr8B,EAAAtB,KACCqrB,EAA+B,kBAAxBrrB,KAAKqB,MAAMq8B,SAClBlS,GAAiCxrB,KAAKqB,MAAMiT,MAAOtU,KAAKqB,MAAM4V,KAAK5C,KACnE0W,GAA2B/qB,KAAKqB,MAAMiT,MAAOtU,KAAKqB,MAAM4V,KAAK5C,KACnE,OAAOzQ,EAAA,cAAAA,EAAA,cACFynB,EAAKvnB,IAAI,SAAA8oB,GAAA,IAAA6G,EAAA3zB,OAAAmW,EAAA,EAAAnW,CAAA8sB,EAAA,GAAEtjB,EAAFmqB,EAAA,GAAKtmB,EAALsmB,EAAA,UAAY7vB,EAAA,cAACw5B,GAAD,CAAe9zB,EAAGA,EAAG6D,EAAGA,EAAG+gB,MAAO5sB,EAAKD,MAAM6sB,kBANnDjqB,iBrBXrB,IAAMvD,GAAQ,GACRD,GAAS,IAEf,SAAS8yB,GAAMjlB,EAAYM,EAA2BkU,GACzDxU,EAAEhF,EAAIgF,EAAEhF,GAAK,EAAIwZ,GAAKlU,EAAEtF,EAAIwZ,EAC5BxU,EAAEnB,EAAImB,EAAEnB,GAAK,EAAI2V,GAAKlU,EAAEzB,EAAI2V,EA2BzB,IAAMwa,GAAb,SAAAM,GAAA,SAAAN,IAAA,IAAAx4B,EAAAxD,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAs9B,GAAA,QAAAt4B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAA/D,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAE,MAAA8E,EAAAhF,OAAA0B,EAAA,EAAA1B,CAAAw9B,IAAA77B,KAAAiC,MAAAoB,EAAA,CAAA9E,MAAAsF,OAAAH,MACoBmP,MAAQ,IAAIiS,IAAOuE,GAAiBvX,EAAOrB,cAAgB8X,OAD/E1oB,EAEW4sB,MAAQ,IAAI2P,IAFvBv8B,EAGYw8B,OAAS,IAAIC,IAAmB,EAAG,EAAG,EAAG,GAAI,IAAK,KAH9Dz8B,EAIW08B,UAAY,IAAIlW,IAJ3BxmB,EAMW45B,eANX,EAAA55B,EA0BW28B,YAAwC,KA1BnD38B,EA2BW48B,MAAQ,IAAIv9B,IA3BvBW,EA4BW07B,iBA5BX,EAAA17B,EA6BY68B,UAAY,IAAIx9B,IA7B5BW,EA8BWs3B,UAAuB,OA9BlCt3B,EA+BY88B,qBAAsB,EA/BlC98B,EAgCWszB,cAAgB,IAAIj0B,IAhC/BW,EAiCY+8B,OAAS,IAAIC,IAjCzBh9B,EAkCWsyB,QAAmB,CAAEpuB,KAAM,QAlCtClE,EAqDWpB,OAAS,CACZnB,YAAa,SAACqkB,GACV,GAA0B,SAAtB9hB,EAAKsyB,QAAQpuB,KAAiB,CAC9B,IAAMyR,EAAO3V,EAAKi9B,wBAAwBnb,EAAMob,QAAUpb,EAAMqb,SACpD,MAARxnB,GACA3V,EAAKgT,MAAM0H,OAAO0iB,UAAU,CACxBl5B,KAAM,cACN8f,SAAUrO,EAAK5C,MAI3B,OAAO,GAEXlV,UAAW,SAACikB,GACR9hB,EAAK48B,MAAM50B,EAAI8Z,EAAMob,QACrBl9B,EAAK48B,MAAM/wB,EAAIiW,EAAMqb,SAEzB3/B,MAAO,SAACskB,GAEJ9hB,EAAKq9B,YAAYvb,EAAMob,QAAUpb,EAAMqb,UAE3Cj/B,QAAS,SAAC4jB,GACN9hB,EAAK88B,qBAAsB,EAC3B,IAAM99B,EAAM8iB,EAAM9iB,IAClBgB,EAAK+8B,OAAOhlB,IAAI/Y,GAChBgB,EAAKs9B,UAAUt+B,IAEnBf,MAAO,SAAC6jB,GACJ9hB,EAAK+8B,OAAOQ,OAAOzb,EAAM9iB,MAE7BZ,MAAO,SAACuC,GAEJ,IAAM68B,IAAU78B,EAAE88B,OAAS98B,EAAE+8B,QAAU,IAAM,GAMvCC,EALW39B,EAAKw8B,OAAOoB,KACdz0B,KAAKggB,IAAI,EAAGqU,GAK3Bx9B,EAAKw8B,OAAOoB,KAAOD,EACnB39B,EAAKw8B,OAAOqB,2BA7FxB79B,EAiGIs9B,UAAY,SAACt+B,GACT,GAAY,MAARA,EAAJ,CAIA,GAA0B,cAAtBgB,EAAKsyB,QAAQpuB,KAAsB,CACnC,GAAY,WAARlF,EAEA,YADAgB,EAAK89B,eAGT,GAAI9+B,KAAOuiB,KAAmBA,GAAcviB,KAAS4a,IAA6B,MAApB5Z,EAAKgT,MAAMkR,OAAgB,CACrF,IACM6Z,EAA2B,CAC7B75B,KAAM,QACN+f,SAHa1C,GAAcviB,GAI3BglB,SAAUhkB,EAAKsyB,QAAQpP,QAI3B,OAFAljB,EAAKgT,MAAM0H,OAAO0iB,UAAUW,QAC5B/9B,EAAK89B,eAEF,GAAI9c,GAAchiB,GAErB,YADAgB,EAAK89B,eAIb,GAAuB,iBAAnB99B,EAAKs3B,UAAT,CAOsB,MAAlBt3B,EAAK45B,WAA6B,WAAR56B,IAC1BgB,EAAK45B,eAAYnwB,GAErB,IAAMiY,EAASV,GAAchiB,IAAQkiB,GAAcliB,GACrC,MAAV0iB,EACA1hB,EAAKgT,MAAM0H,OAAO0iB,UAAU1b,GAExB1iB,KAAOuiB,KACHvhB,EAAK45B,YAAcrY,GAAcviB,IAASuiB,GAAcviB,KAAS4a,IAA6B,MAApB5Z,EAAKgT,MAAMkR,MACrFlkB,EAAK45B,eAAYnwB,EAEjBzJ,EAAK45B,UAAYrY,GAAcviB,QAjB3B,WAARA,IACAgB,EAAKs3B,UAAY,aAzBrBt3B,EAAKs3B,UAAgC,iBAAnBt3B,EAAKs3B,UAA+B,OAAS,gBAnG3Et3B,EAkJYg+B,uBACS,IAAI3+B,IACb,IAAIA,IAA0B,EAAG,GACjC,IAAIA,IAAwB,CACxBgvB,MAAO,QACPkD,KAAMlyB,IACNovB,aAAa,EACbN,QAAS,MAzJzBnuB,EAgXW4hB,WAAa,SAAClH,EAAgBgH,GACjC,GAAc,MAAVA,EAAJ,CAGA,GAAoB,SAAhBA,EAAOxd,KACP,OAAOwd,EAGX,GADA1hB,EAAK89B,eACe,UAAhBpc,EAAOxd,OAAqBlE,EAAK45B,YAAclZ,IAAQ1gB,EAAK45B,YAAc1d,IAC1E,MAAO,CACHhY,KAAM,QACN+f,SAAUjkB,EAAK45B,UACf5V,SAAUtJ,EAAO3H,KAGzB,GAAoB,SAAhB2O,EAAOxd,KACP,OAAOwd,EAEX,IAAMpB,EAAatgB,EAAKgT,MAAMuD,OAAOmE,EAAO3H,IAAI/K,EAAI0Z,EAAOhM,IAAI1N,EAAG0S,EAAO3H,IAAIlH,EAAI6V,EAAOhM,IAAI7J,GACtFiY,EAAcpJ,EAAOoJ,cAE3B,GAAsB,MAAlB9jB,EAAK45B,UAAmB,CACxB,GAAI55B,EAAK45B,YAAc5Z,GAAW,CAC9B,GAAkB,MAAd0B,EAAOhM,IAAe,MAAM,IAAI3L,MAAM,WAO1C,MANmD,CAC/C7F,KAAM,kBACN+f,SAAUjE,GACVgE,SAAUhkB,EAAKgT,MAAM0H,OAAO3H,IAC5B2C,IAAKgM,EAAOhM,KAGb,GAAI1V,EAAK45B,YAAclZ,IAAUoD,aAAuBpD,GAYxD,IAAKhG,EAAO8I,WAAW9B,GAW1B,OAAOA,EAVP,IAAMqc,EAA2B,CAC7B75B,KAAM,QACN+f,SAAUjkB,EAAK45B,UACf5V,SAAUtJ,EAAO3H,IAAIK,QAAQ2E,IAAI2J,EAAOhM,MAK5C,OAHI1V,EAAK45B,YAAc1d,IAAUlc,EAAK45B,YAAcxb,KAChDpe,EAAK45B,eAAYnwB,GAEds0B,EApBP,MAAO,CACH75B,KAAM,WACN2d,QAAS,CACL,CACI3d,KAAM,QACN+f,SAAUvD,GACVsD,SAAUtJ,EAAO3H,KAErB2O,IAgBT,OAAIhH,EAAO2X,iBAAiB/R,QACP,MAApBtgB,EAAK28B,aAED38B,EAAK28B,YAAYA,aAWlBjb,IAtbnB1hB,EAAA,OAAAxB,OAAAyH,EAAA,EAAAzH,CAAAw9B,EAAAM,GAAA99B,OAAAO,EAAA,EAAAP,CAAAw9B,EAAA,EAAAh9B,IAAA,SAAAkH,MAAA,WAQQ,OAAO5D,EAAA,cAAAA,EAAA,cACPA,EAAA,cAAC27B,GAAD,CACIrE,UAAWl7B,KAAKk7B,UAChBe,OAAQj8B,KAAKk+B,MAAM50B,EACnB6yB,OAAQn8B,KAAKk+B,MAAM/wB,EACnBymB,QAAS5zB,KAAK4zB,QACduG,mBAAwC,MAApBn6B,KAAKi+B,aAA6Bj+B,KAAKi+B,YAAYuB,aACvEx0B,MAAOhL,KAAKsU,MAAM0H,OAAO1P,UAAUtB,MACnCF,MAAO9K,KAAKsU,MAAM0H,OAAO1P,UAAUxB,MACnCkwB,eAAgBh7B,KAAK4+B,UACrBtqB,MAAOtU,KAAKsU,QAEhB1Q,EAAA,cAAC67B,GAAD,CAAW5+B,KAAMb,KAAMyC,MAAOzC,KAAK44B,YAEnCh1B,EAAA,cAAC87B,GAAD,MACA97B,EAAA,cAAC+7B,GAAD,CAAO9+B,KAAMb,UAvBrB,CAAAM,IAAA,wBAAAkH,MAAA,SAoCkCgd,GAC1B,IAAMob,EAAqC,SAAtB5/B,KAAK4zB,QAAQpuB,KAAkBxF,KAAK89B,OAAOoB,KAAOl/B,KAAK4zB,QAAQgM,aACpF5/B,KAAK4zB,QAAU,CACXpuB,KAAM,YACNo6B,eACApb,YAzCZ,CAAAlkB,IAAA,eAAAkH,MAAA,WA8CkC,cAAtBxH,KAAK4zB,QAAQpuB,OACbxF,KAAK89B,OAAOoB,KAAOl/B,KAAK4zB,QAAQgM,aAChC5/B,KAAK89B,OAAOqB,yBACZn/B,KAAK4zB,QAAU,CAAEpuB,KAAM,WAjDnC,CAAAlF,IAAA,OAAAkH,MAAA,WAiKS7E,OAAe9B,KAAOb,KZ5LxB,SAAqBoK,GACxB,IAAIy1B,EAAU,EACd,SAASC,IAEW,MADhBD,IAEIh/B,EAAKwJ,MAAM0a,YAAc,EACzBjkB,EAAQuJ,MAAM0a,YAAc,EAC5BhkB,EAAMsJ,MAAM0a,YAAc,EAC1BlkB,EAAKyF,KAAKE,QAAQ4D,EAAI9D,MACtBxF,EAAQwF,KAAKE,QAAQ4D,EAAI9D,MACzBvF,EAAMuF,KAAKE,QAAQ4D,EAAI9D,QAG/BzF,EAAOsJ,EAAqBC,EAAK,cAC5BC,MAAM01B,iBAAmBD,EAC9Bj/B,EAAKyF,KAAKA,KAAKkB,MAAQ,IAEvB1G,EAAUqJ,EAAqBC,EAAK,iBAC5BC,MAAM01B,iBAAmBD,EACjCh/B,EAAQwF,KAAKA,KAAKkB,MAAQ,GAE1BzG,EAAQoJ,EAAqBC,EAAK,eAC5BC,MAAM01B,iBAAmBD,EAC/B/+B,EAAMuF,KAAKA,KAAKkB,MAAQ,GAExBxG,EAAYmJ,EAAqBC,EAAK,cAC5B9D,KAAKA,KAAKkB,MAAQ,EAC5BxG,EAAUsF,KAAKE,QAAQ4D,EAAI9D,OAE3BrF,EAAQkJ,EAAqBC,EAAK,UAC5B9D,KAAKA,KAAKkB,MAAQ,EACxBvG,EAAMqF,KAAKE,QAAQ4D,EAAI9D,MAEvB,IAAM05B,EAAS,IAAIr/B,IAEnBq/B,EAAOhT,KACH,+CACA,SAACiT,GACG/+B,EAAa++B,GAEjB,SAACC,GACWA,EAAIC,OAASD,EAAIE,OAE7B,SAAC/pB,MAIL2pB,EAAOhT,KACH,6BACA,SAACiT,GACG9+B,EAAkB8+B,GAEtB,SAACC,GACWA,EAAIC,OAASD,EAAIE,OAE7B,SAAC/pB,MYsIDgqB,CAAYrgC,KAAKH,cACjBG,KAAK89B,OAAOoB,KAAO,IACnBl/B,KAAK89B,OAAOzkB,IAAIrZ,KAAK40B,eAErB50B,KAAKwC,OAAOxC,KAAK6C,OAAOnC,MAAOV,KAAK6C,OAAOpC,QAE3CT,KAAKkuB,MAAM7U,IAAI4W,GAAkBW,kBACjC5wB,KAAKkuB,MAAM7U,IAAI4W,GAAkBa,kBAGjC,IAAK,IAAIziB,EAAI,EAAGA,EAAI,EAAGA,IACnBrO,KAAKsU,MAAM+T,OAGfroB,KAAK89B,OAAOxY,SAASlY,EAAI,GACzBpN,KAAK89B,OAAOwC,OAAO,IAAI3/B,IAAc,EAAG,EAAG,IAC3CX,KAAK89B,OAAOxY,SAAShc,EAAItJ,KAAKsU,MAAM0H,OAAO3H,IAAI/K,EAC/CtJ,KAAK89B,OAAOxY,SAASnY,EAAInN,KAAKsU,MAAM0H,OAAO3H,IAAIlH,EAS/CnN,KAAKugC,qBACLvgC,KAAKsU,MAAM0H,OAAOkH,WAAaljB,KAAKkjB,aA7L5C,CAAA5iB,IAAA,sBAAAkH,MAAA,SAgM+B4gB,GACvB,IAAMxoB,EAAWI,KAAKg+B,UAAUz9B,IAAI6nB,GACpC,GAAgB,MAAZxoB,EAAkB,CAClB,IAAM4gC,EA3NlB,SAA6C7I,EAAWzJ,EAAcrtB,GAClE,GAAI82B,aAAkB5U,GAClB,OAAO,IAAIiQ,GAAe2E,EAAQzJ,EAAOrtB,GACtC,GAAI82B,aAAkBrW,GACzB,OAAO,IAAI+V,GAAkBM,EAAQzJ,EAAOrtB,GACzC,GAAI82B,aAAkBvjB,GACzB,OAAO,IAAI6f,GAAa0D,EAAQzJ,EAAOrtB,GAEvC,MAAM,IAAIwK,MAAJ,8BAAA/F,OAAwCqyB,IAmN1B8I,CAAkBrY,EAAQpoB,KAAKkuB,MAAOluB,MAEtD,OADAA,KAAKg+B,UAAUhW,IAAII,EAAQoY,GACpBA,EAEP,OAAO5gC,IAvMnB,CAAAU,IAAA,qBAAAkH,MAAA,WA4MQ,IAAMk5B,EAAO1gC,KAAKsU,MAAM0H,OAAO3H,IAAIlH,EAC7BwzB,EAAa78B,EAAI48B,EAAMjgC,GAAS,EAAGA,GAAQ,EAAG,IAC9CmgC,EAAgB98B,EAAI48B,EAAMjgC,GAAS,EAAG,EAAG,EAAG,IAClDM,EAAMuF,KAAKA,KAAKkB,MAAQiD,KAAKsK,IAAI,EAAG4rB,GACpC7/B,EAAQwF,KAAKA,KAAKkB,MAAQiD,KAAKsK,IAAI,EAAG6rB,KAhN9C,CAAAtgC,IAAA,gBAAAkH,MAAA,WAoNc,yBAAAlC,OACWtF,KAAKJ,SAASihC,KAAKC,OAAOC,WADrC,0BAAAz7B,OAEQtF,KAAKJ,SAASihC,KAAKC,OAAOE,SAFlC,sBAAA17B,OAGItF,KAAKJ,SAASihC,KAAKr9B,OAAOy9B,MAH9B,sBAAA37B,OAIItF,KAAKJ,SAASihC,KAAKr9B,OAAO+yB,MAJ9B,uBAAAjxB,OAKKtF,KAAKJ,SAASihC,KAAKr9B,OAAO09B,OAL/B,qBAAA57B,OAMGtF,KAAKJ,SAASihC,KAAKr9B,OAAO29B,UAN7B,QApNd,CAAA7gC,IAAA,YAAAkH,MAAA,WAiOQ,IAAI45B,EAAM,EAAGC,EAAK,EAAGrhC,KAAKkuB,MAAMoT,SAAS,SAACr0B,GAAYA,EAAEwnB,iBAAoB2M,IAAeC,MAC3Fn/B,QAAQq/B,IAAI,MAAOH,EAAK,KAAMC,GAG9B,IAAMx0B,EAAI,IAAIib,IAAO9nB,KAAKkuB,MAAMoT,SAAS,SAACr0B,GAAQ,IAAMmD,EAAKvD,EAAEtM,IAAI0M,EAAEpB,MAAQoB,EAAE0H,YAAY9I,OAAS,GAAKgB,EAAEmb,IAAI/a,EAAEpB,MAAQoB,EAAE0H,YAAY9I,KAAMuE,GAAIA,EAAE3M,KAAKwJ,KACxJ/K,QAAQq/B,IAAI10B,KAtOpB,CAAAvM,IAAA,iCAAAkH,MAAA,WA0OQ,GAAKxH,KAAKo+B,oBAAV,CAGA,IAAMoD,EAAQxhC,KAAKsU,MAAM+T,OACrBroB,KAAKi+B,aACLj+B,KAAKi+B,YAAY77B,SAAS,CAAE0V,KAAM9X,KAAKsU,MAAMwD,OAEjD9X,KAAK44B,UAAY54B,KAAKsU,MAAMmtB,gBAAkBzhC,KAAK44B,UAGnD,IAAM8I,EAAkBF,EAAMnb,QAXM9Q,GAAA,EAAAC,GAAA,EAAAC,OAAA1K,EAAA,IAapC,QAAA2K,EAAAC,EAAgB+rB,EAAhB9rB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAiC,KAAtBtT,EAAsByT,EAAAlO,MACvB5H,EAAWI,KAAKg+B,UAAUz9B,IAAI0B,GACpC,GAAgB,MAAZrC,EACA,MAAM,IAAIyL,MAAJ,8BAAA/F,OAAwCrD,EAAxC,MAEVrC,EAASuE,UACTnE,KAAKg+B,UAAUa,OAAO58B,IAnBU,MAAAoU,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAsBpCzV,KAAKugC,wBA/Pb,CAAAjgC,IAAA,2BAAAkH,MAAA,SAkQqCg3B,EAAiBC,GAC9C,OAAO,IAAI99B,IACP69B,EAAUx+B,KAAK6C,OAAOnC,MAAQ,EAAI,GACjC+9B,EAAUz+B,KAAK6C,OAAOpC,OAAS,EAAI,KArQhD,CAAAH,IAAA,0BAAAkH,MAAA,SAyQoCg3B,EAAiBC,GAC7C,IAAMkD,EAAa3hC,KAAK4hC,yBAAyBpD,EAASC,GAC1Dz+B,KAAKm+B,UAAU0D,cAAcF,EAAY3hC,KAAK89B,QAFgB,IAAAgE,EAS/C9hC,KAAKm+B,UAAU4D,IAAItL,OAA3BntB,EATuDw4B,EASvDx4B,EAAG6D,EAToD20B,EASpD30B,EACJ60B,EAAKv3B,KAAKC,MAAMpB,GAChB24B,EAAKx3B,KAAKC,MAAMyC,GAChB8J,EAAOjX,KAAKsU,MAAMuD,OAAOmqB,EAAIC,GACnC,GAAY,MAARhrB,GAAgBA,EAAK4d,cAAgB,EACrC,OAAO5d,IAvRnB,CAAA3W,IAAA,UAAAkH,MAAA,WA4RqB,IAAA9E,EAAA1C,KACLsU,EAAUtU,KAAVsU,MAKR,GADAtU,KAAK6C,OAAOi4B,QACW,SAAnB96B,KAAK44B,UAAsB,CAC3B,GAAIrlB,EAAOtB,YACP,GAAIjS,KAAKI,WAAa,IAAM,EAAG,CAC3B,GAAqC,MAAjCJ,KAAKsU,MAAM0H,OAAOkmB,YAAqB,CACvC,IAAMC,EAAaniC,KAAKoiC,eAAepiC,KAAKq+B,QACxC8D,GACAniC,KAAKsU,MAAM0H,OAAO0iB,UAAUyD,GAGpCniC,KAAKqiC,uCAE0B,MAA5B/tB,EAAM0H,OAAOkmB,aACpBliC,KAAKqiC,iCAGTpS,GAAkBY,aAClB7wB,KAAKsU,MAAM6T,WAAWnlB,QAAQ,SAAColB,GACV1lB,EAAK4/B,oBAAoBla,GACjC+M,WAEblF,GAAkBc,WAEI,cAAtB/wB,KAAK4zB,QAAQpuB,OACRxF,KAAKsU,MAAM0H,OAAO2X,iBAAiB3zB,KAAKsU,MAAMuD,OAAO7X,KAAK4zB,QAAQpP,UACnExkB,KAAKo/B,gBAGb,IAAMmD,EAAYviC,KAAK4hC,yBAAyB5hC,KAAKk+B,MAAM50B,EAAGtJ,KAAKk+B,MAAM/wB,GACzE,GAA0B,SAAtBnN,KAAK4zB,QAAQpuB,KAAiB,CAC9BxF,KAAKkuB,MAAM2F,OAAO7zB,KAAKs/B,wBACvB,IAAM9a,EAAS,IAAI7jB,IACfX,KAAKsU,MAAM0H,OAAO3H,IAAI/K,EAAIi5B,EAAUj5B,EAAI,EACxCtJ,KAAKsU,MAAM0H,OAAO3H,IAAIlH,EAAIo1B,EAAUp1B,EAAI,GAE5ComB,GAAMvzB,KAAK89B,OAAOxY,SAAUd,EAAQ,QACjC,CACHxkB,KAAKkuB,MAAM7U,IAAIrZ,KAAKs/B,wBACpBt/B,KAAKs/B,uBAAuBha,SAAS0C,IACjChoB,KAAK4zB,QAAQpP,OAAOlb,EACpBtJ,KAAK4zB,QAAQpP,OAAOrX,EACpB,GAEJ,IAAMqX,EAAS,IAAI7jB,IACfX,KAAK4zB,QAAQpP,OAAOlb,EACpBtJ,KAAK4zB,QAAQpP,OAAOrX,GAExBomB,GAAMvzB,KAAK89B,OAAOxY,SAAUd,EAAQ,IAQxCxkB,KAAKJ,SAAS4D,OAAOxD,KAAKkuB,MAAOluB,KAAK89B,QAGtC99B,KAAKg9B,YAAch9B,KAAKu+B,wBAAwBv+B,KAAKk+B,MAAM50B,EAAGtJ,KAAKk+B,MAAM/wB,KA3VjF,CAAA7M,IAAA,iBAAAkH,MAAA,SA8V0BzE,GAClB,IAAMiU,EAAM,IAAIvK,IADwCgK,GAAA,EAAAC,GAAA,EAAAC,OAAA5L,EAAA,IAExD,QAAA6L,EAAAC,EAAkB9T,EAAlB6S,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAAwB,KAAbnW,EAAasW,EAAApP,MAChBgb,GAAcliB,IACd0W,EAAIqC,IAAImJ,GAAcliB,GAAK0W,MAJqB,MAAAX,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GAOxD,OAAc,IAAVK,EAAI1N,GAAqB,IAAV0N,EAAI7J,EACZ,KAEA,CACH3H,KAAM,OACNwR,SA1WhB,CAAA1W,IAAA,SAAAkH,MAAA,SA0bkBkF,EAAW81B,GACrB,IAAMC,EAASD,EAAI91B,EAGnB1M,KAAK89B,OAAOvhB,MADS,GACckmB,EACnCziC,KAAK89B,OAAOthB,MAFS,GAEcimB,EACnCziC,KAAK89B,OAAO5B,KAHS,GAIrBl8B,KAAK89B,OAAO4E,OAJS,GAOrB1iC,KAAK89B,OAAOqB,2BApcpB,CAAA7+B,IAAA,cAAAkH,MAAA,SAucuBg3B,EAAiBC,GAChCz+B,KAAKo+B,qBAAsB,EAC3B,IAAM5Z,EAASxkB,KAAKu+B,wBAAwBC,EAASC,GAMrD,GAL0B,cAAtBz+B,KAAK4zB,QAAQpuB,OACC,MAAVgf,GAAmBxkB,KAAK4zB,QAAQpP,OAAOvI,OAAOuI,EAAOnQ,MACrDrU,KAAKo/B,gBAGR5a,EAKL,GAAIA,EAAOnQ,IAAI4H,OAAOjc,KAAKsU,MAAM0H,OAAO3H,KACpCrU,KAAKsU,MAAM0H,OAAO0iB,UAAU,CAACl5B,KAAM,cADvC,CAMA,IAYI2d,EAZEwf,EAAa3W,GAAchsB,KAAKsU,MAAM0H,OAAO3H,IAAI/K,EAAGtJ,KAAKsU,MAAM0H,OAAO3H,IAAIlH,EAAGqX,EAAOnQ,IAAI/K,EAAGkb,EAAOnQ,IAAIlH,GAC5G,GAAIw1B,EACA,OAAI3iC,KAAKsU,MAAM0H,OAAO2X,iBAAiBnP,QACnCxkB,KAAK4iC,sBAAsBpe,EAAOnQ,UAGlCrU,KAAKsU,MAAM0H,OAAO0iB,UAAUiE,GAUhCxf,EADAnjB,KAAKk7B,YAA8D,IAAjDoC,EAAKC,eAAeC,QAAQx9B,KAAKk7B,WACzCzP,GAASD,GAAiCxrB,KAAKsU,MAAOkQ,EAAOnQ,MAE7DoX,GAASV,GAA2B/qB,KAAKsU,MAAOkQ,EAAOnQ,IAAuB,MAAlBrU,KAAKk7B,YAE/El7B,KAAKsU,MAAM0H,OAAO6mB,WAAW1f,QA9erCma,EAAA,CAA0B39B,GAAb29B,GA+JFwF,WAAaC,IAAS5pB,UAAU6pB,kBA/J9B1F,GAgfFC,eAA2C,CAAC/f,GAAQkC,GAAMsC,IAGtDsb,UsBxiBA2F,GARO,WACpB,OACEC,EAAAv5B,EAAAM,cAAA,OAAKpG,UAAU,OACbq/B,EAAAv5B,EAAAM,cAACk5B,EAAD,CAAgBp8B,YAAau2B,OCIf8F,QACW,cAA7BzgC,OAAOkG,SAASw6B,UAEe,UAA7B1gC,OAAOkG,SAASw6B,UAEhB1gC,OAAOkG,SAASw6B,SAASC,MACvB,2DCZNC,IAAS//B,OAAO0/B,EAAAv5B,EAAAM,cAACu5B,GAAD,MAASpgC,SAASqgC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0bf0020.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nexport const UI_EVENTS = {\r\n    click: true,\r\n    contextmenu: true,\r\n    dblclick: true,\r\n    mousedown: true,\r\n    mouseup: true,\r\n    mousemove: true,\r\n    touchstart: true,\r\n    touchmove: true,\r\n    touchend: true,\r\n    keyup: true,\r\n    keydown: true,\r\n    keypress: true,\r\n    wheel: true,\r\n};\r\n\r\nexport type UIEventReciever = {\r\n    [E in keyof typeof UI_EVENTS]?: (this: HTMLElement, ev: GlobalEventHandlersEventMap[E]) => void;\r\n    // [E in keyof typeof UI_EVENTS]?: (ev: Event) => void;\r\n};\r\n\r\nexport abstract class ISketch {\r\n    static id?: string;\r\n\r\n    public elements?: JSX.Element[];\r\n    public events?: UIEventReciever;\r\n    /**\r\n     * milliseconds since sketch started running.\r\n     */\r\n    public timeElapsed = 0;\r\n\r\n    public frameCount = 0;\r\n\r\n    constructor(public renderer: THREE.WebGLRenderer, public audioContext: SketchAudioContext) {}\r\n\r\n    /**\r\n     * height / width\r\n     */\r\n    get aspectRatio() {\r\n        return this.renderer.domElement.height / this.renderer.domElement.width;\r\n    }\r\n\r\n    get resolution() {\r\n        return new THREE.Vector2(this.renderer.domElement.width, this.renderer.domElement.height);\r\n    }\r\n\r\n    get canvas() {\r\n        return this.renderer.domElement;\r\n    }\r\n\r\n    abstract init(): void;\r\n\r\n    abstract animate(millisElapsed: number): void;\r\n\r\n    render?(): React.ReactElement;\r\n\r\n    resize?(width: number, height: number): void;\r\n\r\n    destroy?(): void;\r\n}\r\n\r\nexport interface SketchConstructor {\r\n    new (renderer: THREE.WebGLRenderer, audioContext: SketchAudioContext): ISketch;\r\n\r\n    id?: string;\r\n}\r\n\r\nexport interface SketchAudioContext extends AudioContext {\r\n    gain: GainNode;\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nimport devlog from \"../../common/devlog\";\r\nimport { SketchAudioContext } from \"../../sketch\";\r\n\r\nfunction sourceElement(assetName: string, type: string) {\r\n    const source = document.createElement(\"source\");\r\n    source.src = `/assets/audio/${assetName}.${type}`;\r\n    source.type = `audio/${type}`;\r\n    return source;\r\n}\r\nfunction makeNodeOfAudioAsset(ctx: SketchAudioContext, assetName: string): Unit {\r\n    const audio = document.createElement(\"audio\");\r\n    audio.autoplay = true;\r\n    audio.loop = true;\r\n    audio.appendChild(sourceElement(assetName, \"ogg\"));\r\n    audio.appendChild(sourceElement(assetName, \"mp3\"));\r\n    audio.appendChild(sourceElement(assetName, \"wav\"));\r\n    const source = ctx.createMediaElementSource(audio);\r\n    const gain = ctx.createGain();\r\n    source.connect(gain);\r\n    return {audio, gain};\r\n}\r\n\r\ninterface Unit {\r\n    gain: GainNode;\r\n    audio: HTMLAudioElement;\r\n}\r\n\r\nexport let mito: Unit;\r\nexport let strings: Unit;\r\nexport let drums: Unit;\r\n\r\nexport let footsteps: Unit;\r\nexport let build: Unit;\r\n\r\nexport let blopBuffer: THREE.AudioBuffer;\r\nexport let suckWaterBuffer: THREE.AudioBuffer;\r\n\r\nexport function hookUpAudio(ctx: SketchAudioContext) {\r\n    let numDone = 0;\r\n    function oneMoreLoaded() {\r\n        numDone++;\r\n        if (numDone === 3) {\r\n            mito.audio.currentTime = 0;\r\n            strings.audio.currentTime = 0;\r\n            drums.audio.currentTime = 0;\r\n            mito.gain.connect(ctx.gain);\r\n            strings.gain.connect(ctx.gain);\r\n            drums.gain.connect(ctx.gain);\r\n        }\r\n    }\r\n    mito = makeNodeOfAudioAsset(ctx, \"mito-base\");\r\n    mito.audio.oncanplaythrough = oneMoreLoaded;\r\n    mito.gain.gain.value = 0.5;\r\n\r\n    strings = makeNodeOfAudioAsset(ctx, \"mito-strings\");\r\n    strings.audio.oncanplaythrough = oneMoreLoaded;\r\n    strings.gain.gain.value = 0.0;\r\n\r\n    drums = makeNodeOfAudioAsset(ctx, \"mito-drums\");\r\n    drums.audio.oncanplaythrough = oneMoreLoaded;\r\n    drums.gain.gain.value = 0.0;\r\n\r\n    footsteps = makeNodeOfAudioAsset(ctx, \"footsteps\");\r\n    footsteps.gain.gain.value = 0;\r\n    footsteps.gain.connect(ctx.gain);\r\n\r\n    build = makeNodeOfAudioAsset(ctx, \"build\");\r\n    build.gain.gain.value = 0;\r\n    build.gain.connect(ctx.gain);\r\n\r\n    const loader = new THREE.AudioLoader();\r\n\r\n    loader.load(\r\n        'assets/audio/Blop-Mark_DiAngelo-79054334.mp3',\r\n        (audioBuffer: THREE.AudioBuffer) => {\r\n            blopBuffer = audioBuffer;\r\n        },\r\n        (xhr: ProgressEvent) => {\r\n            devlog((xhr.loaded / xhr.total * 100) + '% loaded');\r\n        },\r\n        (err: any) => {\r\n            devlog('An error happened');\r\n        },\r\n    );\r\n    loader.load(\r\n        'assets/audio/suckwater.wav',\r\n        (audioBuffer: THREE.AudioBuffer) => {\r\n            suckWaterBuffer = audioBuffer;\r\n        },\r\n        (xhr: ProgressEvent) => {\r\n            devlog((xhr.loaded / xhr.total * 100) + '% loaded');\r\n        },\r\n        (err: any) => {\r\n            devlog('An error happened');\r\n        },\r\n    );\r\n}\r\n","import classnames from \"classnames\";\r\nimport * as React from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nimport { ISketch, SketchAudioContext, SketchConstructor, UI_EVENTS } from \"./sketch\";\r\n\r\nimport { FaVolumeOff, FaVolumeUp } from \"react-icons/fa\";\r\n\r\nexport interface ISketchComponentProps extends React.DOMAttributes<HTMLDivElement> {\r\n    eventsOnBody?: boolean;\r\n    errorElement?: JSX.Element;\r\n    sketchClass: SketchConstructor;\r\n}\r\n\r\nexport interface SketchSuccess {\r\n    type: \"success\";\r\n    sketch: ISketch;\r\n}\r\n\r\nexport interface SketchError {\r\n    type: \"error\";\r\n    error: Error;\r\n}\r\n\r\nexport interface SketchLoading {\r\n    type: \"loading\";\r\n}\r\n\r\nexport type SketchStatus = SketchSuccess | SketchError | SketchLoading;\r\n\r\n// Expects sketch to be setup but not init. SketchSuccessComponent is responsible for:\r\n//      firing resize events\r\n//      attaching ui event listeners\r\n//      keeping focus on the canvas\r\ninterface SketchSuccessComponentProps {\r\n    sketch: ISketch;\r\n    eventsOnBody?: boolean;\r\n}\r\nclass SketchSuccessComponent extends React.Component<SketchSuccessComponentProps, {frameCount: number}> {\r\n    private frameId?: number;\r\n    private lastTimestamp = 0;\r\n    constructor(props: SketchSuccessComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            frameCount: props.sketch.frameCount,\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateRendererCanvasToMatchParent(this.props.sketch.renderer);\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n\r\n        // canvas setup\r\n        const canvas = this.props.sketch.renderer.domElement;\r\n        canvas.tabIndex = 1;\r\n        (Object.keys(UI_EVENTS) as Array<keyof typeof UI_EVENTS>).forEach((eventName) => {\r\n            if (this.props.sketch.events != null) {\r\n                const callback = this.props.sketch.events[eventName] as EventListener;\r\n                if (callback != null) {\r\n                    if (this.props.eventsOnBody) {\r\n                        document.body.addEventListener(eventName, callback);\r\n                    } else {\r\n                        canvas.addEventListener(eventName, callback);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // prevent scrolling the viewport\r\n        // $canvas.on(\"touchmove\", (event) => {\r\n        //     event.preventDefault();\r\n        // });\r\n\r\n        // TODO handle errors here\r\n        this.props.sketch.init();\r\n        this.frameId = requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    render() {\r\n        const sketchElementsWithKey: React.ReactElement[] = [];\r\n        if (this.props.sketch.render != null) {\r\n            sketchElementsWithKey.push(this.props.sketch.render());\r\n        }\r\n        if (this.props.sketch.elements != null) {\r\n            sketchElementsWithKey.push(...this.props.sketch.elements);\r\n        }\r\n        return (\r\n            <div className=\"sketch-elements\">\r\n                {sketchElementsWithKey.map((el, idx) => React.cloneElement(el, { key: idx }))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.props.sketch.destroy) {\r\n            this.props.sketch.destroy();\r\n        }\r\n        if (this.frameId != null) {\r\n            cancelAnimationFrame(this.frameId);\r\n        }\r\n        this.props.sketch.renderer.dispose();\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n\r\n        const canvas = this.props.sketch.canvas;\r\n        (Object.keys(UI_EVENTS) as Array<keyof typeof UI_EVENTS>).forEach((eventName) => {\r\n            if (this.props.sketch.events != null) {\r\n                const callback = this.props.sketch.events[eventName] as EventListener;\r\n                if (callback != null) {\r\n                    if (this.props.eventsOnBody) {\r\n                        document.body.removeEventListener(eventName, callback);\r\n                    } else {\r\n                        canvas.removeEventListener(eventName, callback);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private loop = (timestamp: number) => {\r\n        const millisElapsed = timestamp - this.lastTimestamp;\r\n        this.lastTimestamp = timestamp;\r\n        this.props.sketch.frameCount++;\r\n        this.props.sketch.timeElapsed = timestamp;\r\n        try {\r\n            this.props.sketch.animate(millisElapsed);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n        // force new render()\r\n        this.setState({\r\n            frameCount: this.props.sketch.frameCount,\r\n        });\r\n        this.frameId = requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    private handleWindowResize = () => {\r\n        const { renderer } = this.props.sketch;\r\n        this.updateRendererCanvasToMatchParent(renderer);\r\n        if (this.props.sketch.resize != null) {\r\n            this.props.sketch.resize(renderer.domElement.width, renderer.domElement.height);\r\n        }\r\n    }\r\n\r\n    private updateRendererCanvasToMatchParent(renderer: THREE.WebGLRenderer) {\r\n        const parent = renderer.domElement.parentElement;\r\n        if (parent != null) {\r\n            renderer.setSize(parent.clientWidth, parent.clientHeight);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ISketchComponentState {\r\n    status: SketchStatus;\r\n    volumeEnabled: boolean;\r\n}\r\n\r\nexport class SketchComponent extends React.Component<ISketchComponentProps, ISketchComponentState> {\r\n    public state: ISketchComponentState = {\r\n        status: { type: \"loading\" },\r\n        volumeEnabled: JSON.parse(window.localStorage.getItem(\"sketch-volumeEnabled\") || \"true\"),\r\n    };\r\n\r\n    // private renderer?: THREE.WebGLRenderer;\r\n    private audioContext?: SketchAudioContext;\r\n    private userVolume?: GainNode;\r\n\r\n    private handleContainerRef = (ref: HTMLDivElement | null) => {\r\n        if (ref != null) {\r\n            try {\r\n                // create dependencies, setup sketch, and move to success state\r\n                // we are responsible for live-updating the global user volume.\r\n                const AudioContextConstructor: typeof AudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\r\n                const audioContext = this.audioContext = new AudioContextConstructor() as SketchAudioContext;\r\n                (THREE.AudioContext as any).setContext(audioContext);\r\n                this.userVolume = audioContext.createGain();\r\n                this.userVolume.gain.setValueAtTime(0.8, 0);\r\n                this.userVolume.connect(audioContext.destination);\r\n                const audioContextGain = audioContext.gain = audioContext.createGain();\r\n                audioContextGain.connect(this.userVolume);\r\n                document.addEventListener(\"visibilitychange\", this.handleVisibilityChange);\r\n\r\n                const renderer = new THREE.WebGLRenderer({ alpha: true, preserveDrawingBuffer: true, antialias: true });\r\n                ref.appendChild(renderer.domElement);\r\n\r\n                const sketch = new (this.props.sketchClass)(renderer, this.audioContext);\r\n                this.setState({status: { type: \"success\", sketch: sketch }});\r\n            } catch (e) {\r\n                this.setState({ status: { type: \"error\", error: e }});\r\n                console.error(e);\r\n            }\r\n        } else {\r\n            document.removeEventListener(\"visibilitychange\", this.handleVisibilityChange);\r\n            if (this.audioContext != null) {\r\n                this.audioContext.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.userVolume != null && this.audioContext != null) {\r\n            // this.userVolume.gain.value = this.state.volumeEnabled ? 1 : 0;\r\n            if (this.state.volumeEnabled && this.audioContext.state === \"suspended\") {\r\n                this.audioContext.resume();\r\n            } else if (!this.state.volumeEnabled && this.audioContext.state === \"running\") {\r\n                this.audioContext.suspend();\r\n            }\r\n        }\r\n\r\n        const { sketchClass, ...containerProps } = this.props;\r\n        const className = classnames(\"sketch-component\", this.state.status.type);\r\n        return (\r\n            <div {...containerProps} id={this.props.sketchClass.id} className={className} ref={this.handleContainerRef}>\r\n                {this.renderSketchOrStatus()}\r\n                {this.renderVolumeButton()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderSketchOrStatus() {\r\n        const { status } = this.state;\r\n        if (status.type === \"success\") {\r\n            // key on id to not destroy and re-create the component somehow\r\n            return <SketchSuccessComponent key={this.props.sketchClass.id} sketch={status.sketch} eventsOnBody={this.props.eventsOnBody} />;\r\n        } else if (status.type === \"error\") {\r\n            const errorElement = this.props.errorElement || this.renderDefaultErrorElement(status.error.message);\r\n            return errorElement;\r\n        } else if (status.type === \"loading\") {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private renderDefaultErrorElement(message: string) {\r\n        return (\r\n            <p className=\"sketch-error\">\r\n                Oops - something went wrong! Make sure you're using Chrome, or are on your desktop.\r\n                <pre>{message}</pre>\r\n            </p>\r\n        );\r\n    }\r\n\r\n    private renderVolumeButton() {\r\n        const { volumeEnabled } = this.state;\r\n        return (\r\n            <button className=\"user-volume\" onClick={this.handleVolumeButtonClick}>\r\n                { volumeEnabled ? <FaVolumeUp /> : <FaVolumeOff /> }\r\n            </button>\r\n        );\r\n    }\r\n\r\n    private handleVolumeButtonClick = () => {\r\n        const volumeEnabled = !this.state.volumeEnabled;\r\n        this.setState({ volumeEnabled });\r\n        window.localStorage.setItem(\"sketch-volumeEnabled\", JSON.stringify(volumeEnabled));\r\n    }\r\n\r\n    private handleVisibilityChange = () => {\r\n        if (this.audioContext != null) {\r\n            if (document.hidden) {\r\n                this.audioContext.suspend();\r\n            } else if (this.state.volumeEnabled) {\r\n                this.audioContext.resume();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import classnames from \"classnames\";\r\nimport { parse } from \"query-string\";\r\nimport * as React from \"react\";\r\n\r\nimport { SketchConstructor } from \"./sketch\";\r\nimport { SketchComponent } from \"./sketchComponent\";\r\n\r\nexport interface ISketchRouteProps {\r\n    sketchClass: SketchConstructor;\r\n\r\n    isKiosk?: boolean;\r\n}\r\n\r\nexport class FullPageSketch extends React.Component<ISketchRouteProps, {}> {\r\n    public render() {\r\n        const { isKiosk } = this.props;\r\n        const isPresentationMode = !!parse(window.location.search).presentationMode;\r\n        const classes = classnames(\"full-page-sketch\", { \"presentation-mode\": isPresentationMode, \"kiosk-mode\": isKiosk });\r\n        return (\r\n            <div className={classes} ref={this.handleDivRef}>\r\n                <SketchComponent sketchClass={this.props.sketchClass} />\r\n            </div>\r\n        );\r\n    }\r\n    private handleDivRef = (div: HTMLDivElement | null) => {\r\n        if (div != null) {\r\n            // this.requestFullscreen(div);\r\n        } else {\r\n            this.exitFullscreen();\r\n        }\r\n    }\r\n\r\n\r\n    private exitFullscreen() {\r\n        if (document.webkitExitFullscreen) {\r\n            document.webkitExitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        }\r\n    }\r\n}\r\n","export function lerp(a: number, b: number, x: number) {\r\n    return a + (b - a) * x;\r\n}\r\n\r\nexport function map(x: number, xStart: number, xStop: number, yStart: number, yStop: number) {\r\n    return lerp(yStart, yStop, (x - xStart) / (xStop - xStart));\r\n}\r\n\r\nexport function sampleArray<T>(a: T[]) {\r\n    return a[Math.floor(Math.random() * a.length)];\r\n}\r\n\r\nexport function triangleWaveApprox(t: number) {\r\n    return 8 / (Math.PI * Math.PI) * (Math.sin(t) - (1 / 9) * Math.sin(3 * t) + (1 / 25) * Math.sin(5 * t));\r\n}\r\n\r\n// mod account for negatives\r\nexport function mod(t: number, m: number) {\r\n    return ((t % m) + m) % m;\r\n}\r\n\r\n// perfect triangle wave that goes from [0, 1, 0] in x = [0, 1, 2]\r\nexport function mirroredRepeat(x: number) {\r\n  return (1. - (Math.abs(mod(x * 2., 4.) - 2.) - 1.)) / 2.;\r\n}\r\n\r\nexport function logistic(x: number) {\r\n    if (x < -6) {\r\n        return 0;\r\n    } else if (x > 6) {\r\n        return 1;\r\n    }\r\n    return 1 / (1 + Math.exp(-x));\r\n}\r\n","import { EventEmitter } from \"events\";\r\nimport { Vector2 } from \"three\";\r\n\r\n// floating point rounding error fix\r\n// without: 0.8 - 0.1 = 0.7000000000000001\r\n// with: fpref(0.8 - 0.1) = 0.7\r\nfunction fpref(x: number) {\r\n    return Math.round(x * 1e12) / 1e12;\r\n}\r\n\r\ninterface HasPosition {\r\n    pos: Vector2;\r\n}\r\n\r\nexport class Inventory {\r\n    constructor(\r\n        public capacity: number,\r\n        public carrier: HasPosition,\r\n        public water: number = 0,\r\n        public sugar: number = 0,\r\n    ) {\r\n        this.validate();\r\n    }\r\n\r\n    // public exchange(other: Inventory, giveWater: number, giveSugar: number, getWater: number, getSugar: number) {\r\n    //     giveWater = Math.min(giveWater, this.water);\r\n    //     giveSugar = Math.min(giveSugar, this.sugar);\r\n    //     getWater = Math.min(getWater, other.water);\r\n    //     getSugar = Math.min(getWater, other.sugar);\r\n\r\n    //     // positive = give this amount\r\n    //     // negative = other gives this amount\r\n    //     const wantedExchangedWater = giveWater - getWater;\r\n    //     const wantedExchangedSugar = giveSugar - getSugar;\r\n\r\n    //     const mySpace = fpref(this.space() + wantedExchangedSugar + wantedExchangedWater);\r\n    //     const otherSpace = fpref(other.space() - wantedExchangedSugar - wantedExchangedWater);\r\n\r\n    //     // const mySpace = fpref(this.capacity + giveWater + giveSugar - this.water - this.sugar);\r\n\r\n    //     // const otherSpace = fpref(other.capacity - other.water - other.sugar)\r\n\r\n    //     // const mySpaceNeeded = fpref(getWater + getSugar);\r\n    //     // const otherSpaceNeeded = fpref(giveWater + giveSugar);\r\n\r\n    //     // if (mySpace < mySpaceNeeded) {\r\n    //     //     // e.g. space = 2, needed = 4\r\n    //     //     // only get half\r\n    //     //     const weightedRatio = mySpace / mySpaceNeeded;\r\n    //     //     getWater = getWater * mySpace / mySpaceNeeded;\r\n    //     //     getSugar = getSugar * mySpace / mySpaceNeeded;\r\n    //     // }\r\n\r\n    //     // if (otherSpace < otherSpaceNeeded) {\r\n    //     //     giveWater = giveWater / otherSpace;\r\n    //     //     giveSugar = giveSugar / otherSpace;\r\n    //     // }\r\n    // }\r\n\r\n    public give(other: Inventory, amountWater: number, amountSugar: number) {\r\n        if (other === this) {\r\n            throw new Error(\"shouldn't give to self\");\r\n        }\r\n        // to check:\r\n        // 1) we have enough water and sugar\r\n        //      if we don't, cap water and sugar to the amount available\r\n        // 2) other has enough space\r\n        //      if it doesn't, scale down to the amount that is available\r\n        let water = Math.min(amountWater, this.water);\r\n        let sugar = Math.min(amountSugar, this.sugar);\r\n        const spaceNeeded = fpref(water + sugar);\r\n        const spaceAvailable = other.space();\r\n        if (spaceNeeded > spaceAvailable) {\r\n            // scale down the amount to give\r\n            // give less than capacity\r\n            water = Math.floor(water / spaceNeeded * spaceAvailable);\r\n            sugar = Math.floor(sugar / spaceNeeded * spaceAvailable);\r\n        }\r\n        this.change(-water, -sugar);\r\n        other.change(water, sugar);\r\n        if (this.events) {\r\n            this.events.emit(\"give\", other, water, sugar);\r\n        }\r\n        if (other.events) {\r\n            other.events.emit(\"get\", this, water, sugar);\r\n        }\r\n        return {water, sugar};\r\n    }\r\n\r\n    private events?: EventEmitter;\r\n    public on(name: \"give\" | \"get\", fn: (other: Inventory, water: number, sugar: number) => void) {\r\n        this.events = this.events || new EventEmitter();\r\n        this.events.on(name, fn);\r\n    }\r\n\r\n    public add(water: number, sugar: number) {\r\n        const spaceNeeded = fpref(water + sugar);\r\n        const spaceAvailable = this.space();\r\n        if (spaceNeeded > spaceAvailable) {\r\n            // scale down the amount to give\r\n            water = water / spaceNeeded * spaceAvailable;\r\n            sugar = sugar / spaceNeeded * spaceAvailable;\r\n        }\r\n        this.change(water, sugar);\r\n    }\r\n\r\n    private change(water: number, sugar: number) {\r\n        const newWater = fpref(this.water + water);\r\n        const newSugar = fpref(this.sugar + sugar);\r\n        this.validate(newWater, newSugar);\r\n        this.water = newWater;\r\n        this.sugar = newSugar;\r\n\r\n        // fixup if needed\r\n        if (this.water < 0) { this.water = 0; }\r\n        if (this.sugar < 0) { this.sugar = 0; }\r\n        if (this.water + this.sugar > this.capacity) {\r\n            if (this.water > this.sugar) {\r\n                this.water = this.capacity - this.sugar;\r\n            } else {\r\n                this.sugar = this.capacity - this.water;\r\n            }\r\n        }\r\n    }\r\n\r\n    public space() {\r\n        const { capacity, water, sugar } = this;\r\n        return fpref(capacity - water - sugar);\r\n    }\r\n\r\n    validate(water: number = this.water, sugar: number = this.sugar) {\r\n        const { capacity } = this;\r\n        if (water < 0) {\r\n            console.warn(`water < 0: ${water}`);\r\n            // throw new Error(`water < 0: ${water}`);\r\n        }\r\n        if (sugar < 0) {\r\n            console.warn(`sugar < 0: ${sugar}`);\r\n            // throw new Error(`sugar < 0: ${sugar}`);\r\n        }\r\n        if (water + sugar > capacity) {\r\n            console.warn(`bad inventory: ${water} water + ${sugar} > ${capacity} max`);\r\n            // throw new Error(`bad inventory: ${water} water + ${sugar} > ${capacity} max`);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface HasInventory {\r\n    inventory: Inventory;\r\n}\r\n\r\nexport function hasInventory<T>(obj?: T): obj is (HasInventory & T) {\r\n    return obj != null && ((obj as any).inventory instanceof Inventory);\r\n}\r\n","import { Vector2 } from \"three\";\r\n\r\nexport const DIRECTIONS = {\r\n    nw: new Vector2(-1, -1),\r\n    w : new Vector2(-1,  0),\r\n    sw: new Vector2(-1, +1),\r\n    n : new Vector2( 0, -1),\r\n    // new Vector2( 0,  0),\r\n    s : new Vector2( 0, +1),\r\n    ne: new Vector2(+1, -1),\r\n    e : new Vector2(+1,  0),\r\n    se: new Vector2(+1, +1),\r\n};\r\n\r\nexport type Directions = keyof typeof DIRECTIONS;\r\n\r\nexport const DIRECTION_NAMES = Object.keys(DIRECTIONS) as Directions[];\r\nexport const DIRECTION_VALUES: Vector2[] = DIRECTION_NAMES.map((o) => DIRECTIONS[o]);\r\n","// copy-pasted from https://raw.githubusercontent.com/josephg/noisejs/master/perlin.js\r\n// tslint:disable\r\n\r\n/*\r\n * A speed-improved perlin and simplex noise algorithms for 2D.\r\n *\r\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\r\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\r\n * Better rank ordering method by Stefan Gustavson in 2012.\r\n * Converted to Javascript by Joseph Gentle.\r\n *\r\n * Version 2012-03-09\r\n *\r\n * This code was placed in the public domain by its original author,\r\n * Stefan Gustavson. You may use it as you see fit, but\r\n * attribution is appreciated.\r\n *\r\n */\r\n\r\nclass Grad {\r\n    constructor(public x: number, public y: number, public z: number) {}\r\n\r\n    dot2(x: number, y: number) {\r\n        return this.x * x + this.y * y;\r\n    }\r\n\r\n    dot3(x: number, y: number, z: number) {\r\n        return this.x * x + this.y * y + this.z * z;\r\n    }\r\n}\r\n\r\nconst grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\r\nnew Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\r\nnew Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\r\n\r\nconst p = [151, 160, 137, 91, 90, 15,\r\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\r\n\r\n/*\r\nfor(const i=0; i<256; i++) {\r\nperm[i] = perm[i + 256] = p[i];\r\ngradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\r\n}*/\r\n\r\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\r\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\r\nconst G2 = (3 - Math.sqrt(3)) / 6;\r\n\r\nconst F3 = 1 / 3;\r\nconst G3 = 1 / 6;\r\n\r\nexport class Noise {\r\n    // To remove the need for index wrapping, double the permutation table length\r\n    public perm = new Array(512);\r\n    public gradP = new Array(512);\r\n\r\n    public octaveNum = 6;\r\n    public octaveFalloff = 0.5;\r\n    // rotate by 1 radians (~57 deg), scale by 2\r\n    public octaveMatrix2 = [\r\n        Math.cos(1) * 2, -Math.sin(1) * 2,\r\n        Math.sin(1) * 2,  Math.cos(1) * 2,\r\n    ];\r\n\r\n    // This isn't a very good seeding function, but it works ok. It supports 2^16\r\n    // different seed values. Write something better if you need more seeds.\r\n    public seed(seed: number) {\r\n        if (seed > 0 && seed < 1) {\r\n            // Scale the seed out\r\n            seed *= 65536;\r\n        }\r\n\r\n        seed = Math.floor(seed);\r\n        if (seed < 256) {\r\n            seed |= seed << 8;\r\n        }\r\n\r\n        for (let i = 0; i < 256; i++) {\r\n            let v;\r\n            if (i & 1) {\r\n                v = p[i] ^ (seed & 255);\r\n            } else {\r\n                v = p[i] ^ ((seed >> 8) & 255);\r\n            }\r\n\r\n            this.perm[i] = this.perm[i + 256] = v;\r\n            this.gradP[i] = this.gradP[i + 256] = grad3[v % 12];\r\n        }\r\n    };\r\n\r\n    constructor(seed: number = Math.random() * 2147483647) {\r\n        this.seed(seed);\r\n    }\r\n\r\n    // 2D simplex noise\r\n    public simplex2(xin: number, yin: number) {\r\n        let n0, n1, n2; // Noise contributions from the three corners\r\n        // Skew the input space to determine which simplex cell we're in\r\n        const s = (xin + yin) * F2; // Hairy factor for 2D\r\n        let i = Math.floor(xin + s);\r\n        let j = Math.floor(yin + s);\r\n        const t = (i + j) * G2;\r\n        let x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n        let y0 = yin - j + t;\r\n        // For the 2D case, the simplex shape is an equilateral triangle.\r\n        // Determine which simplex we are in.\r\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\r\n        if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\r\n            i1 = 1; j1 = 0;\r\n        } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\r\n            i1 = 0; j1 = 1;\r\n        }\r\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\r\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\r\n        // c = (3-sqrt(3))/6\r\n        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\r\n        const y1 = y0 - j1 + G2;\r\n        const x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\r\n        const y2 = y0 - 1 + 2 * G2;\r\n        // Work out the hashed gradient indices of the three simplex corners\r\n        i &= 255;\r\n        j &= 255;\r\n        const gi0 = this.gradP[i + this.perm[j]];\r\n        const gi1 = this.gradP[i + i1 + this.perm[j + j1]];\r\n        const gi2 = this.gradP[i + 1 + this.perm[j + 1]];\r\n        // Calculate the contribution from the three corners\r\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\r\n        if (t0 < 0) {\r\n            n0 = 0;\r\n        } else {\r\n            t0 *= t0;\r\n            n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\r\n        }\r\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\r\n        if (t1 < 0) {\r\n            n1 = 0;\r\n        } else {\r\n            t1 *= t1;\r\n            n1 = t1 * t1 * gi1.dot2(x1, y1);\r\n        }\r\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\r\n        if (t2 < 0) {\r\n            n2 = 0;\r\n        } else {\r\n            t2 *= t2;\r\n            n2 = t2 * t2 * gi2.dot2(x2, y2);\r\n        }\r\n        // Add contributions from each corner to get the final noise value.\r\n        // The result is scaled to return values in the interval [-1,1].\r\n        return 70 * (n0 + n1 + n2);\r\n    };\r\n\r\n    public octaveSimplex2(xin: number, yin: number, octaveNum = this.octaveNum, octaveFalloff = this.octaveFalloff) {\r\n        let sum = 0;\r\n        let x = xin;\r\n        let y = yin;\r\n        let scalar = 1;\r\n        for (let i = 0; i < octaveNum; i++) {\r\n            sum += this.simplex2(x, y) * scalar;\r\n            const newX = x * this.octaveMatrix2[0] + y * this.octaveMatrix2[1];\r\n            const newY = x * this.octaveMatrix2[2] + y * this.octaveMatrix2[3];\r\n            x = newX;\r\n            y = newY;\r\n            scalar *= octaveFalloff;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    // 3D simplex noise\r\n    public simplex3(xin: number, yin: number, zin: number) {\r\n        let n0, n1, n2, n3; // Noise contributions from the four corners\r\n\r\n        // Skew the input space to determine which simplex cell we're in\r\n        const s = (xin + yin + zin) * F3; // Hairy factor for 2D\r\n        let i = Math.floor(xin + s);\r\n        let j = Math.floor(yin + s);\r\n        let k = Math.floor(zin + s);\r\n\r\n        const t = (i + j + k) * G3;\r\n        const x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\r\n        const y0 = yin - j + t;\r\n        const z0 = zin - k + t;\r\n\r\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\r\n        // Determine which simplex we are in.\r\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\r\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\r\n        if (x0 >= y0) {\r\n            if (y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\r\n            else if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }\r\n            else { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }\r\n        } else {\r\n            if (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }\r\n            else if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }\r\n            else { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\r\n        }\r\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\r\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\r\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\r\n        // c = 1/6.\r\n        const x1 = x0 - i1 + G3; // Offsets for second corner\r\n        const y1 = y0 - j1 + G3;\r\n        const z1 = z0 - k1 + G3;\r\n\r\n        let x2 = x0 - i2 + 2 * G3; // Offsets for third corner\r\n        let y2 = y0 - j2 + 2 * G3;\r\n        let z2 = z0 - k2 + 2 * G3;\r\n\r\n        let x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\r\n        let y3 = y0 - 1 + 3 * G3;\r\n        let z3 = z0 - 1 + 3 * G3;\r\n\r\n        // Work out the hashed gradient indices of the four simplex corners\r\n        i &= 255;\r\n        j &= 255;\r\n        k &= 255;\r\n        const { gradP, perm } = this;\r\n        let gi0 = gradP[i + perm[j + perm[k]]];\r\n        let gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\r\n        let gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\r\n        let gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\r\n\r\n        // Calculate the contribution from the four corners\r\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\r\n        if (t0 < 0) {\r\n            n0 = 0;\r\n        } else {\r\n            t0 *= t0;\r\n            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\r\n        }\r\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\r\n        if (t1 < 0) {\r\n            n1 = 0;\r\n        } else {\r\n            t1 *= t1;\r\n            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\r\n        }\r\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\r\n        if (t2 < 0) {\r\n            n2 = 0;\r\n        } else {\r\n            t2 *= t2;\r\n            n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\r\n        }\r\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\r\n        if (t3 < 0) {\r\n            n3 = 0;\r\n        } else {\r\n            t3 *= t3;\r\n            n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\r\n        }\r\n        // Add contributions from each corner to get the final noise value.\r\n        // The result is scaled to return values in the interval [-1,1].\r\n        return 32 * (n0 + n1 + n2 + n3);\r\n\r\n    };\r\n\r\n    public octaveSimplex3(xin: number, yin: number, zin: number, octaveNum = this.octaveNum, octaveFalloff = this.octaveFalloff) {\r\n        let sum = 0;\r\n        let x = xin;\r\n        let y = yin;\r\n        let z = zin;\r\n        let scalar = 1;\r\n        for (let i = 0; i < octaveNum; i++) {\r\n            sum += this.simplex3(x, y, z) * scalar;\r\n            x *= 2;\r\n            y *= 2;\r\n            z *= 2;\r\n            scalar *= octaveFalloff;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n\r\n    // ##### Perlin noise stuff\r\n\r\n    public fade(t: number) {\r\n        return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n\r\n    public lerp(a: number, b: number, t: number) {\r\n        return (1 - t) * a + t * b;\r\n    }\r\n\r\n    // 2D Perlin Noise\r\n    public perlin2(x: number, y: number) {\r\n        // Find unit grid cell containing point\r\n        let X = Math.floor(x), Y = Math.floor(y);\r\n        // Get relative xy coordinates of point within that cell\r\n        x = x - X; y = y - Y;\r\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n        X = X & 255; Y = Y & 255;\r\n\r\n        const { gradP, perm } = this;\r\n        // Calculate noise contributions from each of the four corners\r\n        let n00 = gradP[X + perm[Y]].dot2(x, y);\r\n        let n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\r\n        let n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\r\n        let n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\r\n\r\n        // Compute the fade curve value for x\r\n        let u = this.fade(x);\r\n\r\n        // Interpolate the four results\r\n        return this.lerp(\r\n            this.lerp(n00, n10, u),\r\n            this.lerp(n01, n11, u),\r\n            this.fade(y));\r\n    };\r\n\r\n    // 3D Perlin Noise\r\n    public perlin3(x: number, y: number, z: number) {\r\n        const { gradP, perm } = this;\r\n        // Find unit grid cell containing point\r\n        let X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\r\n        // Get relative xyz coordinates of point within that cell\r\n        x = x - X; y = y - Y; z = z - Z;\r\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\r\n        X = X & 255; Y = Y & 255; Z = Z & 255;\r\n\r\n        // Calculate noise contributions from each of the eight corners\r\n        let n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\r\n        let n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\r\n        let n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\r\n        let n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\r\n        let n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\r\n        let n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\r\n        let n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\r\n        let n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\r\n\r\n        // Compute the fade curve value for x, y, z\r\n        let u = this.fade(x);\r\n        let v = this.fade(y);\r\n        let w = this.fade(z);\r\n\r\n        // Interpolate\r\n        return this.lerp(\r\n            this.lerp(\r\n                this.lerp(n000, n100, u),\r\n                this.lerp(n001, n101, u), w),\r\n            this.lerp(\r\n                this.lerp(n010, n110, u),\r\n                this.lerp(n011, n111, u), w),\r\n            v);\r\n    };\r\n}\r\n","import { ALL_ENVIRONMENTS } from \"./game/environment\";\r\n\r\nconst PARAMS_DEFAULT = {\r\n    isRealtime: true,\r\n    environment: \"Temperate\" as keyof typeof ALL_ENVIRONMENTS,\r\n    cellEnergyMax: 20000,\r\n    tissueInventoryCapacity: 10,\r\n    rootTurnsPerTransfer: 20,\r\n    leafReactionRate: 0.015,\r\n    leafSugarPerReaction: 1,\r\n    cellGestationTurns: 0,\r\n    cellDiffusionWater: 0.0,\r\n    cellDiffusionSugar: 0.0,\r\n    soilDarknessBase: 0.2,\r\n    soilDiffusionType: \"discrete\",\r\n    soilDiffusionWater: 0.001,\r\n    veinDiffusion: 0.5,\r\n    soilMaxWater: 20,\r\n    droop: 0.03,\r\n    fountainTurnsPerWater: 11,\r\n    fountainAppearanceRate: 1.5,\r\n    transportTurnsPerMove: 5,\r\n    sunlightReintroduction: 0.15,\r\n    sunlightDiffusion: 0.0,\r\n    maxResources: 100,\r\n};\r\n\r\ntype Params = typeof PARAMS_DEFAULT;\r\n\r\nexport const params = { ...PARAMS_DEFAULT };\r\n\r\nif (window.location.hash.length > 0) {\r\n    const urlHashParams: object = JSON.parse(decodeURI(window.location.hash.substr(1)));\r\n    Object.assign(params, urlHashParams);\r\n}\r\n\r\nexport function updateParamsHash() {\r\n    const nonDefaultParams: Partial<Params> = {};\r\n    const keys = Object.keys(PARAMS_DEFAULT) as Array<keyof Params>;\r\n    for (const key of keys) {\r\n        const k = params[key];\r\n        if (k !== PARAMS_DEFAULT[key]) {\r\n            nonDefaultParams[key] = k;\r\n        }\r\n    }\r\n    if (Object.keys(nonDefaultParams).length > 0) {\r\n        window.location.hash = encodeURI(JSON.stringify(nonDefaultParams));\r\n    } else {\r\n        window.location.hash = \"\";\r\n    }\r\n}\r\nupdateParamsHash();\r\n","import { Vector2 } from \"three\";\r\n\r\nimport { Noise } from \"../../../common/perlin\";\r\nimport { map } from \"../../../math/index\";\r\nimport { Constructor } from \"../constructor\";\r\nimport { DIRECTIONS } from \"../directions\";\r\nimport { height, width } from \"../index\";\r\nimport { hasInventory, HasInventory, Inventory } from \"../inventory\";\r\nimport { params } from \"../params\";\r\nimport { World } from \"./world\";\r\n\r\nexport interface HasEnergy {\r\n    energy: number;\r\n}\r\n\r\nexport function hasEnergy<T>(e: T): e is HasEnergy & T {\r\n    return typeof (e as any).energy === \"number\";\r\n}\r\n\r\nexport abstract class Tile {\r\n    static displayName = \"Tile\";\r\n    static fallAmount = 0;\r\n    public isObstacle = false;\r\n    public darkness = Infinity;\r\n    get diffusionWater(): number {\r\n        return (this.constructor as any).diffusionWater;\r\n    }\r\n\r\n    get diffusionSugar(): number {\r\n        return (this.constructor as any).diffusionSugar;\r\n    }\r\n\r\n    get fallAmount(): number {\r\n        return (this.constructor as any).fallAmount;\r\n    }\r\n\r\n    public pos: Vector2;\r\n    public constructor(pos: Vector2, public world: World) {\r\n        this.pos = pos.clone();\r\n        if (world == null) {\r\n            throw new Error(\"null world!\");\r\n        }\r\n    }\r\n\r\n    public lightAmount() {\r\n        return Math.sqrt(Math.min(Math.max(map(1 - this.darkness, 0, 1, 0, 1), 0), 1));\r\n    }\r\n\r\n    // test tiles diffusing water around on same-type tiles\r\n    public step() {\r\n        const neighbors = this.world.tileNeighbors(this.pos);\r\n        this.stepDarkness(neighbors);\r\n        this.stepDiffusion(neighbors);\r\n        this.stepGravity();\r\n    }\r\n\r\n    stepDarkness(neighbors: Map<Vector2, Tile>) {\r\n        if (this instanceof Cell) {\r\n            this.darkness = 0;\r\n        } else {\r\n            let minDarkness = this.darkness;\r\n            for (const [, t] of neighbors) {\r\n                const contrib = Math.max(0.2, map(this.pos.y, height / 2, height, params.soilDarknessBase, 1));\r\n                const darknessFromNeighbor = t instanceof Rock ? Infinity : t.darkness + contrib;\r\n                if (t instanceof Cell) {\r\n                    minDarkness = 0;\r\n                } else {\r\n                    minDarkness = Math.min(minDarkness, darknessFromNeighbor);\r\n                }\r\n            };\r\n            this.darkness = minDarkness;\r\n            const cellHere = this.world.cellAt(this.pos.x, this.pos.y) != null;\r\n            if (cellHere) {\r\n                console.error(\"stepping environmental tile even when a cell is on-top:\", cellHere);\r\n            }\r\n        }\r\n    }\r\n\r\n    stepDiffusion(neighbors: Map<Vector2, Tile>) {\r\n        if (hasInventory(this)) {\r\n            for (const [dir, tile] of neighbors) {\r\n                if (!this.canDiffuse(dir, tile)) {\r\n                    continue;\r\n                }\r\n                // take water from neighbors that have more water than you\r\n                if (this.diffusionWater != null) {\r\n                    if (tile.inventory.water > this.inventory.water) {\r\n                        this.diffuseWater(tile);\r\n                    }\r\n                }\r\n                if (this.diffusionSugar != null) {\r\n                    if (tile.inventory.sugar > this.inventory.sugar) {\r\n                        this.diffuseSugar(tile);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    canDiffuse(_dir: Vector2, tile: Tile): tile is Tile & HasInventory {\r\n        return canPullResources(this, tile);\r\n    }\r\n\r\n    diffuseWater(giver: HasInventory) {\r\n        if (hasInventory(this)) {\r\n            if (params.soilDiffusionType === \"continuous\") {\r\n                const diffusionAmount = (giver.inventory.water - this.inventory.water) * this.diffusionWater;\r\n                giver.inventory.give(this.inventory, diffusionAmount, 0);\r\n            } else {\r\n                const waterDiff = giver.inventory.water - this.inventory.water;\r\n                const chanceToHappenScalar = Math.min(waterDiff, 1);\r\n                if (Math.random() < waterDiff * this.diffusionWater * chanceToHappenScalar) {\r\n                    giver.inventory.give(this.inventory, 1, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    diffuseSugar(giver: HasInventory) {\r\n        if (hasInventory(this)) {\r\n            const diffusionAmount = (giver.inventory.sugar - this.inventory.sugar) * this.diffusionSugar;\r\n            giver.inventory.give(this.inventory, 0, diffusionAmount);\r\n        }\r\n    }\r\n\r\n    stepGravity() {\r\n        const fallAmount = this.fallAmount;\r\n        const lowerNeighbor = this.world.tileAt(this.pos.x, this.pos.y + 1);\r\n        if (fallAmount > 0 && this.world.time % Math.floor(1 / fallAmount) < 1) {\r\n            if (hasInventory(lowerNeighbor) && canPullResources(lowerNeighbor, this)) {\r\n                this.inventory.give(lowerNeighbor.inventory, 1, 0);\r\n            }\r\n        }\r\n        // if (hasInventory(lowerNeighbor) && fallAmount > 0 && canPullResources(lowerNeighbor, this)) {\r\n        //     this.inventory.give(lowerNeighbor.inventory,\r\n        //         params.soilDiffusionType === \"continuous\" ? fallAmount : randRound(fallAmount),\r\n        //         0);\r\n        // }\r\n    }\r\n}\r\n\r\nfunction allowPull(receiver: any, recieverType: Constructor<any>, giver: any, giverType: Constructor<any>) {\r\n    return receiver instanceof recieverType && giver instanceof giverType;\r\n}\r\n\r\nfunction canPullResources(receiver: any, giver: any): giver is HasInventory {\r\n    return hasInventory(receiver) && hasInventory(giver) && (\r\n\r\n        // allow ancestors and children to exchange resources with each other (e.g. Soil and Fountain)\r\n        (receiver instanceof giver.constructor || giver instanceof receiver.constructor) ||\r\n\r\n        // allow all Cells to give to each other\r\n        (receiver instanceof Cell && giver instanceof Cell) ||\r\n\r\n        // allow air to give to soil\r\n        allowPull(receiver, Soil, giver, Air)\r\n    );\r\n}\r\n\r\n\r\nconst noiseCo2 = new Noise();\r\nexport class Air extends Tile {\r\n    static displayName = \"Air\";\r\n    static fallAmount = 1;\r\n    static diffusionWater = 0.1;\r\n    public sunlightCached: number = 1;\r\n    public _co2: number;\r\n    public inventory = new Inventory(20, this);\r\n    public constructor(public pos: Vector2, world: World) {\r\n        super(pos, world);\r\n        this.darkness = 0;\r\n        this._co2 = this.computeCo2();\r\n    }\r\n\r\n    private computeCo2() {\r\n        const base = map(this.pos.y, height / 2, 0, this.world.environment.floorCo2, 1.15);\r\n        const scaleX = map(this.pos.y, height / 2, 0, 4, 9);\r\n        // const offset = noiseCo2.perlin3(94.2321 - this.pos.x / scaleX, 3221 - this.pos.y / 2.5, world.time / 5 + 93.1) * 0.2;\r\n        const time = this.world == null ? 0 : this.world.time;\r\n        const offset = noiseCo2.perlin3(94.231 + (this.pos.x - width / 2) / scaleX, 2312 + this.pos.y / 8, time / 1000 + 93.1) * 0.25;\r\n        // don't compute dark/light or water diffusion\r\n        return Math.max(Math.min(base + offset, 1), Math.min(0.4, this.world.environment.floorCo2 * 0.75));\r\n    }\r\n\r\n    public lightAmount() {\r\n        return this.sunlight();\r\n    }\r\n\r\n    step() {\r\n        this.stepGravity();\r\n        this.stepDiffusion(this.world.tileNeighbors(this.pos));\r\n        this._co2 = this.computeCo2();\r\n    }\r\n\r\n    canDiffuse(dir: Vector2, tile: Tile): tile is Tile & HasInventory {\r\n        return dir !== DIRECTIONS.s &&\r\n            dir !== DIRECTIONS.sw &&\r\n            dir !== DIRECTIONS.se &&\r\n            super.canDiffuse(dir, tile);\r\n    }\r\n\r\n    public co2() {\r\n        return this._co2;\r\n    }\r\n\r\n    public sunlight() {\r\n        return this.sunlightCached;\r\n    }\r\n}\r\n\r\nexport class Soil extends Tile implements HasInventory {\r\n    static displayName = \"Soil\";\r\n    static diffusionWater = params.soilDiffusionWater;\r\n    public inventory = new Inventory(params.soilMaxWater, this);\r\n    // static fallAmount = params.waterGravityPerTurn;\r\n    get fallAmount() {\r\n        return this.world.environment.waterGravityPerTurn;\r\n    }\r\n\r\n    constructor(pos: Vector2, water: number = 0, world: World) {\r\n        super(pos, world);\r\n        this.inventory.add(water, 0);\r\n    }\r\n\r\n    step() {\r\n        super.step();\r\n        this.stepEvaporation();\r\n    }\r\n\r\n    stepEvaporation() {\r\n        const { evaporationRate, evaporationBottom } = this.world.environment;\r\n        const evaporationHeightScalar = map(this.pos.y, height / 2, height * evaporationBottom, 1, 0);\r\n        const evaporationAmountScalar = this.inventory.water;\r\n        if (Math.random() < evaporationRate * evaporationHeightScalar * evaporationAmountScalar) {\r\n            this.inventory.add(-1, 0);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Rock extends Tile {\r\n    isObstacle = true;\r\n    static displayName = \"Rock\";\r\n}\r\n\r\nexport class DeadCell extends Tile {\r\n    static displayName = \"Dead Cell\";\r\n}\r\n\r\nexport class Fountain extends Soil {\r\n    static displayName = \"Fountain\";\r\n    isObstacle = true;\r\n    private cooldown = 0;\r\n    constructor(pos: Vector2, water: number = 0, world: World, public turnsPerWater: number) {\r\n        super(pos, water, world);\r\n    }\r\n    step() {\r\n        super.step();\r\n        if (this.cooldown > 0) {\r\n            this.cooldown--;\r\n        }\r\n        if (this.inventory.space() > 1 && this.cooldown <= 0) {\r\n            // just constantly give yourself water\r\n            this.inventory.add(1, 0);\r\n            this.cooldown = this.turnsPerWater;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Cell extends Tile implements HasEnergy {\r\n    static displayName = \"Cell\";\r\n    static diffusionWater = params.cellDiffusionWater;\r\n    static diffusionSugar = params.cellDiffusionSugar;\r\n    static turnsToBuild = params.cellGestationTurns;\r\n    public energy: number = params.cellEnergyMax;\r\n    public darkness = 0;\r\n    // public metabolism: MetabolismState = {\r\n    //     type: \"not-eating\",\r\n    //     duration: 0,\r\n    // };\r\n    // offset [-0.5, 0.5] means you're still \"inside\" this cell, going out of it will break you\r\n    // public offset = new Vector2();\r\n    public droopY = 0;\r\n\r\n    // private stepMetabolism() {\r\n    //     // transition from not eating to eating\r\n    //     if (this.metabolism.type === \"not-eating\") {\r\n    //         // const shouldEat = this.energy < CELL_ENERGY_MAX / 2 && this.metabolism.duration > 25;\r\n    //         const shouldEat = this.energy < CELL_ENERGY_MAX / 2;\r\n    //         if (shouldEat) {\r\n    //             this.metabolism = {\r\n    //                 type: \"eating\",\r\n    //                 duration: 0,\r\n    //             };\r\n    //         }\r\n    //     } else {\r\n    //         const shouldStopEating = this.metabolism.duration > 30;\r\n    //         if (shouldStopEating) {\r\n    //             this.metabolism = {\r\n    //                 type: \"not-eating\",\r\n    //                 duration: 0,\r\n    //             };\r\n    //         }\r\n    //     }\r\n    //     this.metabolism.duration++;\r\n    // }\r\n\r\n    step() {\r\n        super.step();\r\n        this.energy -= 1;\r\n        const tileNeighbors = this.world.tileNeighbors(this.pos);\r\n        const neighbors = Array.from(tileNeighbors.values());\r\n        const neighborsAndSelf = [ ...neighbors, this ];\r\n        // this.stepMetabolism();\r\n        // if (this.metabolism.type === \"eating\") {\r\n        if (true) {\r\n            for (const tile of neighborsAndSelf) {\r\n                if (hasInventory(tile) && !(tile instanceof Fruit)) {\r\n                    if (this.energy < params.cellEnergyMax) {\r\n                        const wantedEnergy = params.cellEnergyMax - this.energy;\r\n                        const wantedSugar = Math.min(\r\n                            wantedEnergy / params.cellEnergyMax,\r\n                            tile.inventory.sugar,\r\n                        );\r\n                        tile.inventory.add(0, -wantedSugar);\r\n                        const gotEnergy = wantedSugar * params.cellEnergyMax;\r\n                        this.energy += gotEnergy;\r\n                        // if (gotEnergy > 0) {\r\n                        //     console.log(`got ${gotEnergy}, now at ${this.energy}`);\r\n                        // }\r\n                    } else {\r\n                        break; // we're all full, eat no more\r\n                    }\r\n                }\r\n            }\r\n            if (this.energy < params.cellEnergyMax) {\r\n                const energeticNeighbors = neighborsAndSelf.filter((t) => hasEnergy(t)) as any as HasEnergy[];\r\n                for (const neighbor of energeticNeighbors) {\r\n                    if (this.energy < params.cellEnergyMax) {\r\n                        let energyTransfer = 0;\r\n                        // // take energy from neighbors who have more than you - this might be unstable w/o double buffering\r\n                        // const targetEnergy = averageEnergy;\r\n                        if (neighbor.energy > this.energy) {\r\n                            // energyTransfer = Math.floor((neighbor.energy - this.energy) / energeticNeighbors.length);\r\n                            energyTransfer = Math.floor((neighbor.energy - this.energy) * 0.25);\r\n                            // if (neighbor.energy - energyTransfer < this.energy + energyTransfer) {\r\n                            //     throw new Error(\"cell energy diffusion: result of transfer gives me more than target\");\r\n                            // }\r\n                            if (neighbor.energy - energyTransfer < 0) {\r\n                                throw new Error(\"cell energy diffusion: taking more energy than available\");\r\n                            }\r\n                            if (this.energy + energyTransfer > params.cellEnergyMax) {\r\n                                throw new Error(\"cell energy diffusion: taking more energy than i can carry\");\r\n                            }\r\n                            // const boundedEnergy = Math.min(wantedEnergy, (neighbor.energy + this.energy) / 2);\r\n                            this.energy += energyTransfer;\r\n                            neighbor.energy -= energyTransfer;\r\n                            // console.log(`transfering ${-energyTransfer} from ${this.energy} to ${neighbor.energy}`);\r\n                        }\r\n                    } else {\r\n                        break; // we're all full, eat no more\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // this.stepStress(tileNeighbors);\r\n        this.stepDroop(tileNeighbors);\r\n        if (this.droopY > 0.5) {\r\n            // make the player ride the train!\r\n            if (this.world.player.pos.equals(this.pos)) {\r\n                this.world.player.pos.y += 1;\r\n            }\r\n            this.world.maybeRemoveCellAt(this.pos);\r\n            if (this.pos.y < height - 1) {\r\n                this.pos.y += 1;\r\n            }\r\n            this.droopY -= 1;\r\n            // lol whatever lets just test it out\r\n            this.world.setTileAt(this.pos, this);\r\n        }\r\n\r\n        if (this.energy <= 0) {\r\n            // die\r\n            this.world.setTileAt(this.pos, new DeadCell(this.pos, this.world));\r\n        }\r\n    }\r\n\r\n    // stepStress(tileNeighbors: Map<Vector2, Tile>) {\r\n    //     // start with +y down for gravity\r\n    //     const totalForce = new Vector2(0, 1);\r\n    //     // pretend like you're spring connected to nearby cells,\r\n    //     // and find the equilibrium position as your offset\r\n    //     for (const [dir, neighbor] of tileNeighbors) {\r\n    //         let springTightness = 0;\r\n    //         // neighbor's world position\r\n    //         let neighborX = neighbor.pos.x,\r\n    //             neighborY = neighbor.pos.y;\r\n    //         if (neighbor instanceof Cell) {\r\n    //             neighborX += neighbor.offset.x;\r\n    //             neighborY += neighbor.offset.y;\r\n    //             springTightness = 0.1;\r\n    //         } else if (neighbor instanceof Rock || neighbor instanceof Soil) {\r\n    //             springTightness = 1;\r\n    //         }\r\n    //         const offX = this.pos.x + this.offset.x - neighborX;\r\n    //         const offY = this.pos.y + this.offset.y - neighborY;\r\n    //         // world offset\r\n    //         const offset = new Vector2(offX, offY);\r\n    //         totalForce.x += offX * springTightness;\r\n    //         totalForce.y += offY * springTightness;\r\n    //     }\r\n\r\n    //     this.offset.x += totalForce.x * 0.01;\r\n    //     this.offset.y += totalForce.y * 0.01;\r\n    // }\r\n\r\n    stepDroop(tileNeighbors: Map<Vector2, Tile>) {\r\n        const below = tileNeighbors.get(DIRECTIONS.s)!;\r\n        const belowLeft = tileNeighbors.get(DIRECTIONS.sw)!;\r\n        const belowRight = tileNeighbors.get(DIRECTIONS.se)!;\r\n\r\n        const left = tileNeighbors.get(DIRECTIONS.w)!;\r\n        const right = tileNeighbors.get(DIRECTIONS.e)!;\r\n\r\n        const above = tileNeighbors.get(DIRECTIONS.n)!;\r\n        const aboveLeft = tileNeighbors.get(DIRECTIONS.nw)!;\r\n        const aboveRight = tileNeighbors.get(DIRECTIONS.ne)!;\r\n\r\n        this.droopY += params.droop;\r\n        if (this.energy < params.cellEnergyMax / 2) {\r\n            this.droopY += params.droop;\r\n        }\r\n\r\n        let hasSupportBelow = false;\r\n        for (const cell of [below, belowLeft, belowRight]) {\r\n            if (cell instanceof Rock || cell instanceof Soil) {\r\n                this.droopY = Math.min(this.droopY, 0);\r\n                return;\r\n            } else if (cell instanceof Cell) {\r\n                this.droopY = Math.min(this.droopY, cell.droopY);\r\n                hasSupportBelow = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        const springNeighborCells = [aboveLeft, above, aboveRight, left, right, this].filter((n) => n instanceof Cell) as Cell[];\r\n\r\n        // special case - if there's no support and nothing below me, just start freefalling\r\n        if (!hasSupportBelow && springNeighborCells.length === 1) {\r\n            this.droopY += 1;\r\n        } else {\r\n            this.droopY = springNeighborCells.reduce((sum, n) => sum + n.droopY, 0) / springNeighborCells.length;\r\n        }\r\n    }\r\n}\r\n\r\nexport class GrowingCell extends Cell {\r\n    public isObstacle = true;\r\n    public timeRemaining: number;\r\n    public timeToBuild: number;\r\n    constructor(pos: Vector2, world: World, public completedCell: Cell) {\r\n        super(pos, world);\r\n        this.timeRemaining = this.timeToBuild = (completedCell.constructor as any).turnsToBuild || 0;\r\n    }\r\n    step() {\r\n        super.step();\r\n        this.timeRemaining--;\r\n        if (this.timeRemaining <= 0) {\r\n            this.world.setTileAt(this.completedCell.pos, this.completedCell);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Tissue extends Cell implements HasInventory {\r\n    static displayName = \"Tissue\";\r\n    public inventory = new Inventory(params.tissueInventoryCapacity, this);\r\n}\r\n\r\ninterface IHasTilePairs {\r\n    tilePairs: Vector2[];\r\n}\r\n\r\nexport function hasTilePairs(t: any): t is IHasTilePairs {\r\n    return t.tilePairs instanceof Array;\r\n}\r\n\r\nexport class Leaf extends Cell {\r\n    static displayName = \"Leaf\";\r\n    public isObstacle = true;\r\n    public averageEfficiency = 0;\r\n    public averageSpeed = 0;\r\n    public didConvert = false;\r\n    public sugarConverted = 0;\r\n    public tilePairs: Vector2[] = []; // implied that the opposite direction is connected\r\n\r\n    public step() {\r\n        super.step();\r\n        this.didConvert = false;\r\n        const neighbors = this.world.tileNeighbors(this.pos);\r\n        this.averageEfficiency = 0;\r\n        this.averageSpeed = 0;\r\n        this.sugarConverted = 0;\r\n        let numAir = 0;\r\n        this.tilePairs = [];\r\n\r\n        for (const [dir, tile] of neighbors) {\r\n            const oppositeTile = this.world.tileAt(this.pos.x - dir.x, this.pos.y - dir.y);\r\n            if (tile instanceof Air &&\r\n                oppositeTile instanceof Tissue) {\r\n                numAir += 1;\r\n                this.tilePairs.push(dir);\r\n                const air = tile;\r\n                const tissue = oppositeTile;\r\n\r\n                // do the reaction slower in dark places\r\n                const speed = air.sunlight();\r\n\r\n                // gives much less sugar lower down\r\n                const efficiency = air.co2();\r\n\r\n                this.averageEfficiency += efficiency;\r\n                this.averageSpeed += speed;\r\n\r\n                // in prime conditions:\r\n                //      our rate of conversion is speed * params.leafReactionRate\r\n                //      we get 1 sugar at 1/efficiencyRatio (> 1) water\r\n                // if we have less than 1/efficiencyRatio water\r\n                //      our rate of conversion scales down proportionally\r\n                //      on conversion, we use up all the available water and get the corresponding amount of sugar\r\n                const bestEfficiencyWater = params.leafSugarPerReaction / efficiency;\r\n                const waterToConvert = Math.min(tissue.inventory.water, bestEfficiencyWater);\r\n                const chance = speed * params.leafReactionRate * waterToConvert / bestEfficiencyWater;\r\n                if (Math.random() < chance) {\r\n                    this.didConvert = true;\r\n                    const sugarConverted = waterToConvert * efficiency;\r\n                    tissue.inventory.add(-waterToConvert, sugarConverted);\r\n                    this.sugarConverted += sugarConverted;\r\n                }\r\n\r\n            }\r\n        }\r\n        if (numAir > 0) {\r\n            this.averageEfficiency /= numAir;\r\n            // this.averageSpeed /= numAir;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Root extends Cell {\r\n    static displayName = \"Root\";\r\n    public waterTransferAmount = 0;\r\n    // public tilePairs: Vector2[] = []; // implied that the opposite direction is connected\r\n    public activeNeighbors: Vector2[] = [];\r\n    public inventory: Inventory = new Inventory(20, this);\r\n    cooldown = 0;\r\n\r\n    public step() {\r\n        super.step();\r\n        if (this.cooldown <= 0) {\r\n            this.stepWaterTransfer();\r\n            this.cooldown += params.rootTurnsPerTransfer;\r\n        }\r\n        this.cooldown -= 1;\r\n    }\r\n\r\n    private stepWaterTransfer() {\r\n        this.waterTransferAmount = 0;\r\n        // this.tilePairs = [];\r\n        this.activeNeighbors = [];\r\n        const neighbors = this.world.tileNeighbors(this.pos);\r\n        for (const [dir, tile] of neighbors) {\r\n            // const oppositeTile = this.world.tileAt(this.pos.x - dir.x, this.pos.y - dir.y);\r\n            if (tile instanceof Soil\r\n                /* && oppositeTile instanceof Tissue*/) {\r\n                // this.tilePairs.push(dir);\r\n                // const transferAmount = Math.ceil(Math.max(0, soilWater - tissueWater) / 2);\r\n                // if (tile.inventory.water > 0) {\r\n                //     const {water: transferAmount} = tile.inventory.give(oppositeTile.inventory, 1, 0);\r\n                //     if (transferAmount > 0) {\r\n                //         this.waterTransferAmount += transferAmount;\r\n                //         // add a random to trigger the !== on water transfer audio\r\n                //         this.waterTransferAmount += Math.random() * 0.0001;\r\n                //     }\r\n                // }\r\n                this.activeNeighbors.push(dir);\r\n                const {water} = tile.inventory.give(this.inventory, 1, 0);\r\n                this.waterTransferAmount += water + Math.random() * 0.0001;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Fruit extends Cell {\r\n    static displayName = \"Fruit\";\r\n    public isObstacle = true;\r\n    static sugarToWin = 200;\r\n    public inventory = new Inventory(Fruit.sugarToWin + 100, this);\r\n\r\n    // seeds aggressively take the inventory from neighbors\r\n    step() {\r\n        super.step();\r\n        const neighbors = this.world.tileNeighbors(this.pos);\r\n        for (const [, neighbor] of neighbors) {\r\n            if (hasInventory(neighbor)) {\r\n                // LMAO\r\n                neighbor.inventory.give(this.inventory, 0, neighbor.inventory.sugar);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Transport extends Tissue {\r\n    static displayName = \"Transport\";\r\n    public dir!: Vector2;\r\n    public cooldown = 0;\r\n\r\n    step() {\r\n        // transport hungers at double speed\r\n        this.energy -= 1;\r\n        super.step();\r\n        if (this.cooldown <= 0) {\r\n            this.cooldown += params.transportTurnsPerMove;\r\n\r\n            const targetTile = this.getTarget();\r\n            if (targetTile) {\r\n                this.inventory.give(targetTile.inventory, 1, 1);\r\n            }\r\n\r\n            const fromTile = this.getFrom();\r\n            if (fromTile) {\r\n                fromTile.inventory.give(this.inventory, 1, 1);\r\n            }\r\n        }\r\n        this.cooldown -= 1;\r\n    }\r\n\r\n    public getTarget() {\r\n        const targetTile = this.world.tileAt(this.pos.x + this.dir.x, this.pos.y + this.dir.y);\r\n        if (targetTile instanceof Cell && hasInventory(targetTile)) {\r\n            return targetTile;\r\n        }\r\n    }\r\n\r\n    public getFrom() {\r\n        const fromTile = this.world.tileAt(this.pos.x - this.dir.x, this.pos.y - this.dir.y);\r\n        if (fromTile instanceof Cell && hasInventory(fromTile)) {\r\n            return fromTile;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Vein extends Tissue {\r\n    static displayName = \"Vein\";\r\n    // static diffusionWater = 0;\r\n    static get diffusionWater() { return params.veinDiffusion; }\r\n    static get diffusionSugar() { return params.veinDiffusion; }\r\n    public inventory = new Inventory(8, this);\r\n    // diffusionNeighbors(neighbors: Map<Vector2, Tile>) {\r\n    //     return super.diffusionNeighbors(neighbors).filter((t) => t instanceof Vein);\r\n    // }\r\n}\r\n","import { Action, ActionMove } from \"./action\";\r\nimport { Constructor } from \"./constructor\";\r\nimport { DIRECTIONS } from \"./directions\";\r\nimport { Cell, Fruit, Leaf, Root, Tissue, Transport } from \"./game/tile\";\r\n\r\nexport const ACTION_KEYMAP: { [key: string]: Action } = {\r\n    \"j\": {\r\n        type: \"drop\",\r\n        sugar: 0,\r\n        water: 10, // hack hack we can assume max 100 water, it's fine\r\n    },\r\n    \"k\": {\r\n        type: \"drop\",\r\n        sugar: 10,\r\n        water: 0, // hack hack we can assume max 100 water, it's fine\r\n    },\r\n    \".\": {\r\n        type: \"still\",\r\n    },\r\n};\r\n\r\nexport const MOVEMENT_KEYS: { [key: string]: ActionMove } = {\r\n    w: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.n,\r\n    },\r\n    a: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.w,\r\n    },\r\n    s: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.s,\r\n    },\r\n    d: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.e,\r\n    },\r\n    q: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.nw,\r\n    },\r\n    e: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.ne,\r\n    },\r\n    z: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.sw,\r\n    },\r\n    c: {\r\n        type: \"move\",\r\n        dir: DIRECTIONS.se,\r\n    },\r\n};\r\n\r\nexport const MOVEMENTS = Object.keys(MOVEMENT_KEYS).map((key) => MOVEMENT_KEYS[key]);\r\n\r\nexport const BUILD_HOTKEYS: { [key: string]: Constructor<Cell> } = {\r\n    u: Tissue,\r\n    l: Leaf,\r\n    o: Root,\r\n    p: Transport,\r\n    i: Fruit,\r\n\r\n    // t: Tissue,\r\n    // f: Leaf,\r\n    // r: Root,\r\n    // T: Transport,\r\n    // F: Fruit,\r\n\r\n    // v: Vein,\r\n};\r\n","import { EventEmitter } from \"events\";\r\nimport { Vector2 } from \"three\";\r\nimport { Action, ActionBuild, ActionBuildTransport, ActionDeconstruct, ActionDrop, ActionMove, ActionMultiple } from \"../action\";\r\nimport { build, footsteps } from \"../audio\";\r\nimport { Constructor } from \"../constructor\";\r\nimport { hasInventory, Inventory } from \"../inventory\";\r\nimport { MOVEMENTS } from \"../keymap\";\r\nimport { params } from \"../params\";\r\nimport { Cell, Fruit, GrowingCell, Tile, Transport } from \"./tile\";\r\nimport { World } from \"./world\";\r\n\r\nexport class Player {\r\n    public inventory = new Inventory(params.maxResources, this, Math.round(params.maxResources / 3), Math.round(params.maxResources / 3));\r\n    private action?: Action;\r\n    private events = new EventEmitter();\r\n    private actionQueue: Action[] = [];\r\n    public mapActions?: (player: Player, action: Action) => Action | Action[] | undefined;\r\n    public constructor(public pos: Vector2, public world: World) { }\r\n    public setActions(actions: Action[]) {\r\n        this.actionQueue = actions;\r\n    }\r\n    public setAction(action: Action) {\r\n        this.action = action;\r\n        this.actionQueue = [];\r\n    }\r\n    public getAction() {\r\n        return this.action;\r\n    }\r\n    public droopY() {\r\n        const tile = this.world.tileAt(this.pos.x, this.pos.y);\r\n        if (tile instanceof Cell) {\r\n            return tile.droopY;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public droopPos() {\r\n        const droopY = this.droopY();\r\n        if (droopY !== 0) {\r\n            const t = this.pos.clone();\r\n            t.y += droopY;\r\n            return t;\r\n        }\r\n        return this.pos;\r\n    }\r\n\r\n    public currentTile() {\r\n        return this.world.tileAt(this.pos);\r\n    }\r\n\r\n    public on(event: string, cb: (...args: any[]) => void) {\r\n        this.events.on(event, cb);\r\n    }\r\n\r\n    public step() {\r\n        if (this.action === undefined) {\r\n            this.action = this.actionQueue.shift() || { type: \"none\" };\r\n        }\r\n        if (this.mapActions) {\r\n            const mappedAction = this.mapActions(this, this.action);\r\n            if (Array.isArray(mappedAction)) {\r\n                const [currentAction, ...futureActions] = mappedAction;\r\n                this.action = currentAction;\r\n                this.actionQueue.unshift(...futureActions);\r\n            } else if (mappedAction != null) {\r\n                this.action = mappedAction;\r\n            } else {\r\n                this.action = { type: \"none\" };\r\n            }\r\n        }\r\n        const actionSuccessful = this.attemptAction(this.action);\r\n        if (actionSuccessful) {\r\n            this.events.emit(\"action\", this.action);\r\n        }\r\n        this.action = undefined;\r\n    }\r\n\r\n    public attemptAction(action: Action): boolean {\r\n        switch (action.type) {\r\n            case \"none\":\r\n                // literally do nothing\r\n                return true;\r\n            case \"still\":\r\n                return this.attemptStill();\r\n            case \"move\":\r\n                return this.attemptMove(action);\r\n            case \"build\":\r\n                return this.attemptBuild(action);\r\n            case \"build-transport\":\r\n                return this.attemptBuildTransport(action);\r\n            case \"deconstruct\":\r\n                return this.attemptDeconstruct(action);\r\n            case \"drop\":\r\n                return this.attemptDrop(action);\r\n            case \"multiple\":\r\n                return this.attemptMultiple(action);\r\n        }\r\n    }\r\n    public verifyMove(action: ActionMove) {\r\n        const target = this.pos.clone().add(action.dir);\r\n        return this.isWalkable(target);\r\n    }\r\n\r\n    public isWalkable(pos: Tile | Vector2) {\r\n        if (pos instanceof Tile) {\r\n            pos = pos.pos;\r\n        }\r\n        if (!this.world.isValidPosition(pos.x, pos.y)) {\r\n            return false;\r\n        }\r\n        const targetTile = this.world.tileAt(pos.x, pos.y);\r\n        if (!(targetTile instanceof Cell) || targetTile == null || targetTile.isObstacle) {\r\n            // can't move!\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public isBuildCandidate(tile: Tile | null): tile is Tile {\r\n        if (tile != null && !this.isWalkable(tile) && !tile.isObstacle) {\r\n            // This Tile could conceivably be built upon. But are we close enough?\r\n            const offset = tile.pos.clone().sub(this.pos);\r\n            const areWeCloseEnough = MOVEMENTS.find((move) => move.dir.equals(offset)) != null;\r\n            return areWeCloseEnough;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public attemptMove(action: ActionMove) {\r\n        if (this.verifyMove(action)) {\r\n            footsteps.audio.currentTime = Math.random() * 0.05;\r\n            footsteps.gain.gain.cancelScheduledValues(0);\r\n            footsteps.gain.gain.value = 1.0;\r\n            footsteps.gain.gain.linearRampToValueAtTime(0, footsteps.gain.context.currentTime + 0.05);\r\n            // do the move\r\n            this.pos.add(action.dir);\r\n            this.autopickup();\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public attemptStill() {\r\n        this.autopickup();\r\n        return true;\r\n    }\r\n    private autopickup() {\r\n        // autopickup resources in the position as possible\r\n        const cell = this.currentTile();\r\n        if (hasInventory(cell)) {\r\n            const inv = cell.inventory;\r\n            inv.give(this.inventory, inv.water, inv.sugar);\r\n        }\r\n    }\r\n    public tryConstructingNewCell<T>(position: Vector2, cellType: Constructor<T>) {\r\n        position = position.clone();\r\n        const targetTile = this.world.tileAt(position.x, position.y);\r\n        if (targetTile == null) {\r\n            // out of bounds/out of map\r\n            return;\r\n        }\r\n        // disallow building a seed if there already is one\r\n        // todo fix typings on constructor vs typeof\r\n        if (this.world.fruit != null && (cellType as any) === Fruit) {\r\n            return;\r\n        }\r\n        // disallow building over a seed\r\n        if (targetTile instanceof Fruit) {\r\n            return;\r\n        }\r\n        const waterCost = 1;\r\n        const sugarCost = 1;\r\n        const tileAlreadyExists = targetTile instanceof cellType && !((cellType as any) === Transport && targetTile instanceof Transport);\r\n        if (!tileAlreadyExists &&\r\n            !targetTile.isObstacle &&\r\n            this.inventory.water >= waterCost &&\r\n            this.inventory.sugar >= sugarCost) {\r\n            this.inventory.add(-waterCost, -sugarCost);\r\n            const newTile = new cellType(position, this.world);\r\n            build.audio.currentTime = 0;\r\n            build.gain.gain.cancelScheduledValues(0);\r\n            build.gain.gain.value = 0.2;\r\n            build.gain.gain.exponentialRampToValueAtTime(0.0001, build.gain.context.currentTime + 0.50);\r\n            return newTile;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public attemptBuild(action: ActionBuild) {\r\n        const existingCell = this.world.cellAt(action.position.x, action.position.y);\r\n        if (existingCell != null && existingCell.constructor === action.cellType) {\r\n            // already built, whatever.\r\n            return true;\r\n        }\r\n        if (existingCell) {\r\n            this.attemptDeconstruct({ type: \"deconstruct\", position: action.position, force: true });\r\n        }\r\n        const matureCell = this.tryConstructingNewCell(action.position, action.cellType);\r\n        if (matureCell != null) {\r\n            let cell: Cell;\r\n            if (action.cellType.turnsToBuild) {\r\n                cell = new GrowingCell(action.position, this.world, matureCell);\r\n            } else {\r\n                cell = matureCell;\r\n            }\r\n            cell.droopY = this.droopY();\r\n            this.world.setTileAt(action.position, cell);\r\n            if (this.isWalkable(cell)) {\r\n                // move into the tissue cell\r\n                this.attemptMove({\r\n                    type: \"move\",\r\n                    dir: action.position.clone().sub(this.pos),\r\n                });\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // public attemptBuild(action: ActionBuild) {\r\n    //     const existingCell = this.world.cellAt(action.position.x, action.position.y);\r\n    //     if (existingCell instanceof action.cellType) {\r\n    //         // already built, whatever.\r\n    //         return true;\r\n    //     }\r\n    //     if (existingCell) {\r\n    //         this.attemptDeconstruct({ type: \"deconstruct\", position: action.position, force: true });\r\n    //     }\r\n    //     const newCell = this.tryConstructingNewCell(action.position, action.cellType);\r\n    //     if (newCell != null) {\r\n    //         newCell.droopY = this.droopY();\r\n    //         this.world.setTileAt(action.position, newCell);\r\n    //         if (this.world.fruit == null && newCell instanceof Fruit) {\r\n    //             this.world.fruit = newCell;\r\n    //         }\r\n    //         if (newCell instanceof Tissue) {\r\n    //             // move into the tissue cell\r\n    //             this.attemptMove({\r\n    //                 type: \"move\",\r\n    //                 dir: action.position.clone().sub(this.pos),\r\n    //             });\r\n    //         }\r\n    //         return true;\r\n    //     } else {\r\n    //         return false;\r\n    //     }\r\n    // }\r\n\r\n    public attemptBuildTransport(action: ActionBuildTransport) {\r\n        if (action.dir == null) {\r\n            console.error(\"null dir\", action);\r\n            return true;\r\n        }\r\n        const existingCell = this.world.cellAt(action.position.x, action.position.y);\r\n        if (existingCell) {\r\n            this.attemptDeconstruct({ type: \"deconstruct\", position: action.position, force: true });\r\n        }\r\n        const newCell = this.tryConstructingNewCell(action.position, action.cellType);\r\n        if (newCell != null) {\r\n            newCell.dir = action.dir;\r\n            this.world.setTileAt(action.position, newCell);\r\n            // move into the next cell\r\n            this.attemptMove({\r\n                type: \"move\",\r\n                dir: action.dir,\r\n            });\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    public attemptDeconstruct(action: ActionDeconstruct): boolean {\r\n        if (!action.position.equals(this.pos) || action.force) {\r\n            const maybeCell = this.world.maybeRemoveCellAt(action.position);\r\n            if (maybeCell != null) {\r\n                // refund the resources back\r\n                const refund = maybeCell.energy / params.cellEnergyMax;\r\n                this.inventory.add(refund, refund);\r\n                if (hasInventory(maybeCell)) {\r\n                    maybeCell.inventory.give(this.inventory, maybeCell.inventory.water, maybeCell.inventory.sugar);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    public attemptDrop(action: ActionDrop) {\r\n        // drop as much as you can onto the current tile\r\n        const currentTile = this.currentTile();\r\n        if (hasInventory(currentTile)) {\r\n            const { water, sugar } = action;\r\n            // first, pick up the opposite of what you can from the tile to try and make space\r\n            currentTile.inventory.give(this.inventory, sugar, water);\r\n\r\n            // give as much as you can\r\n            this.inventory.give(currentTile.inventory, water, sugar);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public attemptMultiple(multiple: ActionMultiple) {\r\n        let allSuccess = true;\r\n        for (const action of multiple.actions) {\r\n            allSuccess = this.attemptAction(action) && allSuccess;\r\n        }\r\n        return allSuccess;\r\n    }\r\n}\r\n","import { Vector2 } from \"three\";\r\nimport * as THREE from \"three\";\r\n\r\nimport devlog from \"../../../common/devlog\";\r\nimport { DIRECTION_VALUES } from \"../directions\";\r\nimport { Entity, GameState, height, isSteppable, width } from \"../index\";\r\nimport { hasInventory } from \"../inventory\";\r\nimport { params } from \"../params\";\r\nimport { Environment } from \"./environment\";\r\nimport { Player } from \"./player\";\r\nimport { Air, Cell, DeadCell, Fruit, hasEnergy, Rock, Soil, Tile, Tissue } from \"./tile\";\r\n\r\nexport class StepStats {\r\n    constructor(public deleted: Entity[] = [], public added: Entity[] = []) {}\r\n}\r\n\r\nexport class World {\r\n    public time: number = 0;\r\n    public readonly player = new Player(new Vector2(width / 2, height / 2), this);\r\n    public fruit?: Fruit = undefined;\r\n    private gridEnvironment: Tile[][];\r\n    private gridCells: Array<Array<Cell | null>>;\r\n    private neighborCache: Array<Array<Map<Vector2, Tile>>>;\r\n\r\n    constructor(public environment: Environment) {\r\n        this.gridEnvironment = new Array(width).fill(undefined).map((_, x) => (new Array(height).fill(undefined).map((__, y) => {\r\n            const pos = new Vector2(x, y);\r\n\r\n            let tile: Tile | undefined;\r\n            for (const fillFunction of environment.fill) {\r\n                const t = fillFunction(pos, this);\r\n                if (t != null) {\r\n                    tile = t;\r\n                    break;\r\n                }\r\n            }\r\n            if (tile == null) {\r\n                tile = new Air(pos, this);\r\n            }\r\n            return tile;\r\n        })));\r\n\r\n        // always drop player on the Soil Air interface\r\n        const playerX = this.player.pos.x;\r\n        const firstSoil = this.gridEnvironment[playerX].find((t) => !(t instanceof Air))\r\n        if (firstSoil) {\r\n            this.player.pos.y = firstSoil.pos.y;\r\n        }\r\n\r\n        const radius = 2.5;\r\n        this.gridCells = new Array(width).fill(undefined).map((_, x) => (new Array(height).fill(undefined).map((__, y) => {\r\n            const pos = new Vector2(x, y);\r\n            // add a \"seed\" of tissue around the player\r\n            if (this.player.pos.distanceTo(pos) < radius) {\r\n                // prevent Rocks underneath the seed\r\n                if (this.gridEnvironment instanceof Rock) {\r\n                    this.gridEnvironment[x][y] = new Soil(new Vector2(x, y), 0, this);\r\n                }\r\n                return new Tissue(pos, this);\r\n            } else {\r\n                return null;\r\n            }\r\n        })));\r\n        this.neighborCache = new Array(width).fill(undefined).map((_, x) => (new Array(height).fill(undefined).map((__, y) => {\r\n            return this.computeTileNeighbors(x, y);\r\n        })));\r\n        this.fillCachedEntities();\r\n\r\n        // // auto-add Roots\r\n        // const {x, y} = this.player.pos;\r\n        // this.newTile(x - 1, y + 2, Root);\r\n        // this.newTile(x + 1, y + 2, Root);\r\n\r\n        // // auto-add Veins\r\n        // for (let yTemp = y - 2; yTemp <= y + 2; yTemp++) {\r\n        //     this.newTile(x, yTemp, Vein);\r\n        // }\r\n        // this.newTile(x - 1, y + 2, Vein);\r\n        // this.newTile(x + 1, y + 2, Vein);\r\n        // this.newTile(x - 1, y - 1, Vein);\r\n        // this.newTile(x + 1, y - 1, Vein);\r\n\r\n        // // auto-add Leaves\r\n        // this.newTile(x, y - 2, Leaf);\r\n        // this.newTile(x + 1, y - 2, Leaf);\r\n        // this.newTile(x - 1, y - 2, Leaf);\r\n    }\r\n\r\n\r\n    public tileAt(v: Vector2): Tile | null;\r\n    public tileAt(x: number, y: number): Tile | null;\r\n    public tileAt(xOrVec2: number | Vector2, y?: number): Tile | null {\r\n        let x: number;\r\n        if (xOrVec2 instanceof Vector2) {\r\n            x = xOrVec2.x;\r\n            y = xOrVec2.y;\r\n        } else {\r\n            x = xOrVec2;\r\n            y = y!;\r\n        }\r\n\r\n        if (!this.isValidPosition(x, y)) {\r\n            return null;\r\n        }\r\n        const cell = this.gridCells[x][y];\r\n        if (cell != null) {\r\n            return cell;\r\n        } else {\r\n            return this.gridEnvironment[x][y];\r\n        }\r\n    }\r\n\r\n    public cellAt(x: number, y: number): Cell | null {\r\n        if (this.isValidPosition(x, y)) {\r\n            return this.gridCells[x][y];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public environmentTileAt(x: number, y: number): Tile | null {\r\n        if (this.isValidPosition(x, y)) {\r\n            return this.gridEnvironment[x][y];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Rules for replacement:\r\n    // if tile is environment, clear out the gridCell and set the gridEnvironment.\r\n    // if tile is cell, set gridCell, leave gridEnvironment alone.\r\n    public setTileAt(position: Vector2, tile: Tile): any {\r\n        const { x, y } = position;\r\n        if (!this.isValidPosition(x, y)) {\r\n            throw new Error(`invalid position ${x}, ${y} `);\r\n        }\r\n        if (tile instanceof Fruit) {\r\n            if (this.fruit == null) {\r\n                this.fruit = tile;\r\n            } else {\r\n                console.warn(\"made multiple Fruit!\");\r\n            }\r\n        }\r\n        const oldTile = this.tileAt(x, y)!;\r\n        // if replacing a tile with inventory, try giving resources to neighbors of the same type\r\n        if (hasInventory(oldTile)) {\r\n            // one mechanic - push water to nearby tiles\r\n            // const neighbors = this.tileNeighbors(position);\r\n            // for (const neighbor of neighbors.values()) {\r\n            //     if (hasInventory(neighbor) && neighbor instanceof oldTile.constructor) {\r\n            //         oldTile.inventory.give(neighbor.inventory, oldTile.inventory.water, oldTile.inventory.sugar);\r\n            //     }\r\n            //     if (oldTile.inventory.water === 0 && oldTile.inventory.sugar === 0) {\r\n            //         // we're all done\r\n            //         break;\r\n            //     }\r\n            // }\r\n            if (hasInventory(tile)) {\r\n                oldTile.inventory.give(tile.inventory, oldTile.inventory.water, oldTile.inventory.sugar);\r\n            }\r\n            if (oldTile.inventory.water !== 0 || oldTile.inventory.sugar !== 0) {\r\n                console.warn(\"lost\", oldTile.inventory, \"resources to building\");\r\n                oldTile.inventory.add(-oldTile.inventory.water, -oldTile.inventory.sugar);\r\n            }\r\n        }\r\n\r\n        const oldCell = this.gridCells[x][y];\r\n        if (oldCell != null) {\r\n            this.stepStats.deleted.push(oldCell);\r\n        }\r\n\r\n        if (tile instanceof Cell) {\r\n            // set gridCell only\r\n            this.gridCells[x][y] = tile;\r\n        } else {\r\n            // hackhack - we should call .die() on gridCells[x][y] but we already have with the oldTile code above\r\n            this.gridCells[x][y] = null;\r\n\r\n            const oldEnvironmentTile = this.gridEnvironment[x][y];\r\n            if (oldEnvironmentTile != null) {\r\n                this.stepStats.deleted.push(oldEnvironmentTile);\r\n            }\r\n            this.gridEnvironment[x][y] = tile;\r\n        }\r\n        this.stepStats.added.push(tile);\r\n        this.handleTileUpdated(position);\r\n    }\r\n    public maybeRemoveCellAt(position: Vector2): Cell | null {\r\n        const maybeCell = this.cellAt(position.x, position.y);\r\n        if (maybeCell) {\r\n            this.gridCells[position.x][position.y] = null;\r\n            if (maybeCell === this.fruit) {\r\n                this.fruit = undefined;\r\n            }\r\n            this.stepStats.deleted.push(maybeCell);\r\n        }\r\n        this.handleTileUpdated(position);\r\n        return maybeCell;\r\n    }\r\n    public isValidPosition(x: number, y: number) {\r\n        if (x >= width || x < 0 || y >= height || y < 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public tileNeighbors(pos: Vector2) {\r\n        return this.neighborCache[pos.x][pos.y];\r\n    }\r\n\r\n    private computeTileNeighbors(px: number, py: number) {\r\n        const mapping = new Map<Vector2, Tile>();\r\n        // randomize the neighbor array to reduce aliasing\r\n        const directions = DIRECTION_VALUES_RAND[this.time % DIRECTION_VALUES_RAND.length];\r\n        directions.forEach((v) => {\r\n            const x = px + v.x;\r\n            const y = py + v.y;\r\n            const tile = this.tileAt(x, y);\r\n            if (tile != null) {\r\n                mapping.set(v, tile);\r\n            }\r\n        });\r\n        return mapping;\r\n    }\r\n    // only use for rendering\r\n    // private cachedRenderableEntities?: Entity[];\r\n    // public renderableEntities() {\r\n    //     if (this.cachedRenderableEntities == null) {\r\n    //         throw new Error(\"accessed renderable entities before filling\");\r\n    //     }\r\n    //     return this.cachedRenderableEntities;\r\n    // }\r\n\r\n    private cachedEntities?: Entity[];\r\n    public entities() {\r\n        if (this.cachedEntities == null) {\r\n            throw new Error(\"accessed entities before filling\");\r\n        }\r\n        return this.cachedEntities;\r\n    }\r\n\r\n    private handleTileUpdated(pos: Vector2) {\r\n        this.neighborCache[pos.x][pos.y] = this.computeTileNeighbors(pos.x, pos.y);\r\n        for (const dir of DIRECTION_VALUES) {\r\n            const x = pos.x + dir.x;\r\n            const y = pos.y + dir.y;\r\n            if (this.isValidPosition(x, y)) {\r\n                this.neighborCache[x][y] = this.computeTileNeighbors(x, y);\r\n            }\r\n        }\r\n        this.fillCachedEntities();\r\n    }\r\n    private fillCachedEntities() {\r\n        const newEntities: Entity[] = [];\r\n        // we do this super hacky thing for performance where we only run every other entity in\r\n        // a checkerboard pattern.\r\n        //\r\n        // also, entities can interact with other entities, there is no lock-step buffer state,\r\n        // which means you can get weird artifacts like \"water suddenly moves 20 squares\".\r\n        // to combat this we alternatingly reverse the tile iteration order.\r\n        let x = 0, y = 0;\r\n        for (x = 0; x < width; x++) {\r\n            for (y = (x + this.time) % 2; y < height; y += 2) {\r\n                // checkerboard\r\n                newEntities.push(this.tileAt(x, y)!);\r\n            }\r\n        }\r\n        for (x = 0; x < width; x++) {\r\n            for (y = (x + this.time + 1) % 2; y < height; y += 2) {\r\n                // opposite checkerboard\r\n                newEntities.push(this.tileAt(x, y)!);\r\n            }\r\n        }\r\n        if (this.time % 4 < 2) {\r\n            newEntities.reverse();\r\n        }\r\n        // add player at the end - this is important since Player is currently the only thing\r\n        // that modifies tiles. You can get into situations where tiles that should be dead\r\n        // are still left-over in the entities cache.\r\n        newEntities.push(this.player);\r\n        this.cachedEntities = newEntities;\r\n\r\n        // update renderable entities\r\n        // (() => {\r\n        //     const entities: Entity[] = [this.player];\r\n        //     for (x = 0; x < width; x++) {\r\n        //         for (y = 0; y < height; y++) {\r\n        //             entities.push(this.gridEnvironment[x][y]);\r\n        //             const cellMaybe = this.gridCells[x][y];\r\n        //             if (cellMaybe != null) {\r\n        //                 entities.push(cellMaybe);\r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     this.cachedRenderableEntities = entities;\r\n        // })();\r\n    }\r\n    // iterate through all the actions\r\n    private stepStats: StepStats = new StepStats();\r\n    public step(): StepStats {\r\n        const entities = this.entities();\r\n        this.stepStats = new StepStats();\r\n        // dear god\r\n        entities.forEach((entity) => {\r\n            if (isSteppable(entity)) {\r\n                entity.step();\r\n            }\r\n        });\r\n        this.computeSunlight();\r\n        this.stepWeather();\r\n        this.time++;\r\n        this.fillCachedEntities();\r\n        return this.stepStats;\r\n        // this.checkResources();\r\n    }\r\n\r\n    public stepWeather() {\r\n        // offset first rain event by 300 turns\r\n        const isRaining = (this.time + this.environment.climate.turnsBetweenRainfall - 200) % this.environment.climate.turnsBetweenRainfall < this.environment.climate.rainDuration;\r\n        if (isRaining) {\r\n            const x = THREE.Math.randInt(0, width - 1);\r\n            const t = this.tileAt(x, 0);\r\n            if (t instanceof Air) {\r\n                t.inventory.add(this.environment.climate.waterPerDroplet, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeSunlight() {\r\n        // sunlight is special - we step downards from the top; neighbors don't affect the calculation so we don't have buffering problems\r\n        // 0 to PI = daytime, PI to 2PI = nighttime\r\n        const sunAngle = this.time * Math.PI * 2 / 1000;\r\n        const directionalBias = Math.sin(sunAngle + Math.PI / 2);\r\n        const sunAmount = Math.atan(Math.sin(sunAngle) * 12) / (Math.PI / 2) * 0.5 + 0.5;\r\n        for (let y = 0; y <= height * 0.6; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const t = this.environmentTileAt(x, y);\r\n                if (t instanceof Air) {\r\n                    let sunlight = 0;\r\n                    if (y === 0) {\r\n                        sunlight = 1;\r\n                    } else {\r\n                        const tileUp = this.tileAt(x, y - 1);\r\n                        const tileRight = this.tileAt(x + 1, y - 1);\r\n                        const tileLeft = this.tileAt(x - 1, y - 1);\r\n                        const upSunlight = tileUp instanceof Air ? tileUp.sunlightCached / sunAmount : tileUp == null ? 1 : 0;\r\n                        const rightSunlight = tileRight instanceof Air ? tileRight.sunlightCached / sunAmount : tileRight == null ? 1 : 0;\r\n                        const leftSunlight = tileLeft instanceof Air ? tileLeft.sunlightCached / sunAmount : tileLeft == null ? 1 : 0;\r\n                        if (directionalBias > 0) {\r\n                            // positive light travels to the right\r\n                            sunlight = rightSunlight * directionalBias + upSunlight * (1 - directionalBias);\r\n                        } else {\r\n                            sunlight = leftSunlight * -directionalBias + upSunlight * (1 - (-directionalBias));\r\n                        }\r\n                        sunlight = sunlight * (1 - params.sunlightDiffusion) + ((upSunlight + rightSunlight + leftSunlight) / 3) * params.sunlightDiffusion;\r\n                    }\r\n                    // have at least a bit\r\n                    sunlight = params.sunlightReintroduction + sunlight * (1 - params.sunlightReintroduction);\r\n\r\n                    sunlight *= sunAmount;\r\n                    t.sunlightCached = sunlight;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // public computeStress() {\r\n    //     // each cell looks at their neighboring 8 cells and tries to give their stress to the neighbor\r\n    //     // if the neighbor is soil or rock, it's 100% free\r\n    // }\r\n    public checkWinLoss(): GameState | null {\r\n        // you win if there's a seed with full capacity\r\n        if (this.fruit != null) {\r\n            if (this.fruit.inventory.sugar > Fruit.sugarToWin) {\r\n                return \"win\";\r\n            }\r\n        }\r\n        // you lose if you're standing on a dead cell\r\n        if (this.tileAt(this.player.pos.x, this.player.pos.y) instanceof DeadCell) {\r\n            return \"lose\";\r\n        }\r\n        return null;\r\n    }\r\n    public checkResources() {\r\n        let totalSugar = 0;\r\n        let totalWater = 0;\r\n        let totalEnergy = 0;\r\n        this.entities().forEach((e) => {\r\n            if (hasInventory(e)) {\r\n                totalSugar += e.inventory.sugar;\r\n                totalWater += e.inventory.water;\r\n            }\r\n            if (hasEnergy(e)) {\r\n                totalEnergy += e.energy;\r\n            }\r\n        });\r\n        devlog(\"sugar\", totalSugar, \"water\", totalWater, \"energy\", totalEnergy);\r\n    }\r\n}\r\n\r\nfunction shuffle<T>(array: T[]) {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\nconst DIRECTION_VALUES_RAND = [\r\n    shuffle(DIRECTION_VALUES.slice()),\r\n    shuffle(DIRECTION_VALUES.slice()),\r\n    shuffle(DIRECTION_VALUES.slice()),\r\n    shuffle(DIRECTION_VALUES.slice()),\r\n    shuffle(DIRECTION_VALUES.slice()),\r\n];\r\n","import * as React from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Object3D, OrthographicCamera, Scene, Vector2, Vector3 } from \"three\";\r\n\r\nimport devlog from \"../../common/devlog\";\r\nimport { map } from \"../../math/index\";\r\nimport { ISketch } from \"../../sketch\";\r\nimport { Action, ActionBuild, ActionBuildTransport, ActionMove } from \"./action\";\r\nimport { drums, hookUpAudio, strings } from \"./audio\";\r\nimport { Constructor } from \"./constructor\";\r\nimport { Player, World } from \"./game\";\r\nimport { ALL_ENVIRONMENTS, Temperate } from \"./game/environment\";\r\nimport { Cell, Fruit, Root, Soil, Tile, Tissue, Transport, Vein } from \"./game/tile\";\r\nimport { ACTION_KEYMAP, BUILD_HOTKEYS, MOVEMENT_KEYS } from \"./keymap\";\r\nimport { params } from \"./params\";\r\nimport { actionMoveFor, findPositionsThroughNonObstacles, findPositionsThroughTissue, pathFrom } from \"./pathfinding\";\r\nimport { InventoryRenderer } from \"./renderers/InventoryRenderer\";\r\nimport { PlayerRenderer } from \"./renderers/PlayerRenderer\";\r\nimport { Renderer } from \"./renderers/Renderer\";\r\nimport { TileRenderer } from \"./renderers/TileRenderer\";\r\nimport { TransportRenderer } from \"./renderers/TransportRenderer\";\r\nimport { NewPlayerTutorial } from \"./tutorial\";\r\nimport { TutorialBuildRoot } from \"./tutorial/tutorialBuildTissue\";\r\nimport { GameStack, Hover, HUD, ParamsGUI } from \"./ui\";\r\n\r\nexport type Entity = Tile | Player;\r\n\r\ninterface Steppable {\r\n    step(): void;\r\n}\r\n\r\nexport function isSteppable(obj: any): obj is Steppable {\r\n    return typeof obj.step === \"function\";\r\n}\r\nexport const width = 50;\r\nexport const height = 100;\r\n\r\nexport function lerp2(v: Vector3, t: {x: number, y: number}, l: number) {\r\n    v.x = v.x * (1 - l) + t.x * l;\r\n    v.y = v.y * (1 - l) + t.y * l;\r\n}\r\n\r\nfunction createRendererFor<E extends Entity>(object: E, scene: Scene, mito: Mito): Renderer<Entity> {\r\n    if (object instanceof Player) {\r\n        return new PlayerRenderer(object, scene, mito);\r\n    } else if (object instanceof Transport) {\r\n        return new TransportRenderer(object, scene, mito);\r\n    } else if (object instanceof Tile) {\r\n        return new TileRenderer(object, scene, mito);\r\n    } else {\r\n        throw new Error(`Couldn't find renderer for ${object}`);\r\n    }\r\n}\r\n\r\nexport type GameState = \"main\" | \"win\" | \"lose\" | \"instructions\";\r\n\r\nexport interface UIStateMain {\r\n    type: \"main\";\r\n}\r\nexport interface UIStateExpanding {\r\n    type: \"expanding\";\r\n    originalZoom: number;\r\n    target: THREE.Vector2;\r\n}\r\nexport type UIState = UIStateMain | UIStateExpanding;\r\n\r\nexport class Mito extends ISketch {\r\n    public readonly world = new World((ALL_ENVIRONMENTS[params.environment] || Temperate)());\r\n    public scene = new Scene();\r\n    private camera = new OrthographicCamera(0, 0, 0, 0, -100, 100);\r\n    public renderers = new Map<Entity, Renderer<Entity>>();\r\n    // when true, automatically create tissue tiles when walking into soil or dirt\r\n    public autoplace: Constructor<Cell> | undefined;\r\n    public render() {\r\n        return <>\r\n        <HUD\r\n            autoplace={this.autoplace}\r\n            mouseX={this.mouse.x}\r\n            mouseY={this.mouse.y}\r\n            uiState={this.uiState}\r\n            isTutorialFinished={this.tutorialRef == null ? true : this.tutorialRef.isFinished()}\r\n            sugar={this.world.player.inventory.sugar}\r\n            water={this.world.player.inventory.water}\r\n            onTryActionKey={this.tryAction}\r\n            world={this.world}\r\n        />\r\n        <GameStack mito={this} state={this.gameState} />\r\n        {/* <NewPlayerTutorial ref={(ref) => this.tutorialRef = ref } mito={this} />, */}\r\n        <ParamsGUI />\r\n        <Hover mito={this} />\r\n        </>;\r\n    }\r\n    public tutorialRef: NewPlayerTutorial | null = null;\r\n    public mouse = new THREE.Vector2();\r\n    public hoveredTile?: Tile;\r\n    private raycaster = new THREE.Raycaster();\r\n    public gameState: GameState = \"main\";\r\n    private firstActionTakenYet = false;\r\n    public audioListener = new THREE.AudioListener();\r\n    private keyMap = new Set<string>();\r\n    public uiState: UIState = { type: \"main\" };\r\n\r\n    private enterUIStateExpanding(target: THREE.Vector2) {\r\n        const originalZoom = this.uiState.type === \"main\" ? this.camera.zoom : this.uiState.originalZoom;\r\n        this.uiState = {\r\n            type: \"expanding\",\r\n            originalZoom,\r\n            target,\r\n        };\r\n    }\r\n\r\n    private resetUIState() {\r\n        if (this.uiState.type === \"expanding\") {\r\n            this.camera.zoom = this.uiState.originalZoom;\r\n            this.camera.updateProjectionMatrix();\r\n            this.uiState = { type: \"main\" };\r\n        }\r\n    }\r\n\r\n    public events = {\r\n        contextmenu: (event: MouseEvent) => {\r\n            if (this.uiState.type === \"main\") {\r\n                const tile = this.getTileAtScreenPosition(event.clientX!, event.clientY!);\r\n                if (tile != null) {\r\n                    this.world.player.setAction({\r\n                        type: \"deconstruct\",\r\n                        position: tile.pos,\r\n                    });\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        mousemove: (event: MouseEvent) => {\r\n            this.mouse.x = event.clientX!;\r\n            this.mouse.y = event.clientY!;\r\n        },\r\n        click: (event: MouseEvent) => {\r\n            // left-click\r\n            this.handleClick(event.clientX!, event.clientY!);\r\n        },\r\n        keydown: (event: KeyboardEvent) => {\r\n            this.firstActionTakenYet = true;\r\n            const key = event.key!;\r\n            this.keyMap.add(key);\r\n            this.tryAction(key);\r\n        },\r\n        keyup: (event: KeyboardEvent) => {\r\n            this.keyMap.delete(event.key!);\r\n        },\r\n        wheel: (e: WheelEvent) => {\r\n            // on my mouse, one scroll is + or - 125\r\n            const delta = -(e.deltaX + e.deltaY) / 125 / 20;\r\n            const currZoom = this.camera.zoom;\r\n            const scalar = Math.pow(2, delta);\r\n            // console.log(currZoom);\r\n            // zoom of 2 is zooming in\r\n            // const newZoom = Math.min(Math.max(currZoom * scalar, 1), 2.5);\r\n            const newZoom = currZoom * scalar;\r\n            this.camera.zoom = newZoom;\r\n            this.camera.updateProjectionMatrix();\r\n        },\r\n    };\r\n\r\n    tryAction = (key: string) => {\r\n        if (key === \"?\") {\r\n            this.gameState = (this.gameState === \"instructions\" ? \"main\" : \"instructions\");\r\n            return;\r\n        }\r\n        if (this.uiState.type === \"expanding\") {\r\n            if (key === \"Escape\") {\r\n                this.resetUIState();\r\n                return;\r\n            }\r\n            if (key in BUILD_HOTKEYS && !(BUILD_HOTKEYS[key] === Fruit && this.world.fruit != null)) {\r\n                const cellType = BUILD_HOTKEYS[key];\r\n                const buildAction: ActionBuild = {\r\n                    type: \"build\",\r\n                    cellType: cellType,\r\n                    position: this.uiState.target,\r\n                };\r\n                this.world.player.setAction(buildAction);\r\n                this.resetUIState();\r\n                return;\r\n            } else if (ACTION_KEYMAP[key]) {\r\n                this.resetUIState();\r\n                return;\r\n            }\r\n        }\r\n        if (this.gameState === \"instructions\") {\r\n            if (key === \"Escape\") {\r\n                this.gameState = \"main\";\r\n            }\r\n            // block further actions\r\n            return;\r\n        }\r\n        if (this.autoplace != null && key === \"Escape\") {\r\n            this.autoplace = undefined;\r\n        }\r\n        const action = ACTION_KEYMAP[key] || MOVEMENT_KEYS[key];\r\n        if (action != null) {\r\n            this.world.player.setAction(action);\r\n        } else {\r\n            if (key in BUILD_HOTKEYS) {\r\n                if (this.autoplace === BUILD_HOTKEYS[key] || (BUILD_HOTKEYS[key] === Fruit && this.world.fruit != null)) {\r\n                    this.autoplace = undefined;\r\n                } else {\r\n                    this.autoplace = BUILD_HOTKEYS[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private expandingTileHighlight = (() => {\r\n        const mesh = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(1, 1),\r\n            new THREE.MeshBasicMaterial({\r\n                color: \"white\",\r\n                side: THREE.DoubleSide,\r\n                transparent: true,\r\n                opacity: 0.5,\r\n            }),\r\n        );\r\n        return mesh;\r\n    })();\r\n\r\n    static originalFn = Object3D.prototype.updateMatrixWorld;\r\n    public init() {\r\n        (window as any).mito = this;\r\n        hookUpAudio(this.audioContext);\r\n        this.camera.zoom = 1.5;\r\n        this.camera.add(this.audioListener);\r\n\r\n        this.resize(this.canvas.width, this.canvas.height);\r\n\r\n        this.scene.add(InventoryRenderer.WaterParticles());\r\n        this.scene.add(InventoryRenderer.SugarParticles());\r\n\r\n        // darkness and water diffuse a few times to stabilize it\r\n        for (let i = 0; i < 5; i++) {\r\n            this.world.step();\r\n        }\r\n        // this.gameState = \"instructions\";\r\n        this.camera.position.z = 10;\r\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n        this.camera.position.x = this.world.player.pos.x;\r\n        this.camera.position.y = this.world.player.pos.y;\r\n\r\n        // const airBg = new THREE.Mesh(\r\n        //     new PlaneBufferGeometry(width, height),\r\n        //     materialMapping.get(Air)!.clone(),\r\n        // );\r\n        // airBg.position.x = width / 2 - 0.5;\r\n        // airBg.position.y = height / 2 - 0.5;\r\n        // this.scene.add(airBg);\r\n        this.updateAmbientAudio();\r\n        this.world.player.mapActions = this.mapActions;\r\n    }\r\n\r\n    public getOrCreateRenderer(entity: Entity) {\r\n        const renderer = this.renderers.get(entity);\r\n        if (renderer == null) {\r\n            const created = createRendererFor(entity, this.scene, this);\r\n            this.renderers.set(entity, created);\r\n            return created;\r\n        } else {\r\n            return renderer;\r\n        }\r\n    }\r\n\r\n    public updateAmbientAudio() {\r\n        const yPos = this.world.player.pos.y;\r\n        const drumVolume = map(yPos, height / 2, height, 0, 0.5);\r\n        const stringsVolume = map(yPos, height / 2, 0, 0, 0.5);\r\n        drums.gain.gain.value = Math.max(0, drumVolume);\r\n        strings.gain.gain.value = Math.max(0, stringsVolume);\r\n    }\r\n\r\n    public logRenderInfo() {\r\n        devlog(\r\n`Geometries in memory: ${this.renderer.info.memory.geometries}\r\nTextures in memory: ${this.renderer.info.memory.textures}\r\n# Render Calls: ${this.renderer.info.render.calls}\r\n# Render Lines: ${this.renderer.info.render.lines}\r\n# Render Points: ${this.renderer.info.render.points}\r\n# Render Tris: ${this.renderer.info.render.triangles}\r\n`,\r\n        );\r\n    }\r\n\r\n    public perfDebug() {\r\n        // count how many have autoUpdate enabled\r\n        let yes = 0, no = 0; this.scene.traverse((o) => { if (o.matrixAutoUpdate) { yes++ } else { no++ } });\r\n        console.log(\"yes\", yes, \"no\", no);\r\n\r\n        // count how many vertices of each type there are\r\n        const s = new Map(); this.scene.traverse((o) => { const k = (s.get(o.name || o.constructor.name) || []); s.set(o.name || o.constructor.name, k); k.push(o) })\r\n        console.log(s);\r\n    }\r\n\r\n    public worldStepAndDeleteOldRenderers() {\r\n        if (!this.firstActionTakenYet) {\r\n            return;\r\n        }\r\n        const stats = this.world.step();\r\n        if (this.tutorialRef) {\r\n            this.tutorialRef.setState({ time: this.world.time });\r\n        }\r\n        this.gameState = this.world.checkWinLoss() || this.gameState;\r\n\r\n        // const deletedEntities = this.getRemovedEntitiesNaive();\r\n        const deletedEntities = stats.deleted;\r\n\r\n        for (const e of deletedEntities) {\r\n            const renderer = this.renderers.get(e);\r\n            if (renderer == null) {\r\n                throw new Error(`Couldn't find renderer for ${e}!`);\r\n            }\r\n            renderer.destroy();\r\n            this.renderers.delete(e);\r\n        }\r\n\r\n        this.updateAmbientAudio();\r\n    }\r\n\r\n    private getCameraNormCoordinates(clientX: number, clientY: number) {\r\n        return new THREE.Vector2(\r\n            clientX / this.canvas.width * 2 - 1,\r\n            -clientY / this.canvas.height * 2 + 1,\r\n        );\r\n    }\r\n\r\n    private getTileAtScreenPosition(clientX: number, clientY: number) {\r\n        const cameraNorm = this.getCameraNormCoordinates(clientX, clientY);\r\n        this.raycaster.setFromCamera(cameraNorm, this.camera);\r\n\r\n        // const coordinate = this.raycaster.ray.origin\r\n        // const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter(({object}) => object instanceof TileMesh);\r\n        // const i = intersects[0];\r\n        // if (i != null) {\r\n\r\n        const {x, y} = this.raycaster.ray.origin;\r\n        const ix = Math.round(x);\r\n        const iy = Math.round(y);\r\n        const tile = this.world.tileAt(ix, iy);\r\n        if (tile != null && tile.lightAmount() > 0) {\r\n            return tile;\r\n        }\r\n        // }\r\n    }\r\n\r\n    public animate() {\r\n        const { world } = this;\r\n        // if (document.activeElement !== this.canvas && !document.querySelector(\".dg.ac\")!.contains(document.activeElement)) {\r\n        //     this.canvas.focus();\r\n        // }\r\n        this.canvas.focus();\r\n        if (this.gameState === \"main\") {\r\n            if (params.isRealtime) {\r\n                if (this.frameCount % 3 === 0) {\r\n                    if (this.world.player.getAction() == null) {\r\n                        const moveAction = this.keysToMovement(this.keyMap);\r\n                        if (moveAction) {\r\n                            this.world.player.setAction(moveAction);\r\n                        }\r\n                    }\r\n                    this.worldStepAndDeleteOldRenderers();\r\n                }\r\n            } else if (world.player.getAction() != null) {\r\n                this.worldStepAndDeleteOldRenderers();\r\n            }\r\n\r\n            InventoryRenderer.startFrame();\r\n            this.world.entities().forEach((entity) => {\r\n                const renderer = this.getOrCreateRenderer(entity);\r\n                renderer.update();\r\n            });\r\n            InventoryRenderer.endFrame();\r\n        }\r\n        if (this.uiState.type === \"expanding\") {\r\n            if (!this.world.player.isBuildCandidate(this.world.tileAt(this.uiState.target))) {\r\n                this.resetUIState();\r\n            }\r\n        }\r\n        const mouseNorm = this.getCameraNormCoordinates(this.mouse.x, this.mouse.y);\r\n        if (this.uiState.type === \"main\") {\r\n            this.scene.remove(this.expandingTileHighlight);\r\n            const target = new THREE.Vector2(\r\n                this.world.player.pos.x + mouseNorm.x / 2,\r\n                this.world.player.pos.y - mouseNorm.y / 2,\r\n            );\r\n            lerp2(this.camera.position, target, 0.3);\r\n        } else {\r\n            this.scene.add(this.expandingTileHighlight);\r\n            this.expandingTileHighlight.position.set(\r\n                this.uiState.target.x,\r\n                this.uiState.target.y,\r\n                1,\r\n            );\r\n            const target = new THREE.Vector2(\r\n                this.uiState.target.x,\r\n                this.uiState.target.y,\r\n            );\r\n            lerp2(this.camera.position, target, 0.3);\r\n        }\r\n\r\n        // const s = new Map();\r\n        // Object3D.prototype.updateMatrixWorld = function(...args) {\r\n        //     Mito.originalFn.apply(this, args);\r\n        //     const k = (s.get(this.name || this.constructor.name) || []); s.set(this.name || this.constructor.name, k); k.push(this);\r\n        // }\r\n        this.renderer.render(this.scene, this.camera);\r\n        // console.log(\"update Matrix World: \", s);\r\n\r\n        this.hoveredTile = this.getTileAtScreenPosition(this.mouse.x, this.mouse.y);\r\n        // this.perfDebug();\r\n    }\r\n    public keysToMovement(keys: Set<string>): ActionMove | null {\r\n        const dir = new Vector2();\r\n        for (const key of keys) {\r\n            if (MOVEMENT_KEYS[key]) {\r\n                dir.add(MOVEMENT_KEYS[key].dir);\r\n            }\r\n        }\r\n        if (dir.x === 0 && dir.y === 0) {\r\n            return null;\r\n        } else {\r\n            return {\r\n                type: \"move\",\r\n                dir,\r\n            };\r\n        }\r\n    }\r\n\r\n    // if this move, taken by Player, doesn't make sense, then take an action that does\r\n    public mapActions = (player: Player, action: Action): Action | Action[] | undefined => {\r\n        if (action == null) {\r\n            return;\r\n        }\r\n        if (action.type === \"none\") {\r\n            return action;\r\n        }\r\n        this.resetUIState();\r\n        if (action.type === \"still\" && (this.autoplace === Vein || this.autoplace === Tissue)) {\r\n            return {\r\n                type: \"build\",\r\n                cellType: this.autoplace,\r\n                position: player.pos,\r\n            };\r\n        }\r\n        if (action.type !== \"move\") {\r\n            return action;\r\n        }\r\n        const targetTile = this.world.tileAt(player.pos.x + action.dir.x, player.pos.y + action.dir.y);\r\n        const currentTile = player.currentTile();\r\n        // autoplace\r\n        if (this.autoplace != null) {\r\n            if (this.autoplace === Transport) {\r\n                if (action.dir == null) { throw new Error(\"bad dir\"); }\r\n                const buildTransportAction: ActionBuildTransport = {\r\n                    type: \"build-transport\",\r\n                    cellType: Transport,\r\n                    position: this.world.player.pos,\r\n                    dir: action.dir,\r\n                };\r\n                return buildTransportAction;\r\n            } else if (this.autoplace === Vein && !(currentTile instanceof Vein)) {\r\n                return {\r\n                    type: \"multiple\",\r\n                    actions: [\r\n                        {\r\n                            type: \"build\",\r\n                            cellType: Vein,\r\n                            position: player.pos,\r\n                        },\r\n                        action,\r\n                    ],\r\n                };\r\n            } else if (!player.verifyMove(action)) {\r\n                const buildAction: ActionBuild = {\r\n                    type: \"build\",\r\n                    cellType: this.autoplace,\r\n                    position: player.pos.clone().add(action.dir),\r\n                };\r\n                if (this.autoplace !== Tissue && this.autoplace !== Root) {\r\n                    this.autoplace = undefined;\r\n                }\r\n                return buildAction;\r\n            } else {\r\n                return action;\r\n            }\r\n        } else if (player.isBuildCandidate(targetTile)) {\r\n            if (this.tutorialRef != null) {\r\n                // we're in root tutorial\r\n                if (this.tutorialRef.tutorialRef instanceof TutorialBuildRoot) {\r\n                    // only allow building on the soil\r\n                    if (!(targetTile instanceof Soil)) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            // we attempt to move into a place we cannot\r\n            // this.enterUIStateExpanding(targetTile.pos);\r\n            return;\r\n        } else {\r\n            return action;\r\n        }\r\n    }\r\n\r\n    public resize(w: number, h: number) {\r\n        const aspect = h / w;\r\n        // at zoom 1, we see 12 pixels up and 12 pixels down\r\n        const cameraHeight = 12;\r\n        this.camera.left = -cameraHeight / aspect;\r\n        this.camera.right = cameraHeight / aspect;\r\n        this.camera.top = -cameraHeight;\r\n        this.camera.bottom = cameraHeight;\r\n        // this.camera.position.z = 1;\r\n        // this.camera.lookAt(new Vector3(0, 0, 0));\r\n        this.camera.updateProjectionMatrix();\r\n    }\r\n\r\n    public handleClick(clientX: number, clientY: number) {\r\n        this.firstActionTakenYet = true;\r\n        const target = this.getTileAtScreenPosition(clientX, clientY);\r\n        if (this.uiState.type === \"expanding\") {\r\n            if (target == null || !this.uiState.target.equals(target.pos)) {\r\n                this.resetUIState();\r\n            }\r\n        }\r\n        if (!target) {\r\n            return;\r\n        }\r\n\r\n        // clicking self means \"be still\".\r\n        if (target.pos.equals(this.world.player.pos)) {\r\n            this.world.player.setAction({type: \"still\" });\r\n            return;\r\n        }\r\n\r\n        // clicking an adjacent tile means walk there, allowing for walking past the edge\r\n        const singleMove = actionMoveFor(this.world.player.pos.x, this.world.player.pos.y, target.pos.x, target.pos.y);\r\n        if (singleMove) {\r\n            if (this.world.player.isBuildCandidate(target)) {\r\n                this.enterUIStateExpanding(target.pos);\r\n                return;\r\n            } else {\r\n                this.world.player.setAction(singleMove);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // now we're clicking past an adjacent tile. find a path.\r\n        let actions: Action[];\r\n        // Tissue and Vein are common tiles you use to expand with (two types of roads)\r\n        // when we're autoplacing those, allow building far away\r\n        if (this.autoplace && Mito.expansionTiles.indexOf(this.autoplace) !== -1) {\r\n            actions = pathFrom(findPositionsThroughNonObstacles(this.world, target.pos));\r\n        } else {\r\n            actions = pathFrom(findPositionsThroughTissue(this.world, target.pos, this.autoplace != null));\r\n        }\r\n        this.world.player.setActions(actions);\r\n    }\r\n    static expansionTiles: Array<Constructor<Cell>> = [Tissue, Root, Vein];\r\n}\r\n\r\nexport default Mito;\r\n","export default function lazy<T>(fn: () => T): () => T {\r\n    let cache: T;\r\n    return () => {\r\n        if (cache === undefined) {\r\n            cache = fn();\r\n        }\r\n        return cache;\r\n    };\r\n}\r\n","import { Vector2 } from \"three\";\r\nimport { height, width } from \"..\";\r\nimport lazy from \"../../../common/lazy\";\r\nimport { Noise } from \"../../../common/perlin\";\r\nimport { map } from \"../../../math\";\r\nimport { params } from \"../params\";\r\nimport { Fountain, Rock, Soil, Tile } from \"./tile\";\r\nimport { World } from \"./world\";\r\n\r\nexport interface Environment {\r\n    climate: {\r\n        turnsBetweenRainfall: number,\r\n        rainDuration: number,\r\n        waterPerDroplet: number,\r\n    };\r\n    waterGravityPerTurn: number;\r\n    evaporationRate: number;\r\n    evaporationBottom: number;\r\n    floorCo2: number;\r\n    fill: FillFunction[];\r\n}\r\n\r\nexport type FillFunction = (pos: Vector2, world: World) => Tile | undefined;\r\n\r\nexport const Temperate = lazy(() => {\r\n    const noiseWater = new Noise();\r\n    const noiseRock = new Noise();\r\n    const noiseHeight = new Noise();\r\n\r\n    const environment: Environment = {\r\n        climate: {\r\n            turnsBetweenRainfall: 800,\r\n            rainDuration: 50,\r\n            waterPerDroplet: 2,\r\n        },\r\n        evaporationRate: 0.0002,\r\n        evaporationBottom: 0.6,\r\n        floorCo2: 0.5,\r\n        waterGravityPerTurn: 0.001,\r\n        fill: [\r\n            (pos, world) => {\r\n                const {x, y} = pos;\r\n                const soilLevel = height / 2\r\n                    - 4 * (noiseHeight.perlin2(0, x / 5) + 1) / 2\r\n                    - 16 * (noiseHeight.perlin2(10, x / 20 + 10));\r\n                const rockThreshold = map(y - height / 2, 0, height / 2, -0.7, 0.3);\r\n                const isRock = noiseRock.simplex2(x / 5, y / 5) < rockThreshold;\r\n                if (y > soilLevel) {\r\n                    if (isRock) {\r\n                        const rock = new Rock(pos, world);\r\n                        return rock;\r\n                    } else {\r\n                        const heightScalar = Math.pow(map(y - height / 2, 0, height / 2, 0.5, 1), 2);\r\n                        const simplexScalar = 0.2;\r\n                        // this 0.1 factor makes a *huge* difference\r\n                        const simplexValue = noiseWater.simplex2(x * simplexScalar, y * simplexScalar) + 0.2;\r\n                        const water = Math.round(Math.max(1, Math.min(\r\n                            // should be soil_max_water, isn't cuz of dependency cycles messing up instantiation\r\n                            20, simplexValue > 0.4 ? 20 * heightScalar : 0)));\r\n                        if (heightScalar * simplexValue > 1 / params.fountainAppearanceRate) {\r\n                            const emitWaterScalar = Math.min(heightScalar * simplexValue, 1);\r\n                            return new Fountain(pos, water, world, Math.round(params.fountainTurnsPerWater / emitWaterScalar));\r\n                        } else {\r\n                            return new Soil(pos, water, world);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        ],\r\n    };\r\n    return environment;\r\n});\r\n\r\nexport const Desert = lazy(() => {\r\n    const noiseHeight = new Noise();\r\n    const noiseRock = new Noise();\r\n\r\n    const e: Environment = {\r\n        climate: {\r\n            rainDuration: 220,\r\n            turnsBetweenRainfall: 3000,\r\n            waterPerDroplet: 8,\r\n        },\r\n        evaporationRate: 0.002,\r\n        evaporationBottom: 0.7,\r\n        waterGravityPerTurn: 0.02,\r\n        floorCo2: 0.95,\r\n        fill: [\r\n            (pos, world) => {\r\n                const {x, y} = pos;\r\n                const soilLevel = height / 2\r\n                    - 2 * (noiseHeight.perlin2(0, x / 20) + 1) / 2\r\n                    - 3 * (noiseHeight.perlin2(10, x / 100 + 10));\r\n\r\n                const rockThreshold = map(y, height / 2, height, -0.8, -0.4);\r\n                const isRock = noiseRock.simplex2(x / 4, y / 4) < rockThreshold;\r\n                if (y > soilLevel) {\r\n                    if (isRock) {\r\n                        return new Rock(pos, world);\r\n                    }\r\n                    const water = Math.floor(Math.max(0, map(y, height * 0.75, height, 1, 9)));\r\n                    return new Soil(pos, water, world);\r\n                }\r\n            },\r\n        ],\r\n    };\r\n    return e;\r\n});\r\n\r\nexport const Rocky = lazy(() => {\r\n    const noiseRock = new Noise();\r\n    const noiseHeight = new Noise();\r\n\r\n    const e: Environment = {\r\n        climate: {\r\n            turnsBetweenRainfall: 1200,\r\n            rainDuration: 120,\r\n            waterPerDroplet: 3,\r\n        },\r\n        waterGravityPerTurn: 0.1,\r\n        evaporationBottom: 0.6,\r\n        evaporationRate: 0.001,\r\n        floorCo2: 1,\r\n        fill: [\r\n            (pos, world) => {\r\n                const {x, y} = pos;\r\n                const soilLevel = height * 0.55\r\n                    - 4 * (noiseHeight.perlin2(0, x / 5) + 1) / 2\r\n                    - 16 * (noiseHeight.perlin2(10, x / 20 + 10))\r\n                    - map(x, 0, width, 10, -10);\r\n                const rockLevel = y\r\n                    - 6 * (noiseHeight.perlin2(0, x / 25) + 1) / 2\r\n                    - 20 * (noiseHeight.perlin2(10, x / 150 + 10));\r\n                const rockThreshold = (rockLevel < height * 0.5) ? -1 : -0.15;\r\n                const isRock = noiseRock.simplex2(x / 10, y / 10) < rockThreshold;\r\n                if (isRock) {\r\n                    const rock = new Rock(pos, world);\r\n                    return rock;\r\n                } else if (y > soilLevel) {\r\n                    return new Soil(pos, 3, world);\r\n                }\r\n            },\r\n        ],\r\n    };\r\n    return e;\r\n});\r\n\r\nexport const ALL_ENVIRONMENTS = {\r\n    Temperate,\r\n    Desert,\r\n    Rocky,\r\n};\r\n","import { AStarFinder, DiagonalMovement, Grid } from \"pathfinding\";\r\nimport { Vector2 } from \"three\";\r\n\r\nimport { height, width } from \".\";\r\nimport { ActionMove } from \"./action\";\r\nimport { World } from \"./game\";\r\nimport { Cell, Tissue } from \"./game/tile\";\r\nimport { MOVEMENTS } from \"./keymap\";\r\n\r\nexport function findPositionsThroughTissue(world: World, target: Vector2, includeTargetIfNonTissue = false) {\r\n    const grid = newGrid((x, y, g) => {\r\n        const tile = world.tileAt(x, y);\r\n        if (tile != null && world.player.isWalkable(tile)) {\r\n            g.setWalkableAt(x, y, true);\r\n        }\r\n    });\r\n    grid.setWalkableAt(target.x, target.y, true);\r\n    const path = findPositions(grid, world.player.pos, target);\r\n    if (!(world.tileAt(target) instanceof Cell) && !includeTargetIfNonTissue) {\r\n        // get rid of trying to actually walk past the edge\r\n        path.pop();\r\n        return path;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function findPositionsThroughNonObstacles(world: World, target: Vector2) {\r\n    const grid = newGrid((x, y, g) => {\r\n        const tile = world.tileAt(x, y)!;\r\n        if (tile instanceof Tissue || (!(tile instanceof Cell) && !tile.isObstacle)) {\r\n            g.setWalkableAt(x, y, true);\r\n        }\r\n    });\r\n\r\n    return findPositions(grid, world.player.pos, target);\r\n}\r\n\r\nexport function pathFrom(positions: Array<[number, number]>) {\r\n    const actions: ActionMove[] = [];\r\n    for (let i = 0; i < positions.length - 1; i++) {\r\n        const [fromX, fromY] = positions[i];\r\n        const [toX, toY] = positions[i + 1];\r\n        const direction = actionMoveFor(fromX, fromY, toX, toY);\r\n        if (direction == null) {\r\n            throw new Error(\"couldn't find corresponding movement action\");\r\n        }\r\n        actions.push(direction);\r\n    }\r\n    return actions;\r\n}\r\n\r\nfunction findPositions(grid: Grid, start: Vector2, target: Vector2) {\r\n    const finder = new AStarFinder({ diagonalMovement: DiagonalMovement.Always });\r\n    // positions comes back as an array of [x, y] positions that are all adjacent to each other\r\n    return finder.findPath(\r\n        start.x, start.y,\r\n        target.x, target.y,\r\n        grid) as Array<[number, number]>;\r\n}\r\n\r\nfunction newGrid(fn: (x: number, y: number, grid: Grid) => void) {\r\n    const grid = new Grid(width, height);\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            grid.setWalkableAt(x, y, false);\r\n        }\r\n    }\r\n\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            fn(x, y, grid);\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nexport function actionMoveFor(fromX: number, fromY: number, toX: number, toY: number): ActionMove | undefined {\r\n    const dx = toX - fromX;\r\n    const dy = toY - fromY;\r\n    return MOVEMENTS.find(({dir}) => dir.x === dx && dir.y === dy);\r\n}\r\n","import * as THREE from \"three\";\r\nimport devlog from \"../../common/devlog\";\r\nimport lazy from \"../../common/lazy\";\r\n\r\nconst spriteSize = 16; // 16x16 sprites\r\nlet spritesheetLoaded = false;\r\nconst SPRITESHEET = lazy(() => new THREE.TextureLoader().load( 'assets/images/roguelikeSheet_transparent.png', (() => {\r\n    SPRITESHEET().dispatchEvent({type: \"update\"});\r\n    spritesheetLoaded = true;\r\n})));\r\n\r\nexport const fruitTexture = new THREE.TextureLoader().load('assets/images/fruit.png');\r\n\r\nconst cache: { [key: string]: THREE.Texture } = {};\r\n// x, y are spritesheet coordinates, starting top-left and going down/right\r\nexport function textureFromSpritesheet(x: number, y: number, backgroundColor = \"white\") {\r\n    x = Math.floor(x);\r\n    y = Math.floor(y);\r\n    const key = `${x},${y}`;\r\n    if (cache[key] == null) {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = spriteSize;\r\n        canvas.height = spriteSize;\r\n        const texture = new THREE.Texture(canvas);\r\n        texture.magFilter = THREE.NearestFilter;\r\n        texture.flipY = true;\r\n        texture.wrapS = THREE.RepeatWrapping;\r\n        texture.wrapT = THREE.RepeatWrapping;\r\n        function drawSpriteToCanvas() {\r\n            const image = SPRITESHEET().image;\r\n            const context = canvas.getContext(\"2d\")!;\r\n            context.fillStyle = backgroundColor;\r\n            context.fillRect(0, 0, spriteSize, 16);\r\n            // context.fillStyle = \"white\";\r\n            // flip the image vertically\r\n            context.drawImage(image,\r\n                // sx, sy, sWidth, sHeight\r\n                spriteSize * x,\r\n                spriteSize * y,\r\n                spriteSize,\r\n                spriteSize,\r\n                // dx, dy, dWidth, dHeight\r\n                0,\r\n                0,\r\n                spriteSize,\r\n                spriteSize,\r\n            );\r\n            texture.needsUpdate = true;\r\n            devlog(\"updated spritesheet for\", x, y);\r\n        }\r\n        if (spritesheetLoaded) {\r\n            drawSpriteToCanvas();\r\n        } else {\r\n            SPRITESHEET().addEventListener(\"update\", () => {\r\n                drawSpriteToCanvas();\r\n            });\r\n        }\r\n        cache[key] = texture;\r\n    }\r\n    return cache[key];\r\n}\r\n","import { Scene } from \"three\";\r\nimport { Mito } from \"../index\";\r\nexport abstract class Renderer<T> {\r\n    constructor(public target: T, public scene: Scene, public mito: Mito) { }\r\n    abstract update(): void;\r\n    abstract destroy(): void;\r\n}\r\n","import { BufferAttribute, BufferGeometry, Color, Points, ShaderMaterial, Texture } from \"three\";\r\n\r\nexport class ResourceParticles extends Points {\r\n    static BUFFER_SIZE = 100000;\r\n    public geometry!: BufferGeometry;\r\n    public material!: ResourceParticleMaterial;\r\n    static newGeometry() {\r\n        const geometry = new BufferGeometry();\r\n        const positions = new Float32Array(ResourceParticles.BUFFER_SIZE * 3);\r\n        const sizes = new Float32Array(ResourceParticles.BUFFER_SIZE);\r\n        geometry.addAttribute(\"position\", new BufferAttribute(positions, 3).setDynamic(true));\r\n        geometry.addAttribute(\"size\", new BufferAttribute(sizes, 1).setDynamic(true));\r\n        return geometry;\r\n    }\r\n    constructor(params: MaterialParams) {\r\n        super();\r\n        this.geometry = ResourceParticles.newGeometry();\r\n        this.material = new ResourceParticleMaterial(params)\r\n        this.frustumCulled = false;\r\n    }\r\n    private index = 0;\r\n    startFrame() {\r\n        this.index = 0;\r\n    }\r\n    commit(x: number, y: number, z: number, size: number) {\r\n        this.geometry.attributes.position.setXYZ(this.index, x, y, z);\r\n        this.geometry.attributes.size.setX(this.index, size);\r\n        this.index++;\r\n    }\r\n    endFrame() {\r\n        const positions = (this.geometry.attributes.position as BufferAttribute);\r\n        positions.needsUpdate = true;\r\n        const sizes = (this.geometry.attributes.size as BufferAttribute);\r\n        sizes.needsUpdate = true;\r\n        this.geometry.setDrawRange(0, this.index);\r\n    }\r\n}\r\n\r\nexport interface MaterialParams {\r\n    opacity: number;\r\n    color: Color;\r\n    size: number;\r\n    map?: Texture;\r\n}\r\n\r\nclass ResourceParticleMaterial extends ShaderMaterial {\r\n    public map: Texture | undefined;\r\n\r\n    constructor(public params: MaterialParams) {\r\n        super({\r\n            uniforms: {\r\n                opacity: { value: params.opacity },\r\n                sizeGlobal: { value: params.size },\r\n                color: { value: params.color },\r\n                // you have to put it here too\r\n                map: { value: params.map },\r\n            },\r\n            vertexShader,\r\n            fragmentShader,\r\n            depthTest: false,\r\n            transparent: true,\r\n        } as any);\r\n\r\n        // OH MY GOD you can do this. You have to do this *AFTER* the super call!\r\n        this.map = params.map;\r\n    }\r\n}\r\n\r\nconst vertexShader = `\r\nattribute float size;\r\nuniform float sizeGlobal;\r\n\r\nvoid main() {\r\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n    gl_PointSize = size * sizeGlobal * -projectionMatrix[1].y;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nuniform vec3 color;\r\nuniform sampler2D texture;\r\nuniform float opacity;\r\n\r\n#ifdef USE_MAP\r\n\tuniform mat3 uvTransform;\r\n\tuniform sampler2D map;\r\n#endif\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4( color, opacity );\r\n\r\n    #ifdef USE_MAP\r\n        vec4 mapTexel = texture2D( map, gl_PointCoord );\r\n        gl_FragColor *= mapTexelToLinear( mapTexel );\r\n    #endif\r\n}\r\n`;\r\n","import { Color, Scene, Vector2 } from \"three\";\r\n\r\nimport lazy from \"../../../common/lazy\";\r\nimport { map } from \"../../../math\";\r\nimport { Mito } from \"../index\";\r\nimport { Inventory } from \"../inventory\";\r\nimport { textureFromSpritesheet } from \"../spritesheet\";\r\nimport { Renderer } from \"./Renderer\";\r\nimport { ResourceParticles } from \"./resourceParticles\";\r\n\r\n// we represent Resources as dots of certain colors.\r\nexport class InventoryRenderer extends Renderer<Inventory> {\r\n    static WaterParticles = lazy(() => new ResourceParticles(\r\n        {\r\n            color: new Color(\"rgb(9, 12, 255)\"),\r\n            size: 45,\r\n            opacity: 0.75,\r\n        },\r\n        // new PointsMaterial({\r\n        //     // map: textureFromSpritesheet(0, 1),\r\n        //     transparent: true,\r\n        //     opacity: 0.75,\r\n        //     // color: new Color(\"rgb(12, 41, 255)\"),\r\n        //     // color: new Color(\"rgb(29, 42, 255)\"),\r\n        //     color: new Color(\"rgb(9, 12, 255)\"),\r\n        //     size: .12,\r\n        //     side: DoubleSide,\r\n        // })\r\n    ));\r\n\r\n    static SugarParticles = lazy(() => new ResourceParticles(\r\n        {\r\n            color: new Color(\"yellow\"),\r\n            size: 85,\r\n            opacity: 0.9,\r\n            map: textureFromSpritesheet(42, 12, \"transparent\"),\r\n        },\r\n        // new PointsMaterial({\r\n        //     map: textureFromSpritesheet(42, 12, \"transparent\"),\r\n        //     transparent: true,\r\n        //     opacity: 0.9,\r\n        //     color: \"yellow\",\r\n        //     size: .12,\r\n        //     side: DoubleSide,\r\n        // })\r\n    ));\r\n\r\n    static startFrame() {\r\n        InventoryRenderer.WaterParticles().startFrame();\r\n        InventoryRenderer.SugarParticles().startFrame();\r\n    }\r\n\r\n    static endFrame() {\r\n        InventoryRenderer.WaterParticles().endFrame();\r\n        InventoryRenderer.SugarParticles().endFrame();\r\n    }\r\n    // static geometry = new PlaneBufferGeometry(1, 1);\r\n    // static waterMaterial = new MeshBasicMaterial({\r\n    //     // map: textureFromSpritesheet(0, 1),\r\n    //     transparent: true,\r\n    //     opacity: 0.75,\r\n    //     // color: new Color(\"rgb(12, 41, 255)\"),\r\n    //     // color: new Color(\"rgb(29, 42, 255)\"),\r\n    //     color: new Color(\"rgb(9, 12, 255)\"),\r\n    //     side: DoubleSide,\r\n    // });\r\n    // static sugarMaterial = lazy(() => new MeshBasicMaterial({\r\n    //     map: textureFromSpritesheet(42, 12, \"transparent\"),\r\n    //     transparent: true,\r\n    //     opacity: 0.9,\r\n    //     color: \"yellow\",\r\n    //     // color: new Color(\"yellow\"),\r\n    //     side: DoubleSide,\r\n    // }));\r\n    public animationOffset = 0;\r\n    // public object = new Object3D();\r\n    public waters: Vector2[] = [];\r\n    public sugars: Vector2[] = [];\r\n    constructor(target: Inventory, scene: Scene, mito: Mito) {\r\n        super(target, scene, mito);\r\n        target.on(\"get\", this.handleGetResources);\r\n        target.on(\"give\", this.handleGiveResources);\r\n        // this.object.name = \"InventoryRenderer Object\";\r\n        // this.object.position.z = 1;\r\n        // this.object.updateMatrix();\r\n        // this.object.matrixAutoUpdate = false;\r\n        for (let i = 0; i < this.target.water; i++) {\r\n            this.waters.push(newParticle());\r\n        }\r\n        for (let i = 0; i < this.target.sugar; i++) {\r\n            this.sugars.push(newParticle());\r\n        }\r\n    }\r\n    private handleGetResources = (giver: Inventory) => {\r\n        let wantedMeshes = Math.ceil(this.target.water);\r\n        while (this.waters.length < wantedMeshes) {\r\n            const v = giver.carrier.pos.clone().sub(this.target.carrier.pos);\r\n            v.x += (Math.random() - 0.5) * 0.1;\r\n            v.y += (Math.random() - 0.5) * 0.1;\r\n            this.waters.push(v);\r\n        }\r\n\r\n        wantedMeshes = Math.ceil(this.target.sugar);\r\n        while (this.sugars.length < wantedMeshes) {\r\n            const v = giver.carrier.pos.clone().sub(this.target.carrier.pos);\r\n            v.x += (Math.random() - 0.5) * 0.1;\r\n            v.y += (Math.random() - 0.5) * 0.1;\r\n            this.sugars.push(v);\r\n        }\r\n    }\r\n\r\n    private handleGiveResources = () => {\r\n        let wantedMeshes = Math.ceil(this.target.water);\r\n        if (this.waters.length > wantedMeshes) {\r\n            this.waters.splice(wantedMeshes, this.waters.length - wantedMeshes);\r\n        }\r\n\r\n        wantedMeshes = Math.ceil(this.target.sugar);\r\n        if (this.sugars.length > wantedMeshes) {\r\n            this.sugars.splice(wantedMeshes, this.sugars.length - wantedMeshes);\r\n        }\r\n    }\r\n\r\n    private updateNumParticles(resource: number) {\r\n        // while (resourceArray.length < wantedMeshes) {\r\n        //     this.newParticle(resourceArray);\r\n        // }\r\n        // if (resourceArray.length > wantedMeshes) {\r\n        //     resourceArray.splice(wantedMeshes, resourceArray.length - wantedMeshes);\r\n        // }\r\n    }\r\n\r\n    private commitParticles(particles: ResourceParticles, resource: number, resourceArray: Vector2[]) {\r\n        if (resourceArray.length > 0) {\r\n            for (let i = 0; i < resourceArray.length - 1; i++) {\r\n                const p = resourceArray[i];\r\n                particles.commit(p.x + this.target.carrier.pos.x, p.y + this.target.carrier.pos.y, 10, 1);\r\n                resource -= 1;\r\n            }\r\n            const p = resourceArray[resourceArray.length - 1];\r\n            const fract = resource;\r\n            particles.commit(p.x + this.target.carrier.pos.x, p.y + this.target.carrier.pos.y, 10, fract);\r\n        }\r\n    }\r\n\r\n    private simulateResourcePositions() {\r\n        const resources = this.waters.concat(this.sugars);\r\n        for (const r of resources) {\r\n            let vx = 0, vy = 0;\r\n            const angle = performance.now() / 3000 + this.animationOffset;\r\n            vx += Math.cos(angle) * 0.02;\r\n            // vel.y += Math.sin(performance.now() / 3000) * 0.1;\r\n            const goTowardsCenterStrength = 0.1 + r.length() * 0.1;\r\n            vx += -r.x * goTowardsCenterStrength;\r\n            vy += -r.y * goTowardsCenterStrength;\r\n            if (this.mito.world.player.pos.equals(this.target.carrier.pos)) {\r\n                const avoidPlayerStrength = Math.max(Math.min(map(r.lengthSq(), 0, 1, 3, -5), 3), 0);\r\n                const v = r.clone().multiplyScalar(avoidPlayerStrength * 0.2);\r\n                vx += v.x;\r\n                vy += v.y;\r\n            }\r\n            for (const l of resources) {\r\n                if (r === l) {\r\n                    break;\r\n                }\r\n                const dx = r.x - l.x;\r\n                const dy = r.y - l.y;\r\n                const lengthSq = dx * dx + dy * dy;\r\n                if (lengthSq > 0) {\r\n                    const strength = 0.003 / lengthSq;\r\n                    vx += dx * strength;\r\n                    vy += dy * strength;\r\n                }\r\n            }\r\n            r.x += vx;\r\n            r.y += vy;\r\n        }\r\n    }\r\n\r\n    update() {\r\n        this.updateNumParticles(this.target.water);\r\n        this.updateNumParticles(this.target.sugar);\r\n        this.simulateResourcePositions();\r\n        this.commitParticles(InventoryRenderer.WaterParticles(), this.target.water, this.waters);\r\n        this.commitParticles(InventoryRenderer.SugarParticles(), this.target.sugar, this.sugars);\r\n    }\r\n    destroy() {\r\n        // no-op\r\n    }\r\n}\r\n\r\nfunction newParticle() {\r\n    return new Vector2((Math.random() - 0.5) * 0.01, (Math.random() - 0.5) * 0.01);\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nimport { MOVEMENT_KEYS } from \"./keymap\";\r\n\r\nconst fontMeshGeometry = new THREE.PlaneGeometry(1, 1);\r\nfontMeshGeometry.rotateX(Math.PI);\r\nfunction createFontMesh(char: string) {\r\n    const size = 64;\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = size;\r\n    canvas.height = size;\r\n    const context = canvas.getContext(\"2d\")!;\r\n\r\n    context.font = `${size * 0.5}px monospace`;\r\n    context.textAlign = \"center\";\r\n    context.textBaseline = \"middle\";\r\n    context.fillStyle = \"white\";\r\n    context.fillText(char, size / 2, size / 2);\r\n    // context.strokeStyle = \"black\";\r\n    // context.strokeText(char, size / 2, size / 2);\r\n\r\n    const texture = new THREE.CanvasTexture(canvas);\r\n    // texture.magFilter = THREE.NearestFilter;\r\n    texture.flipY = true;\r\n\r\n    const mat = new THREE.MeshBasicMaterial({\r\n        map: texture,\r\n        transparent: true,\r\n        side: THREE.DoubleSide,\r\n    });\r\n    const mesh = new THREE.Mesh(\r\n        fontMeshGeometry,\r\n        mat,\r\n    );\r\n    return mesh;\r\n}\r\nexport const MOVEMENT_KEY_MESHES: Map<string, THREE.Mesh> = new Map();\r\nfor (const char in MOVEMENT_KEYS) {\r\n    MOVEMENT_KEY_MESHES.set(char, createFontMesh(char));\r\n}\r\n","import { Color, DoubleSide, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Scene } from \"three\";\r\n\r\nimport devlog from \"../../../common/devlog\";\r\nimport { Player } from \"../game\";\r\nimport { lerp2, Mito } from \"../index\";\r\nimport { MOVEMENT_KEYS } from \"../keymap\";\r\nimport { MOVEMENT_KEY_MESHES } from \"../movementKeyMeshes\";\r\nimport { textureFromSpritesheet } from \"../spritesheet\";\r\nimport { Renderer } from \"./Renderer\";\r\n\r\nexport class PlayerRenderer extends Renderer<Player> {\r\n    public mesh: Mesh;\r\n    constructor(target: Player, scene: Scene, mito: Mito) {\r\n        super(target, scene, mito);\r\n        this.mesh = new Mesh(new PlaneBufferGeometry(1, 1),\r\n            // new THREE.CircleBufferGeometry(0.5, 20),\r\n            new MeshBasicMaterial({\r\n                transparent: true,\r\n                depthWrite: false,\r\n                depthTest: false,\r\n                map: textureFromSpritesheet(29, 12, \"transparent\"),\r\n                color: new Color(\"white\"),\r\n                side: DoubleSide,\r\n            }));\r\n        devlog(\"created player renderer\");\r\n        lerp2(this.mesh.position, this.target.pos, 1);\r\n        this.mesh.position.z = 2;\r\n        this.scene.add(this.mesh);\r\n    }\r\n    update() {\r\n        lerp2(this.mesh.position, this.target.droopPos(), 0.5);\r\n        // lerp2(this.mesh.position, this.target.droopPos(), 1.0);\r\n        this.mesh.position.z = 2;\r\n        for (const [key, keyMesh] of MOVEMENT_KEY_MESHES) {\r\n            const action = MOVEMENT_KEYS[key];\r\n            const x = this.target.pos.x + action.dir.x;\r\n            const y = this.target.pos.y + action.dir.y;\r\n            if (this.target.isBuildCandidate(this.mito.world.tileAt(x, y)) && this.mito.uiState.type === \"main\") {\r\n                this.scene.add(keyMesh);\r\n                keyMesh.position.x = x;\r\n                keyMesh.position.y = y;\r\n                keyMesh.position.z = 2;\r\n            } else {\r\n                this.scene.remove(keyMesh);\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        this.scene.remove(this.mesh);\r\n    }\r\n}\r\n","import { ArrowHelper, Audio, BufferGeometry, Color, DoubleSide, Float32BufferAttribute, Line, LineBasicMaterial, Material, Mesh, MeshBasicMaterial, Object3D, PlaneBufferGeometry, Scene, Vector2, Vector3 } from \"three\";\r\nimport lazy from \"../../../common/lazy\";\r\nimport { map } from \"../../../math/index\";\r\nimport { blopBuffer, suckWaterBuffer } from \"../audio\";\r\nimport { Constructor } from \"../constructor\";\r\nimport { Air, Cell, DeadCell, Fountain, Fruit, GrowingCell, hasEnergy, hasTilePairs, Leaf, Rock, Root, Soil, Tile, Tissue, Transport, Vein } from \"../game/tile\";\r\nimport { lerp2, Mito } from \"../index\";\r\nimport { hasInventory } from \"../inventory\";\r\nimport { params } from \"../params\";\r\nimport { fruitTexture, textureFromSpritesheet } from \"../spritesheet\";\r\nimport { InventoryRenderer } from \"./InventoryRenderer\";\r\nimport { Renderer } from \"./Renderer\";\r\n\r\nexport class TileMesh extends Mesh {\r\n    static geometry = new PlaneBufferGeometry(1, 1);\r\n    constructor(public renderer: TileRenderer) {\r\n        super(TileMesh.geometry, getMaterial(renderer.target) as MeshBasicMaterial);\r\n    }\r\n}\r\n\r\nexport class TileRenderer<T extends Tile = Tile> extends Renderer<T> {\r\n    // public object = new Object3D();\r\n    public mesh: TileMesh;\r\n    private inventoryRenderer?: InventoryRenderer;\r\n    private originalColor: Color;\r\n    private audio?: Audio;\r\n    private lastAudioValueTracker = 0;\r\n    private pairsLines: Object3D[] = [];\r\n    constructor(target: T, scene: Scene, mito: Mito) {\r\n        super(target, scene, mito);\r\n        if (this.target instanceof GrowingCell) {\r\n            this.growingRenderer = new TileRenderer(this.target.completedCell, this.scene, this.mito);\r\n            this.mesh = this.growingRenderer.mesh;\r\n        } else {\r\n            this.mesh = new TileMesh(this);\r\n        }\r\n        // this.object.name = \"TileRenderer Object\";\r\n\r\n        // if (this.target instanceof Air) {\r\n        //     const colorIndex = map(this.target.co2(), 0.40, 1.001, 0, AIR_COLORSCALE.length - 1);\r\n        //     const startColorIndex = Math.floor(colorIndex);\r\n        //     const startColor = AIR_COLORSCALE[startColorIndex];\r\n        //     this.originalColor = startColor.clone();\r\n        //     if (startColorIndex !== AIR_COLORSCALE.length - 1) {\r\n        //         const alpha = colorIndex - startColorIndex;\r\n        //         const endColorIndex = startColorIndex + 1;\r\n        //         const endColor = AIR_COLORSCALE[endColorIndex];\r\n        //         this.originalColor.lerp(endColor, alpha);\r\n        //     }\r\n        // } else {\r\n        this.originalColor = (this.mesh.material as MeshBasicMaterial).color.clone();\r\n        // }\r\n        // this.object.add(this.mesh);\r\n        if (hasInventory(this.target)) {\r\n            this.inventoryRenderer = new InventoryRenderer(this.target.inventory, this.scene, this.mito);\r\n            this.inventoryRenderer.animationOffset = (this.target.pos.x + this.target.pos.y) / 2;\r\n            // this.mesh.add(this.inventoryRenderer.object);\r\n        }\r\n        this.scene.add(this.mesh);\r\n        const zIndex = this.target instanceof Cell ? 1 : 0;\r\n        this.mesh.position.set(this.target.pos.x, this.target.pos.y, zIndex);\r\n        if (this.target instanceof Cell) {\r\n            // if it takes no turns to build, start it off small just for show\r\n            if (!(this.target.constructor as Constructor<Cell>).turnsToBuild) {\r\n                this.mesh.scale.set(0.01, 0.01, 1);\r\n            }\r\n        } else {\r\n            this.mesh.matrixAutoUpdate = false;\r\n        }\r\n        this.mesh.updateMatrix();\r\n        if (this.target instanceof Leaf || this.target instanceof Root) {\r\n            this.audio = new Audio(this.mito.audioListener);\r\n            this.mesh.add(this.audio);\r\n        }\r\n    }\r\n\r\n    steps(x: number, size: number) {\r\n        return Math.floor(x / size) * size;\r\n    }\r\n\r\n    private growingRenderer?: TileRenderer;\r\n    update() {\r\n        if (this.target instanceof GrowingCell) {\r\n            // const s = this.steps(1.001 - this.target.timeRemaining / params.cellGestationTurns, 0.05);\r\n            const s = map(1.001 - this.target.timeRemaining / this.target.timeToBuild, 0, 1, 0.2, 1);\r\n            lerp2(this.mesh.scale, {x: s, y: s}, 0.1);\r\n            // this.mesh.scale.x = s;\r\n            // this.mesh.scale.y = s;\r\n        } else {\r\n            lerp2(this.mesh.scale, new Vector2(1, 1), 0.1);\r\n        }\r\n        const lightAmount = this.target.lightAmount();\r\n        const mat = this.mesh.material as MeshBasicMaterial;\r\n        if (this.target instanceof Air) {\r\n            const colorIndex = Math.max(0, map(this.target.co2(), 1 / 6, 1.001, 0, AIR_COLORSCALE.length - 1));\r\n            const startColorIndex = Math.floor(colorIndex);\r\n            const startColor = AIR_COLORSCALE[startColorIndex];\r\n            this.originalColor = startColor.clone();\r\n            if (startColorIndex !== AIR_COLORSCALE.length - 1) {\r\n                const alpha = colorIndex - startColorIndex;\r\n                const endColorIndex = startColorIndex + 1;\r\n                const endColor = AIR_COLORSCALE[endColorIndex];\r\n                this.originalColor.lerp(endColor, alpha);\r\n            }\r\n        }\r\n        mat.color = new Color(0).lerp(this.originalColor, map(lightAmount, 0, 1, 0.2, 1));\r\n        if (this.target instanceof Cell) {\r\n            this.mesh.position.set(this.target.pos.x, this.target.pos.y + this.target.droopY, 1);\r\n        }\r\n        if (hasEnergy(this.target)) {\r\n            mat.color.lerp(new Color(0), 1 - this.target.energy / params.cellEnergyMax);\r\n        }\r\n        if (this.inventoryRenderer != null) {\r\n            if (lightAmount > 0) {\r\n                // will not render without an update\r\n                this.inventoryRenderer.update();\r\n            }\r\n        }\r\n        if (this.target instanceof Leaf && this.audio != null) {\r\n            const newAudioValueTracker = this.target.didConvert ? 1 : 0;\r\n            if (newAudioValueTracker !== this.lastAudioValueTracker && newAudioValueTracker > 0) {\r\n                this.audio.setBuffer(blopBuffer);\r\n                const dist = this.target.pos.distanceToSquared(this.mito.world.player.pos);\r\n                const volume = Math.min(1, 1 / (1 + dist / 25)) * this.target.sugarConverted * this.target.sugarConverted;\r\n                this.audio.setVolume(volume);\r\n                // this.audio.setRefDistance(2);\r\n                // play blop sound\r\n                this.audio.play();\r\n            }\r\n            this.lastAudioValueTracker = newAudioValueTracker;\r\n            // this.audio.setBuffer(blopBuffer);\r\n            // this.audio.setRefDistance(2);\r\n            // play blop sound\r\n            // this.audio.play();\r\n        }\r\n        if (this.target instanceof Root && this.audio != null) {\r\n            const newAudioValueTracker = this.target.waterTransferAmount;\r\n            if (newAudioValueTracker !== this.lastAudioValueTracker) {\r\n                this.audio.setBuffer(suckWaterBuffer);\r\n                const baseVolume = this.target.waterTransferAmount / (2 + this.target.waterTransferAmount);\r\n                const dist = this.target.pos.distanceToSquared(this.mito.world.player.pos);\r\n                const volume = Math.min(1, 1 / (1 + dist / 25)) * baseVolume;\r\n                this.audio.setVolume(volume);\r\n                if (this.audio.source != null) {\r\n                    this.audio.stop();\r\n                }\r\n                this.audio.play();\r\n            }\r\n            this.lastAudioValueTracker = newAudioValueTracker;\r\n        }\r\n        if (hasTilePairs(this.target)) {\r\n            const pairColor = this.target instanceof Leaf ? 0xffc90e : new Color(\"rgb(9, 12, 255)\").getHex();\r\n            const pairs = this.target.tilePairs;\r\n            if (pairs.length !== this.pairsLines.length) {\r\n                // redo pairs\r\n                this.pairsLines.forEach((line) => this.mesh.remove(line));\r\n                this.pairsLines = pairs.map((dir) => {\r\n                    const length = dir.length() * 2 - 0.25;\r\n                    const arrowDir = new Vector3(dir.x, dir.y, 0).normalize();\r\n                    const arrowHelper = this.makeLine(arrowDir, arrowDir.clone().multiplyScalar(-length / 2), length, pairColor);\r\n                    this.mesh.add(arrowHelper);\r\n                    return arrowHelper;\r\n                });\r\n            }\r\n        }\r\n        if (this.hasActiveNeighbors(this.target)) {\r\n            const color = this.target instanceof Root ? new Color(\"rgb(9, 12, 255)\").getHex() : 0xffffff;\r\n            const lines = this.target.activeNeighbors;\r\n            if (lines.length !== this.pairsLines.length) {\r\n                // redo pairs\r\n                this.pairsLines.forEach((line) => this.mesh.remove(line));\r\n                this.pairsLines = lines.map((dir) => {\r\n                    const length = dir.length() - 0.25;\r\n                    const arrowDir = new Vector3(dir.x, dir.y, 0).normalize();\r\n                    const arrowHelper =\r\n                        this.target instanceof Root\r\n                        ? this.makeLine(arrowDir, new Vector3(), length, color)\r\n                        : new ArrowHelper(arrowDir, new Vector3(0, 0, 5), length, color);\r\n                    this.mesh.add(arrowHelper);\r\n                    return arrowHelper;\r\n                });\r\n            }\r\n        }\r\n    }\r\n    hasActiveNeighbors(t: any): t is {\r\n        activeNeighbors: Vector2[];\r\n    } {\r\n        return Array.isArray(t.activeNeighbors);\r\n    }\r\n    static lineGeometry = (() => {\r\n        const g = new BufferGeometry();\r\n        g.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\r\n        return g;\r\n    })();\r\n    private makeLine(dir: Vector3, origin: Vector3, length: number, color: number) {\r\n        // copied from https://github.com/mrdoob/js/blob/master/src/helpers/ArrowHelper.js\r\n        const line = new Line(TileRenderer.lineGeometry, new LineBasicMaterial({ color: color }));\r\n        line.position.copy(origin);\r\n        // dir is assumed to be normalized\r\n        if (dir.y > 0.99999) {\r\n            line.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < -0.99999) {\r\n            line.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            const axis = new Vector3(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            line.quaternion.setFromAxisAngle(axis, radians);\r\n        }\r\n        line.scale.set(1, Math.max(0, length), 1);\r\n        line.position.z = 0.1;\r\n        line.updateMatrix();\r\n        line.matrixAutoUpdate = false;\r\n        return line;\r\n    }\r\n    destroy() {\r\n        this.scene.remove(this.mesh);\r\n        if (this.inventoryRenderer != null) {\r\n            this.inventoryRenderer.destroy();\r\n        }\r\n    }\r\n}\r\n\r\nconst materialMapping = lazy(() => {\r\n    const materials = new Map<Constructor<Tile>, Material>();\r\n    materials.set(Air, new MeshBasicMaterial({\r\n        side: DoubleSide,\r\n        depthWrite: false,\r\n    }));\r\n    materials.set(Soil, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(8, 11),\r\n        // map: textureFromSpritesheet(41, 26),\r\n        // map: textureFromSpritesheet(679 / 16, 438 / 16),\r\n        side: DoubleSide,\r\n        // color: new Color(0xcccccc),\r\n        color: new Color(\"rgb(112, 89, 44)\"),\r\n        depthWrite: false,\r\n    }));\r\n    materials.set(Fountain, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(56 / 16, 38 / 16),\r\n        side: DoubleSide,\r\n    }));\r\n    materials.set(Rock, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(26, 20),\r\n        side: DoubleSide,\r\n        color: new Color(\"rgb(63, 77, 84)\"),\r\n    }));\r\n    materials.set(DeadCell, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(137 / 16, 374 / 16),\r\n        side: DoubleSide,\r\n        color: new Color(\"rgb(128, 128, 128)\"),\r\n    }));\r\n    materials.set(Tissue, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(6, 31),\r\n        side: DoubleSide,\r\n        color: new Color(0x30ae25),\r\n    }));\r\n    materials.set(Transport, materials.get(Tissue)!);\r\n    // materialMapping.set(Transport, new MeshBasicMaterial({\r\n    //     map: arrowUpMaterial(),\r\n    //     side: DoubleSide,\r\n    //     color: new Color(\"rgb(42, 138, 25)\"),\r\n    // }));\r\n    materials.set(Leaf, new MeshBasicMaterial({\r\n        // map: textureFromSpritesheet(9, 31),\r\n        map: textureFromSpritesheet(55 / 16, 280 / 16),\r\n        // map: textureFromSpritesheet(16, 10),\r\n        side: DoubleSide,\r\n    }));\r\n    materials.set(Root, new MeshBasicMaterial({\r\n        // map: textureFromSpritesheet(0, 31),\r\n        map: textureFromSpritesheet(59 / 16, 327 / 16),\r\n        side: DoubleSide,\r\n    }));\r\n    materials.set(Fruit, new MeshBasicMaterial({\r\n        map: fruitTexture,\r\n        side: DoubleSide,\r\n        transparent: true,\r\n    }));\r\n    materials.set(Vein, new MeshBasicMaterial({\r\n        map: textureFromSpritesheet(Math.floor(184 / 16), Math.floor(152 / 16)),\r\n        side: DoubleSide,\r\n    }));\r\n\r\n    return materials;\r\n});\r\n\r\nfunction getMaterial(tile: Tile) {\r\n    // careful - creates a new instance per tile\r\n    return materialMapping().get(tile.constructor as Constructor<Tile>)!.clone();\r\n}\r\n\r\n// const AIR_COLORSCALE = [\r\n//     new Color(\"rgb(91, 117, 154)\"),\r\n//     new Color(\"rgb(158, 179, 196)\"),\r\n//     new Color(\"hsv(35, 7%, 99%)\"),\r\n// ];\r\n// const AIR_COLORSCALE = [\r\n//     new Color(\"hsl(14, 81%, 52%)\"),\r\n//     new Color(\"hsl(34, 61%, 72%)\"),\r\n//     new Color(\"hsl(61, 54%, 87%)\"),\r\n//     new Color(\"hsl(67, 35%, 99%)\"),\r\n//     new Color(\"hsl(213, 63%, 52%)\"),\r\n//     // new Color(\"hsl(37, 35%, 99%)\"),\r\n// ];\r\n// const AIR_COLORSCALE = [\r\n//     new Color(\"hsl(34, 61%, 56%)\"),\r\n//     new Color(\"hsl(67, 31%, 55%)\"),\r\n//     new Color(\"hsl(213, 63%, 58%)\"),\r\n//     // new Color(\"hsl(37, 35%, 99%)\"),\r\n// ];\r\nconst AIR_COLORSCALE = [\r\n    // new Color(\"hsl(67, 31%, 55%)\"),\r\n    new Color(\"hsl(67, 31%, 25%)\"),\r\n    new Color(\"hsl(180, 31%, 76%)\"),\r\n    new Color(\"hsl(213, 63%, 58%)\"),\r\n];\r\n// const AIR_COLORSCALE = [\r\n//     new Color(\"rgb(146, 215, 255)\"),\r\n//     new Color(\"rgb(53, 125, 210)\"),\r\n//     new Color(\"rgb(56, 117, 154)\"),\r\n// ];\r\n","import { ArrowHelper, Object3D, Scene, Vector2, Vector3 } from \"three\";\r\n\r\nimport Mito from \"..\";\r\nimport { Transport } from \"../game/tile\";\r\nimport { TileRenderer } from \"./TileRenderer\";\r\n\r\nexport class TransportRenderer extends TileRenderer<Transport> {\r\n    private arrow?: Object3D;\r\n    constructor(target: Transport, scene: Scene, mito: Mito) {\r\n        super(target, scene, mito);\r\n        this.arrow = this.makeArrow(this.target.dir);\r\n        this.mesh.add(this.arrow);\r\n    }\r\n\r\n    // update() {\r\n    //     super.update();\r\n    //     const from = this.target.getFrom();\r\n    //     if (from == null && this.fromArrow != null) {\r\n    //         this.mesh.remove(this.fromArrow);\r\n    //         this.fromArrow = undefined;\r\n    //     }\r\n    //     if (from != null && this.fromArrow == null) {\r\n    //         this.fromArrow = this.makeArrow(this.target.dir, this.target.dir.clone().multiplyScalar(-1));\r\n    //         this.mesh.add(this.fromArrow);\r\n    //     }\r\n\r\n    //     const to = this.target.getTarget();\r\n    //     if (to == null && this.toArrow != null) {\r\n    //         this.mesh.remove(this.toArrow);\r\n    //         this.toArrow = undefined;\r\n    //     }\r\n    //     if (to != null && this.toArrow == null) {\r\n    //         this.toArrow = this.makeArrow(this.target.dir, this.target.dir.clone().multiplyScalar(0));\r\n    //         this.mesh.add(this.toArrow);\r\n    //     }\r\n    // }\r\n\r\n    private makeArrow(dir: Vector2) {\r\n        const length = dir.length() - 0.25;\r\n        const arrowDir = new Vector3(dir.x, dir.y, 0).normalize();\r\n        const pos = arrowDir.clone().multiplyScalar(-length / 2);\r\n        return new ArrowHelper(arrowDir, new Vector3(pos.x, pos.y, 1), length, 0xffffff, 0.1, 0.1);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\ninterface SceneObjectProps {\r\n    object: THREE.Object3D;\r\n    parent: THREE.Object3D;\r\n    // children?: SceneObject[];\r\n}\r\nexport class SceneObject extends React.PureComponent<SceneObjectProps, {}> {\r\n    // render() {\r\n    //     if (this.props.children) {\r\n    //         return <>\r\n    //             {\r\n    //                 this.props.children.map((child) => React.cloneElement(child, { parent: this.props.object }))\r\n    //             }\r\n    //         </>;\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.parent.add(this.props.object);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.parent.remove(this.props.object);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\nimport lazy from \"../../../common/lazy\";\r\nimport { SceneObject } from \"./sceneObject\";\r\n\r\nexport const TILE_HIGHLIGHT = lazy(() => {\r\n    const geometry = new THREE.PlaneBufferGeometry(1, 1);\r\n    const edgesGeometry = new THREE.EdgesGeometry(geometry, 1); // or WireframeGeometry( geometry )\r\n    const material = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.75 });\r\n    const lineSegments = new THREE.LineSegments(edgesGeometry, material);\r\n    lineSegments.position.z = 10;\r\n    return lineSegments;\r\n});\r\n\r\nexport interface TileHighlightProps {\r\n    x: number;\r\n    y: number;\r\n    scene: THREE.Scene;\r\n}\r\n\r\nclass TileHighlight extends React.PureComponent<TileHighlightProps, {}> {\r\n    private object = TILE_HIGHLIGHT().clone();\r\n    render() {\r\n        this.object.position.x = this.props.x;\r\n        this.object.position.y = this.props.y;\r\n        return <>\r\n            <Animate a={((t) => this.object.scale.setScalar(Math.sin(t * 3.7) * 0.04 + 0.94))} />\r\n            <SceneObject object={this.object} parent={this.props.scene} />\r\n        </>;\r\n    }\r\n}\r\n\r\nclass Animate extends React.Component<{a: (time: number) => void}> {\r\n    private rafid?: number;\r\n\r\n    private animate = (time: number) => {\r\n        this.props.a(time / 1000);\r\n        this.rafid = requestAnimationFrame(this.animate);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.rafid = requestAnimationFrame(this.animate);\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.rafid) {\r\n            cancelAnimationFrame(this.rafid);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TileHighlight;\r\n","import * as React from \"react\";\r\n\r\nimport Mito from \"..\";\r\nimport { Action } from \"../action\";\r\n\r\nexport interface TutorialProps {\r\n    time: number;\r\n    mito: Mito;\r\n    scene: THREE.Scene;\r\n    onFulfilled: () => void;\r\n}\r\n\r\nexport abstract class Tutorial<P = {}, S = {}> extends React.PureComponent<P & TutorialProps, S> {\r\n    componentDidUpdate() {\r\n        if (this.isFulfilled()) {\r\n            this.props.onFulfilled();\r\n        }\r\n    }\r\n    abstract onActionPerformed(action: Action): void;\r\n    abstract isFulfilled(): boolean;\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { Action } from \"../action\";\r\nimport { World } from \"../game\";\r\nimport { Air, Leaf, Root, Soil, Tile, Tissue } from \"../game/tile\";\r\nimport { BUILD_HOTKEYS } from \"../keymap\";\r\nimport TileHighlight from \"./tileHighlight\";\r\nimport { Tutorial } from \"./tutorial\";\r\n\r\nexport class TutorialBuildTissue extends Tutorial {\r\n    state = {\r\n        counter: 0,\r\n    };\r\n    render() {\r\n        const buildCandidateHighlights: JSX.Element[] = [];\r\n        for (const candidate of findBuildCandidateTiles(this.props.mito.world)) {\r\n            buildCandidateHighlights.push(\r\n                <TileHighlight\r\n                    key={candidate.pos.x + \",\" + candidate.pos.y}\r\n                    x={candidate.pos.x}\r\n                    y={candidate.pos.y}\r\n                    scene={this.props.scene}\r\n                />,\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {buildCandidateHighlights}\r\n\r\n                <div className=\"tutorial-build tutorial-build-tissue\">\r\n                    Build <b>Tissue (T) to grow</b>.\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    onActionPerformed(action: Action) {\r\n        if (action.type === \"build\" && action.cellType === Tissue) {\r\n            this.setState({ counter: this.state.counter + 1 });\r\n        }\r\n    }\r\n\r\n    isFulfilled() {\r\n        return this.state.counter >= 3;\r\n    }\r\n}\r\n\r\nfunction findBuildCandidateTiles(\r\n        world: World,\r\n        predicate?: ((tile: Tile) => boolean)) {\r\n    const entityPredicate: (tile: Tile) => boolean = (t) => (world.player.isWalkable(t));\r\n    const candidates: Set<Tile> = new Set();\r\n    for (const entity of world.entities()) {\r\n        if (entity instanceof Tile && entityPredicate(entity)) {\r\n            for (const [, neighbor] of world.tileNeighbors(entity.pos)) {\r\n                if (!(neighbor instanceof Tissue) && !neighbor.isObstacle) {\r\n                    if (predicate == null) {\r\n                        candidates.add(neighbor);\r\n                    } else if (predicate(neighbor)) {\r\n                        candidates.add(neighbor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return candidates;\r\n}\r\n\r\nexport class TutorialBuildRoot extends Tutorial {\r\n    state = {\r\n        counter: 0,\r\n    };\r\n    constructor(props: any) {\r\n        super(props);\r\n        BUILD_HOTKEYS.r = Root;\r\n    }\r\n    render() {\r\n        const buildCandidateHighlights: JSX.Element[] = [];\r\n        for (const candidate of findBuildCandidateTiles(this.props.mito.world, (t) => t instanceof Soil)) {\r\n            buildCandidateHighlights.push(\r\n                <TileHighlight\r\n                    key={candidate.pos.x + \",\" + candidate.pos.y}\r\n                    x={candidate.pos.x}\r\n                    y={candidate.pos.y}\r\n                    scene={this.props.scene}\r\n                />,\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {buildCandidateHighlights}\r\n\r\n                <div className=\"tutorial-build tutorial-build-root\">\r\n                    Great job! Now, build <b>Roots (R) to gather water</b>.\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    onActionPerformed(action: Action) {\r\n        if (action.type === \"build\" && action.cellType === Root) {\r\n            this.setState({ counter: this.state.counter + 1 });\r\n        }\r\n    }\r\n\r\n    isFulfilled() {\r\n        return this.state.counter >= 3;\r\n    }\r\n}\r\n\r\nexport class TutorialBuildLeaf extends Tutorial {\r\n    state = {\r\n        counter: 0,\r\n    };\r\n    constructor(props: any) {\r\n        super(props);\r\n        BUILD_HOTKEYS.f = Leaf;\r\n    }\r\n    render() {\r\n        const buildCandidateHighlights: JSX.Element[] = [];\r\n        for (const candidate of findBuildCandidateTiles(this.props.mito.world, (t) => t instanceof Air)) {\r\n            buildCandidateHighlights.push(\r\n                <TileHighlight\r\n                    key={candidate.pos.x + \",\" + candidate.pos.y}\r\n                    x={candidate.pos.x}\r\n                    y={candidate.pos.y}\r\n                    scene={this.props.scene}\r\n                />,\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {buildCandidateHighlights}\r\n\r\n                <div className=\"tutorial-build tutorial-build-leaf\">\r\n                    Fantastic. build <b>Leaf (F) to convert Water to Sugar</b>.\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    onActionPerformed(action: Action) {\r\n        if (action.type === \"build\" && action.cellType === Leaf) {\r\n            this.setState({ counter: this.state.counter + 1 });\r\n        }\r\n    }\r\n\r\n    isFulfilled() {\r\n        return this.state.counter >= 3;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { params } from \"../params\";\r\n\r\ninterface InstructionsProps {\r\n    play: () => void;\r\n}\r\nexport class Instructions extends React.PureComponent<InstructionsProps, {}> {\r\n    render() {\r\n        return (<div className=\"mito-instructions\">\r\n            <div className=\"mito-instructions-container\">\r\n                <div className=\"esc\" onClick={() => this.props.play()}>Back (Esc)</div>\r\n                <h1>Mito</h1>\r\n                <div className=\"play-button\" onClick={() => this.props.play()}>\r\n                    Play\r\n                    </div>\r\n                <p>\r\n                    <ol>\r\n                        <li>Build Tissue to expand your reach (press t and walk into empty space).</li>\r\n                        <li>Build Roots (press r) underground to suck up adjacent water.</li>\r\n                        <li>Build Leaves (press l) above ground and drop water (press 1) to convert water into sugar.</li>\r\n                        <li><b>Win the game by building and loading the Fruit with 1000 sugar.</b></li>\r\n                        <li>Click around to see the different properties of each tile.</li>\r\n                        <li>Build leaves early.</li>\r\n                        <li>Leaves higher up have better water/sugar ratios, determined by the co2 percentage in the air.</li>\r\n                        <li>Explore underground for water reservoires and Fountains.</li>\r\n                        <li>Build transports (capital T) to carry water back up the plant.</li>\r\n                        <li>You can scroll out infinitely far.</li>\r\n                    </ol>\r\n                </p>\r\n                <h3>You</h3>\r\n                <p>\r\n                    You can carry max {params.maxResources} resources, and you automatically suck in any resources you're standing over.\r\n                    You can only walk on Tissue (and Transport).\r\n                    You start at the center of the map, with soil below and air above.\r\n                    </p>\r\n                <h3>Soil and Underground</h3>\r\n                <p>\r\n                    Underground, Soil holds water, rocks block your way, and occasionally Fountains (at the very bottom) are a permanent source of water.\r\n                        Soil holds up to {params.soilMaxWater} water at a time.\r\n                        Fountains emit one water per {params.fountainTurnsPerWater} turns.\r\n                    </p>\r\n                <h3>Air and Aboveground</h3>\r\n                <p>\r\n                    Aboveground, Air provides both sunlight and co2.\r\n                    Sunlight determines the ratio of waters-per-sugar at which reactions happen and are affected by shadows.\r\n                    Co2 determines the speed of reaction and gets better as you build higher up. Orange is low co2, blue is high co2.\r\n                    Gravity will pull down on your structures, so make sure they're structurally sound.\r\n                    Your structures cast shadows on the leaves below in relation to the sun, which gently sways left to right.\r\n                    </p>\r\n                <h3>Water</h3>\r\n                <p>\r\n                    Water is one of the main two resources.\r\n                        Water slowly diffuses from high to low densities (difference 2 required) at about 1 unit per {(1 / params.soilDiffusionWater).toFixed(0)} turns.\r\n                    Obtain water in the ground through Roots. Leaves require water to photosynthesize. You require water to build.\r\n                    </p>\r\n                <h3>Sugar</h3>\r\n                <p>\r\n                    Sugar is the other main resource. Sugar does not diffuse. Leaves convert water into sugar. Obtain sugar by putting\r\n                    water next to leaves. Cells require sugar to survive. You require sugar to build.\r\n                    </p>\r\n                <h3>Building</h3>\r\n                <p>\r\n                    Build Tissue, Leaves, Roots, and The Fruit by toggling \"build mode\" on and walking into Air or Soil.\r\n                    Build Transport over existing tissue by walking around. Building costs 1 sugar and 1 water.\r\n                    You can build Tissue over Leaves and Roots - be careful!\r\n                    When you build above ground, Cells will Droop if they're not properly supported underneath them.\r\n                    </p>\r\n                <h3>Cells</h3>\r\n                <p>\r\n                    All cells require energy upkeep and will automatically eat sugar on their tile, or get energy from their neighbors.\r\n                        Each cell consumes 1 sugar every {params.cellEnergyMax} turns.\r\n                    </p>\r\n                <h3>Tissue</h3>\r\n                <p>\r\n                    Tissue connects your plant together, you may only walk on Tissue. Each Tissue carries up to {params.tissueInventoryCapacity} resources.\r\n                    </p>\r\n                <h3>Roots</h3>\r\n                <p>\r\n                    Roots are the only way to get water. Each turn Roots transport one water per neighboring soil into the Tissue in the\r\n                    opposite direction (so the Tissue North of the root get water in the South tile). This is called a Pairing.\r\n                    </p>\r\n                <h3>Leaves</h3>\r\n                <p>\r\n                    When exposed to Air, Leaves convert water to sugar. Leaves also use Pairings between opposite direction Air/Tissue with water.\r\n                        In perfect co2, leave produce on average 1 sugar per {(1 / params.leafReactionRate).toFixed(0)} turns per pair.\r\n                    Leaf efficiency is heavily influenced by co2 and sunlight of its neighboring Air.\r\n                    If your leaf is in too much shadow, it will not be able to photosynthesize.\r\n                    Leaves higher up produce sugar faster.\r\n                    </p>\r\n                <h3>Transport</h3>\r\n                <p>\r\n                    Transports move 1 water from its own Tile in the direction it was laid per turn, as well as moving you. Transport hungers at double speed.\r\n                    </p>\r\n                <h3>The Fruit</h3>\r\n                <p>\r\n                    You can only build one Fruit, and it is the goal of the game to fill it up with resources. Fruit has up to 1000 sugar storage\r\n                    and aggressively pulls in every available sugar in its surrounding vicinity.\r\n                    </p>\r\n                {this.renderCredit()}\r\n            </div>\r\n        </div>);\r\n    }\r\n    renderCredit() {\r\n        return (<>\r\n            <h2>Attribution</h2>\r\n            <p>\r\n                Tiles: <a href=\"http://kenney.nl/assets?s=roguelike\" target=\"_blank\" rel=\"noopener noreferrer\">Kenney.nl Roguelike Assets</a>\r\n            </p>\r\n            <p>\r\n                Pop sound when leaves convert: <a href=\"http://soundbible.com/2067-Blop.html\" target=\"_blank\" rel=\"noopener noreferrer\">Blop by Mark DiAngelo</a> (<a href=\"https://creativecommons.org/licenses/by/3.0/us/\">CC BY 3.0 US</a>)\r\n                </p>\r\n            <p>\r\n                Perlin noise: <a href=\"https://github.com/josephg/noisejs\" target=\"_blank\" rel=\"noopener noreferrer\">josephg/noisejs</a>\r\n            </p>\r\n            <p>\r\n                Part of 7drl 2018: <a href=\"http://7drl.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://7drl.org/</a>\r\n            </p>\r\n            <p>\r\n                Fruit icon: <a href='https://www.freepik.com/free-vector/fruits-set-pixel-icons_1001072.htm'>Designed by Freepik</a>\r\n            </p>\r\n        </>);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Mito, { GameState } from \"../index\";\r\nimport { Instructions } from \"./Instructions\";\r\n\r\nexport interface GameStackProps {\r\n    mito: Mito;\r\n    state: GameState;\r\n}\r\nexport class GameStack extends React.PureComponent<GameStackProps> {\r\n    handlePlay = () => {\r\n        this.props.mito.gameState = \"main\";\r\n    };\r\n    public render() {\r\n        const style: React.CSSProperties = {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            position: \"absolute\",\r\n            background: \"rgba(255, 255, 255, 0.95)\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            fontSize: \"40px\",\r\n        };\r\n        if (this.props.state === \"main\") {\r\n            return null;\r\n        } else if (this.props.state === \"win\") {\r\n            return (<div className=\"screen-win\" style={style}>\r\n                You won!\r\n                </div>);\r\n        } else if (this.props.state === \"lose\") {\r\n            return (<div className=\"screen-lose\" style={style}>\r\n                You lost!\r\n                </div>);\r\n        } else if (this.props.state === \"instructions\") {\r\n            return <Instructions play={this.handlePlay} />;\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport * as React from \"react\";\r\n\r\nimport { Constructor } from \"../constructor\";\r\nimport { Air, Cell, Fountain, GrowingCell, hasEnergy, Leaf, Root, Tile } from \"../game/tile\";\r\nimport { hasInventory } from \"../inventory\";\r\nimport { params } from \"../params\";\r\n\r\ninterface HoveredTileInfoProps {\r\n    tile?: Tile;\r\n}\r\n\r\nexport class HoveredTileInfo extends React.Component<HoveredTileInfoProps> {\r\n    public render() {\r\n        const { tile } = this.props;\r\n        if (!tile) {\r\n            return null;\r\n        }\r\n        return (<div className=\"tile-hover\">\r\n            { this.tileInfo(tile) }\r\n            { this.inventoryInfo(tile) }\r\n            { this.cellInfo(tile) }\r\n            { this.growingCellInfo(tile) }\r\n            { this.rootInfo(tile) }\r\n            { this.leafInfo(tile) }\r\n            { this.airInfo(tile) }\r\n            { this.fountainInfo(tile) }\r\n        </div>);\r\n    }\r\n    private rootInfo(tile: Tile) {\r\n        return tile instanceof Root ? (<div className=\"info-root\">\r\n            <div>{tile.cooldown} turns until next water suck</div>\r\n            <div>{tile.waterTransferAmount.toFixed(0)} water transfer per round</div>\r\n        </div>) : null;\r\n    }\r\n    private leafInfo(tile: Tile) {\r\n        return tile instanceof Leaf ? (<div className=\"info-leaf\">\r\n            <div>{(1 / (tile.averageSpeed * params.leafReactionRate)).toFixed(0)} turns per reaction</div>\r\n            <div>{(1 / tile.averageEfficiency).toFixed(2)} water per sugar</div>\r\n        </div>) : null;\r\n    }\r\n    private airInfo(tile: Tile) {\r\n        if (tile instanceof Air) {\r\n            return (<div className=\"info-air\">\r\n                <div>☀️ {(tile.sunlight() * 100).toFixed(0)}%</div>\r\n                <div>☁️ {(tile.co2() * 100).toFixed(0)}%</div>\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    private fountainInfo(tile: Tile) {\r\n        if (tile instanceof Fountain) {\r\n            return (<div className=\"info-fountain\">\r\n                <div>{tile.turnsPerWater} turns per water</div>\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    private tileInfo(tile: Tile) {\r\n        const energyInfo = (hasEnergy(tile)) ? (<span className=\"info-energy\">💚{(tile.energy / params.cellEnergyMax * 100).toFixed(0)}%</span>) : null;\r\n        return (<div className=\"info-tile\">\r\n            <div className=\"info-tile-name\">{(tile.constructor as Constructor<Tile>).displayName}</div>\r\n            {energyInfo}\r\n        </div>);\r\n    }\r\n    private inventoryInfo(tile: Tile) {\r\n        if (hasInventory(tile)) {\r\n            const waterInfo = (tile.inventory.water > 0)\r\n                ? <div className=\"info-inventory-item\">💧 {tile.inventory.water.toFixed(2)}</div>\r\n                : null;\r\n            const sugarInfo = (tile.inventory.sugar > 0)\r\n                ? <div className=\"info-inventory-item\">Sugar {tile.inventory.sugar.toFixed(2)}</div>\r\n                : null;\r\n            return <div className=\"info-inventory\">{waterInfo}{sugarInfo}</div>;\r\n        }\r\n    }\r\n    private cellInfo(tile: Tile) {\r\n        if (tile instanceof Cell) {\r\n            if (tile.droopY * 200 > 1) {\r\n                return <div className=\"info-cell\">{(tile.droopY * 200).toFixed(0)}% droop</div>;\r\n            }\r\n        }\r\n    }\r\n    private growingCellInfo(tile: Tile) {\r\n        if (tile instanceof GrowingCell) {\r\n            return <div className=\"info-growing-cell\">{(100 - (tile.timeRemaining / tile.timeToBuild) * 100).toFixed(0)}% mature</div>\r\n        }\r\n    }\r\n}\r\n","import classnames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nimport { Constructor } from \"../constructor\";\r\nimport { Cell, Fruit, Leaf, Root, Tissue, Transport } from \"../game/tile\";\r\nimport { World } from \"../game/world\";\r\nimport { UIState } from \"../index\";\r\nimport { BUILD_HOTKEYS } from \"../keymap\";\r\nimport { params } from \"../params\";\r\n\r\nexport interface HUDProps {\r\n    world: World;\r\n    autoplace: Constructor<Cell> | undefined;\r\n    mouseX: number;\r\n    mouseY: number;\r\n    water: number;\r\n    sugar: number;\r\n    expanded?: boolean;\r\n    uiState: UIState;\r\n    isTutorialFinished: boolean;\r\n    // onAutoplaceSet: (cellType: Constructor<Cell>) => void;\r\n    onTryActionKey: (key: string) => void;\r\n}\r\n\r\nexport class HUD extends React.PureComponent<HUDProps> {\r\n    public render() {\r\n        const isMaxed = this.props.water + this.props.sugar > params.maxResources - 1;\r\n        const isMaxedEl = <div className={`mito-inventory-maxed${isMaxed ? \" is-maxed\" : \"\"}`}>maxed</div>;\r\n        return (<>\r\n            <div className={classnames(\"mito-hud\", { hidden: !this.props.isTutorialFinished })}>\r\n\r\n                {this.renderFruitUI()}\r\n                {this.renderAllBuildButtons()}\r\n                {this.renderSecondEls()}\r\n                {this.renderDPad()}\r\n            </div>\r\n            <div className={classnames(\"mito-inventory\", { hidden: false })}>\r\n                {isMaxedEl}\r\n                <div className=\"mito-inventory-container\">\r\n                    {this.renderInventoryBar()}\r\n                    {this.renderInventory()}\r\n                </div>\r\n            </div>\r\n            {this.renderUIState()}\r\n            {this.renderAutoplacePopup()}\r\n        </>);\r\n    }\r\n    ensureCanvasFocus(e: React.SyntheticEvent<any>) {\r\n        e.preventDefault();\r\n        const canvas = document.getElementsByTagName(\"canvas\")[0];\r\n        canvas.focus();\r\n    }\r\n    renderButton(key: string, text: string | null, props?: React.HTMLProps<HTMLDivElement>) {\r\n        return (<div key={key} className=\"mito-hud-button mito-hud-build-item\" onClick={(e) => {\r\n            this.props.onTryActionKey(key);\r\n            this.ensureCanvasFocus(e);\r\n        }} {...props}>\r\n            <span className=\"mito-hud-button-hotkey\">{key}</span>{text}\r\n        </div>);\r\n    }\r\n    renderBuildButton(key: string, props?: React.HTMLProps<HTMLDivElement>) {\r\n        const cellType = BUILD_HOTKEYS[key];\r\n        let text: string;\r\n        if (cellType === Tissue) {\r\n            text = `Build ${cellType.displayName}`;\r\n        } else if (cellType === Leaf || cellType === Root) {\r\n            text = `Build ${cellType.displayName}`;\r\n        } else if (cellType === Fruit) {\r\n            text = `Build ${cellType.displayName}`;\r\n        } else if (cellType === Transport) {\r\n            text = `Lay ${cellType.displayName}`;\r\n        } else {\r\n            text = `Build ${cellType.displayName}`;\r\n        }\r\n        const style: React.CSSProperties = { ...(props || { style: {} }).style };\r\n        if (this.props.autoplace === cellType) {\r\n            style.fontWeight = \"bold\";\r\n            style.textDecoration = \"underline\";\r\n            style.color = \"rgb(45, 220, 40)\";\r\n            if (this.props.water < 1) {\r\n                text += \" (need water!)\";\r\n                style.color = \"red\";\r\n            }\r\n            if (this.props.sugar < 1) {\r\n                text += \" (need sugar!)\";\r\n                style.color = \"red\";\r\n            }\r\n        }\r\n        return this.renderButton(key, \" - \" + text, { ...props, style });\r\n    }\r\n    renderInventory() {\r\n        return (<div className=\"mito-inventory-indicator\">\r\n            <span className=\"mito-inventory-water\">\r\n                {this.props.water.toFixed(2)} water\r\n                    </span>&nbsp;<span className=\"mito-inventory-sugar\">\r\n                {this.props.sugar.toFixed(2)} sugar\r\n                    </span>\r\n        </div>);\r\n    }\r\n    renderInventoryBar() {\r\n        const waterPercent = this.props.water / params.maxResources;\r\n        const sugarPercent = this.props.sugar / params.maxResources;\r\n        const emptyPercent = 1 - (this.props.water + this.props.sugar) / params.maxResources;\r\n        const waterStyles: React.CSSProperties = { width: `${(waterPercent * 100)}%` };\r\n        const sugarStyles: React.CSSProperties = { width: `${(sugarPercent * 100)}%` };\r\n        const emptyStyles: React.CSSProperties = { width: `${(emptyPercent * 100)}%` };\r\n        const inventoryBar = (<div className=\"mito-inventory-bar\">\r\n            <div style={waterStyles} className=\"mito-inventory-bar-water\"></div>\r\n            <div style={sugarStyles} className=\"mito-inventory-bar-sugar\"></div>\r\n            <div style={emptyStyles} className=\"mito-inventory-bar-empty\"></div>\r\n        </div>);\r\n        return inventoryBar;\r\n    }\r\n    renderAllBuildButtons() {\r\n        const buttons: JSX.Element[] = [];\r\n        for (const key in BUILD_HOTKEYS) {\r\n            if (key === \"F\") {\r\n                // put fruit last, handle specially\r\n                continue;\r\n            }\r\n            const el = this.renderBuildButton(key);\r\n            if (el != null) {\r\n                buttons.push(el);\r\n            }\r\n        }\r\n        if (this.props.world.fruit == null && BUILD_HOTKEYS.F) {\r\n            buttons.push(this.renderBuildButton(\"F\"));\r\n        }\r\n        return <div className=\"mito-hud-section mito-hud-section-build\">{buttons}</div>;\r\n    }\r\n    public renderSecondEls() {\r\n        return (<div className=\"mito-hud-section mito-hud-section-actions\">\r\n            {this.renderButton('1', \" - Drop water\")}\r\n            {this.renderButton('2', \" - Drop sugar\")}\r\n            {this.renderButton('.', \" - Wait a turn\")}\r\n            {this.renderButton('?', \" - Instructions\")}\r\n        </div>);\r\n    }\r\n    public renderDPad() {\r\n        const els: JSX.Element[] = [];\r\n        for (const key of \"qwea.dzsc\".split(\"\")) {\r\n            els.push(this.renderButton(key, null, {\r\n                style: {},\r\n            }));\r\n        }\r\n        return (<div className=\"mito-hud-section d-pad\">\r\n            {els}\r\n        </div>);\r\n    }\r\n    // public renderTime() {\r\n    //     return <div className=\"mito-hud-section\">{this.props.world.time}</div>;\r\n    // }\r\n    public renderFruitUI() {\r\n        const { world } = this.props;\r\n        if (world.fruit != null) {\r\n            return (<div className=\"mito-hud-section\">\r\n                You bear Fruit! {world.fruit.inventory.sugar.toFixed(2)} of {Fruit.sugarToWin} sugar!\r\n                </div>);\r\n        }\r\n    }\r\n    public renderUIState() {\r\n        if (this.props.uiState.type === \"expanding\") {\r\n            const buttons: JSX.Element[] = [];\r\n            for (const key in BUILD_HOTKEYS) {\r\n                const cellType = BUILD_HOTKEYS[key];\r\n                if (cellType === Fruit && this.props.world.fruit != null) {\r\n                    // put fruit last, handle specially\r\n                    continue;\r\n                }\r\n                if (cellType === Transport) {\r\n                    continue;\r\n                }\r\n                const el = this.renderButton(key, cellType.displayName);\r\n                if (el != null) {\r\n                    buttons.push(el);\r\n                }\r\n            }\r\n            buttons.push(this.renderButton(\"Esc\", null));\r\n            return (\r\n                <div className=\"ui-popup ui-popup-bottom\">\r\n                    <div className=\"connector-line\"></div>\r\n                    <span className=\"popup-title\">Build</span>\r\n                    <div className=\"popup-content popup-row\">\r\n                        {buttons}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    public renderAutoplacePopup() {\r\n        if (this.props.autoplace) {\r\n            const style: React.CSSProperties = {\r\n                left: this.props.mouseX,\r\n                top: this.props.mouseY,\r\n            };\r\n            return (<div className=\"popup-autoplace ui-popup\" style={style}>\r\n                <div className=\"popup-content popup-text\">\r\n                    Building {this.props.autoplace.displayName}\r\n                    {this.renderButton(\"Esc\", null)}\r\n                </div>\r\n            </div>);\r\n        }\r\n    }\r\n}\r\n","import * as dat from 'dat.gui';\r\nimport * as React from 'react';\r\n\r\nimport { ALL_ENVIRONMENTS } from '../game/environment';\r\nimport { params, updateParamsHash } from \"../params\";\r\n\r\nexport class ParamsGUI extends React.Component {\r\n    private gui: dat.GUI;\r\n    constructor(props: any) {\r\n        super(props);\r\n        const gui = new dat.GUI({\r\n            closed: true,\r\n            width: 450,\r\n        });\r\n        gui.add(params, \"environment\", Object.keys(ALL_ENVIRONMENTS)).onChange(() => setTimeout(() => window.location.reload(), 100));\r\n        gui.add(params, \"droop\", 0, 0.5, 0.01);\r\n        gui.add(params, \"fountainTurnsPerWater\", 1, 100, 1);\r\n        gui.add(params, \"isRealtime\");\r\n        gui.add(params, \"leafReactionRate\", 0, 0.2, .0001);\r\n        gui.add(params, \"leafSugarPerReaction\", 0, 1, .01);\r\n        gui.add(params, \"rootTurnsPerTransfer\", 1, 100, 1);\r\n        gui.add(params, \"soilDarknessBase\", 0, 1, 0.01);\r\n        gui.add(params, \"soilDiffusionType\", [\"discrete\", \"continuous\"]);\r\n        gui.add(params, \"sunlightReintroduction\", 0, 1, 0.01);\r\n        gui.add(params, \"sunlightDiffusion\", 0, 1, 0.01);\r\n        gui.add(params, \"transportTurnsPerMove\", 1, 50, 1);\r\n        gui.add(params, \"veinDiffusion\", 0, 0.85, 0.0001);\r\n        const f = gui.addFolder(\"Needs Page Refresh\");\r\n        f.add(params, \"cellGestationTurns\", 0, 100, 1);\r\n        f.add(params, \"cellDiffusionSugar\", 0, .85, 0.0001);\r\n        f.add(params, \"cellDiffusionWater\", 0, .85, 0.0001);\r\n        f.add(params, \"cellEnergyMax\", 400, 10000, 100);\r\n        f.add(params, \"fountainAppearanceRate\", 1, 5, 0.1);\r\n        f.add(params, \"maxResources\", 10, 1000, 1);\r\n        f.add(params, \"soilDiffusionWater\", 0, .25, 0.00001);\r\n        f.add(params, \"soilMaxWater\", 1, 100, 1);\r\n        f.add(params, \"tissueInventoryCapacity\", 1, 100, 1);\r\n\r\n        for (const c of gui.__controllers.concat(f.__controllers)) {\r\n            c.onFinishChange(updateParamsHash);\r\n        }\r\n\r\n        this.gui = gui;\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Mito from \"..\";\r\nimport { World } from \"../game\";\r\nimport { Tile, Transport } from \"../game/tile\";\r\nimport { findPositionsThroughNonObstacles, findPositionsThroughTissue } from \"../pathfinding\";\r\nimport TileHighlight from \"../tutorial/tileHighlight\";\r\nimport { HoveredTileInfo } from \"./HoveredTileInfo\";\r\n\r\ninterface HoverProps {\r\n    mito: Mito;\r\n}\r\n\r\nexport class Hover extends React.Component<HoverProps> {\r\n    get scene() {\r\n        return this.props.mito.scene;\r\n    }\r\n    public render() {\r\n        const {hoveredTile} = this.props.mito;\r\n        return <>\r\n            <HoveredTileInfo tile={hoveredTile} />\r\n            { this.maybeRenderHoveredTileHighlight(hoveredTile) }\r\n            { this.maybeRenderPath() }\r\n        </>;\r\n    }\r\n\r\n    public maybeRenderHoveredTileHighlight(tile?: Tile) {\r\n        if (tile) {\r\n            return <TileHighlight x={tile.pos.x} y={tile.pos.y} scene={this.scene} />;\r\n        }\r\n    }\r\n\r\n    public maybeRenderPath() {\r\n        const { autoplace, hoveredTile, scene, world } = this.props.mito;\r\n        if (hoveredTile) {\r\n            if (autoplace != null && Mito.expansionTiles.indexOf(autoplace) !== -1) {\r\n                return <PathHighlight tile={hoveredTile} scene={scene} world={world} walkable=\"non-obstacles\" />;\r\n            }\r\n            if (autoplace === Transport) {\r\n                return <PathHighlight tile={hoveredTile} scene={scene} world={world} walkable=\"tissue\" />;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass PathHighlight extends React.PureComponent<{world: World, tile: Tile, scene: THREE.Scene, walkable: \"tissue\" | \"non-obstacles\"}> {\r\n    render() {\r\n        const path = this.props.walkable === \"non-obstacles\"\r\n            ? findPositionsThroughNonObstacles(this.props.world, this.props.tile.pos)\r\n            : findPositionsThroughTissue(this.props.world, this.props.tile.pos);\r\n        return <>\r\n            {path.map(([x, y]) => <TileHighlight x={x} y={y} scene={this.props.scene} />)}\r\n        </>;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { FullPageSketch } from './fullPageSketch';\r\nimport Mito from './sketches/mito';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <FullPageSketch sketchClass={Mito} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}