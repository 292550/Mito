Things I want genes to control:

(Tile)
* Water Diffusion
* Sugar Diffusion
* Is obstacle

(Cell)
* Time to Build
* Inventory capacity
* Convert sugar to energy
* Take energy from neighboring Cells
* Build cost

(Fruit)
* Immunity to freezing
* Pull resources from neighbors
* Provide reproduction through resource dumping

(Leaf)
* diffuse water with other Leaves
* Pull water from neighbors
* Perform photosynthesis: Water + Air into sugar

(Root)
* absorb water from Soil

(Transport)
* Directional: push water and sugar in a direction

Caaaraaazy ideas:

* not affected by temperatures
* makes nearby cells build faster
* water+sugar make Nutrient
* Convert Toxic to Nutrient
* Consume Energy; +1 slot
* Interact to release Toxins into surrounding soil
* Convert Nutrient into sugar
* Use Nutrient to release aromas (repel enemies, attract allies)
* Protect against fungus
* poisonous - kill things that eat this tile
* faster walk speed on it
* nighttime emits an aroma
* push resources away
* diffusion easier
* diffusion harder
* water that leaves this cell also carries sugar
* move 80% slower, +2
* take much longer to build; +2
* 1 sugar + 1 nutrient = 5 sugar
* nutrient directly into energy (respiration?)
* Turn nearby organic matter in Soil directly into nutrients
* Collect water from adjacent Air tiles
* thorns - insects distance 1 from you cannot get any nearer
* fuzzy - prevent frost 1, prevent heat 1, capture Air water

Things to play with:
* When sunlight hits
* During nighttime
* When infected by disease
* While there is a water on me
* While not hungry
* While there is sugar on me

Required "addon" genes:
* When photosynthesis occurs, produce 0.1 nutrient
* Root hairs - roots suck from all adjacent soil, instead of just one
* 


Current implementation thoughts:

Gene (GeneBlueprint, 3 functions)
- .level() -> RealizedGene

RealizedGene (Gene, level)
- .newInstance() -> GeneInstance

GeneInstance (Gene, Level, Cell)

4 things: blueprint, step functions, level, cell

I wanted to stay away from Classes because I need to tag the classes itself with lots of type info, and there's no good typeful way to do that.

So, the current flow is:
1. We make a Gene: Gene.make(blueprint, step functions)
2. For any gene, we call gene.level(level)
3. For a realized gene, we call realizedGene.newInstance(cell) to get a GeneInstance

Things we want:
1. Values for Genes themselves (Singletons)
2. Type safety and convenience
3. 

Things the system needs:
1. A place to store Gene + Level, without running it yet
2. A place for state, where a specific GeneInstance is run

problems:

* Getting the right GeneInstance type parameters is hard. 
  It'd be nice to do GeneInstance<GeneSoilAbsorb>
    - GeneSoilAbsorb is a value, not a type.
  GeneInstance<typeof GeneSoilAbsorb> ?

This is what the type is currently:
GeneInstance<{
    cooldown: number;
    totalSucked: number;
    activeNeighbors: Vector2[];
}, "secondsPerAbsorb">

main problem: I don't know how to "extract" the type parameters out of another type and pass them into my own type parameters

